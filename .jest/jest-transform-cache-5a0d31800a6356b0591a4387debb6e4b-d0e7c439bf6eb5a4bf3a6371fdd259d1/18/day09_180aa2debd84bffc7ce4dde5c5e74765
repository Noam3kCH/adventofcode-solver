b32e8e4d23c3a50c4525a34f723c2ec9
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part2 = exports.part1 = void 0;

function shortest(graph, curr, visited) {
  const paths = Object.keys(graph[curr]).filter(node => visited.indexOf(node) === -1).map(node => graph[curr][node] + shortest(graph, node, visited.concat(curr)));
  return paths.length ? Math.min.apply(Math, paths) : 0;
}

function longest(graph, curr, visited) {
  const paths = Object.keys(graph[curr]).filter(node => visited.indexOf(node) === -1).map(node => graph[curr][node] + longest(graph, node, visited.concat(curr)));
  return paths.length ? Math.max.apply(Math, paths) : 0;
}

function parse(input) {
  const graph = input.split('\n').map(x => x.match(/^(.*) to (.*) = (\d+)$/)).map(x => ({
    p1: x[1],
    p2: x[2],
    d: parseInt(x[3])
  })).reduce((graph, edge) => {
    graph[edge.p1] = { ...graph[edge.p1],
      [edge.p2]: edge.d
    };
    graph[edge.p2] = { ...graph[edge.p2],
      [edge.p1]: edge.d
    };
    return graph;
  }, {});
  graph.$$start = Object.keys(graph).reduce((obj, key) => ({
    [key]: 0,
    ...obj
  }), {});
  return graph;
}

const part1 = input => shortest(parse(input), '$$start', []);

exports.part1 = part1;

const part2 = input => longest(parse(input), '$$start', []);

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTA5LmpzIl0sIm5hbWVzIjpbInNob3J0ZXN0IiwiZ3JhcGgiLCJjdXJyIiwidmlzaXRlZCIsInBhdGhzIiwiT2JqZWN0Iiwia2V5cyIsImZpbHRlciIsIm5vZGUiLCJpbmRleE9mIiwibWFwIiwiY29uY2F0IiwibGVuZ3RoIiwiTWF0aCIsIm1pbiIsImFwcGx5IiwibG9uZ2VzdCIsIm1heCIsInBhcnNlIiwiaW5wdXQiLCJzcGxpdCIsIngiLCJtYXRjaCIsInAxIiwicDIiLCJkIiwicGFyc2VJbnQiLCJyZWR1Y2UiLCJlZGdlIiwiJCRzdGFydCIsIm9iaiIsImtleSIsInBhcnQxIiwicGFydDIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFTQSxRQUFULENBQWtCQyxLQUFsQixFQUF5QkMsSUFBekIsRUFBK0JDLE9BQS9CLEVBQXdDO0FBQ3RDLFFBQU1DLEtBQUssR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlMLEtBQUssQ0FBQ0MsSUFBRCxDQUFqQixFQUNYSyxNQURXLENBQ0pDLElBQUksSUFBSUwsT0FBTyxDQUFDTSxPQUFSLENBQWdCRCxJQUFoQixNQUEwQixDQUFDLENBRC9CLEVBRVhFLEdBRlcsQ0FHVkYsSUFBSSxJQUFJUCxLQUFLLENBQUNDLElBQUQsQ0FBTCxDQUFZTSxJQUFaLElBQW9CUixRQUFRLENBQUNDLEtBQUQsRUFBUU8sSUFBUixFQUFjTCxPQUFPLENBQUNRLE1BQVIsQ0FBZVQsSUFBZixDQUFkLENBSDFCLENBQWQ7QUFLQSxTQUFPRSxLQUFLLENBQUNRLE1BQU4sR0FBZUMsSUFBSSxDQUFDQyxHQUFMLENBQVNDLEtBQVQsQ0FBZUYsSUFBZixFQUFxQlQsS0FBckIsQ0FBZixHQUE2QyxDQUFwRDtBQUNEOztBQUVELFNBQVNZLE9BQVQsQ0FBaUJmLEtBQWpCLEVBQXdCQyxJQUF4QixFQUE4QkMsT0FBOUIsRUFBdUM7QUFDckMsUUFBTUMsS0FBSyxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWUwsS0FBSyxDQUFDQyxJQUFELENBQWpCLEVBQ1hLLE1BRFcsQ0FDSkMsSUFBSSxJQUFJTCxPQUFPLENBQUNNLE9BQVIsQ0FBZ0JELElBQWhCLE1BQTBCLENBQUMsQ0FEL0IsRUFFWEUsR0FGVyxDQUdWRixJQUFJLElBQUlQLEtBQUssQ0FBQ0MsSUFBRCxDQUFMLENBQVlNLElBQVosSUFBb0JRLE9BQU8sQ0FBQ2YsS0FBRCxFQUFRTyxJQUFSLEVBQWNMLE9BQU8sQ0FBQ1EsTUFBUixDQUFlVCxJQUFmLENBQWQsQ0FIekIsQ0FBZDtBQUtBLFNBQU9FLEtBQUssQ0FBQ1EsTUFBTixHQUFlQyxJQUFJLENBQUNJLEdBQUwsQ0FBU0YsS0FBVCxDQUFlRixJQUFmLEVBQXFCVCxLQUFyQixDQUFmLEdBQTZDLENBQXBEO0FBQ0Q7O0FBRUQsU0FBU2MsS0FBVCxDQUFlQyxLQUFmLEVBQXNCO0FBQ3BCLFFBQU1sQixLQUFLLEdBQUdrQixLQUFLLENBQ2hCQyxLQURXLENBQ0wsSUFESyxFQUVYVixHQUZXLENBRVBXLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxLQUFGLENBQVEsd0JBQVIsQ0FGRSxFQUdYWixHQUhXLENBR1BXLENBQUMsS0FBSztBQUFFRSxJQUFBQSxFQUFFLEVBQUVGLENBQUMsQ0FBQyxDQUFELENBQVA7QUFBWUcsSUFBQUEsRUFBRSxFQUFFSCxDQUFDLENBQUMsQ0FBRCxDQUFqQjtBQUFzQkksSUFBQUEsQ0FBQyxFQUFFQyxRQUFRLENBQUNMLENBQUMsQ0FBQyxDQUFELENBQUY7QUFBakMsR0FBTCxDQUhNLEVBSVhNLE1BSlcsQ0FJSixDQUFDMUIsS0FBRCxFQUFRMkIsSUFBUixLQUFpQjtBQUN2QjNCLElBQUFBLEtBQUssQ0FBQzJCLElBQUksQ0FBQ0wsRUFBTixDQUFMLEdBQWlCLEVBQUUsR0FBR3RCLEtBQUssQ0FBQzJCLElBQUksQ0FBQ0wsRUFBTixDQUFWO0FBQXFCLE9BQUNLLElBQUksQ0FBQ0osRUFBTixHQUFXSSxJQUFJLENBQUNIO0FBQXJDLEtBQWpCO0FBQ0F4QixJQUFBQSxLQUFLLENBQUMyQixJQUFJLENBQUNKLEVBQU4sQ0FBTCxHQUFpQixFQUFFLEdBQUd2QixLQUFLLENBQUMyQixJQUFJLENBQUNKLEVBQU4sQ0FBVjtBQUFxQixPQUFDSSxJQUFJLENBQUNMLEVBQU4sR0FBV0ssSUFBSSxDQUFDSDtBQUFyQyxLQUFqQjtBQUNBLFdBQU94QixLQUFQO0FBQ0QsR0FSVyxFQVFULEVBUlMsQ0FBZDtBQVNBQSxFQUFBQSxLQUFLLENBQUM0QixPQUFOLEdBQWdCeEIsTUFBTSxDQUFDQyxJQUFQLENBQVlMLEtBQVosRUFBbUIwQixNQUFuQixDQUNkLENBQUNHLEdBQUQsRUFBTUMsR0FBTixNQUFlO0FBQUUsS0FBQ0EsR0FBRCxHQUFPLENBQVQ7QUFBWSxPQUFHRDtBQUFmLEdBQWYsQ0FEYyxFQUVkLEVBRmMsQ0FBaEI7QUFJQSxTQUFPN0IsS0FBUDtBQUNEOztBQUVNLE1BQU0rQixLQUFLLEdBQUdiLEtBQUssSUFBSW5CLFFBQVEsQ0FBQ2tCLEtBQUssQ0FBQ0MsS0FBRCxDQUFOLEVBQWUsU0FBZixFQUEwQixFQUExQixDQUEvQjs7OztBQUNBLE1BQU1jLEtBQUssR0FBR2QsS0FBSyxJQUFJSCxPQUFPLENBQUNFLEtBQUssQ0FBQ0MsS0FBRCxDQUFOLEVBQWUsU0FBZixFQUEwQixFQUExQixDQUE5QiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHNob3J0ZXN0KGdyYXBoLCBjdXJyLCB2aXNpdGVkKSB7XG4gIGNvbnN0IHBhdGhzID0gT2JqZWN0LmtleXMoZ3JhcGhbY3Vycl0pXG4gICAgLmZpbHRlcihub2RlID0+IHZpc2l0ZWQuaW5kZXhPZihub2RlKSA9PT0gLTEpXG4gICAgLm1hcChcbiAgICAgIG5vZGUgPT4gZ3JhcGhbY3Vycl1bbm9kZV0gKyBzaG9ydGVzdChncmFwaCwgbm9kZSwgdmlzaXRlZC5jb25jYXQoY3VycikpLFxuICAgICk7XG4gIHJldHVybiBwYXRocy5sZW5ndGggPyBNYXRoLm1pbi5hcHBseShNYXRoLCBwYXRocykgOiAwO1xufVxuXG5mdW5jdGlvbiBsb25nZXN0KGdyYXBoLCBjdXJyLCB2aXNpdGVkKSB7XG4gIGNvbnN0IHBhdGhzID0gT2JqZWN0LmtleXMoZ3JhcGhbY3Vycl0pXG4gICAgLmZpbHRlcihub2RlID0+IHZpc2l0ZWQuaW5kZXhPZihub2RlKSA9PT0gLTEpXG4gICAgLm1hcChcbiAgICAgIG5vZGUgPT4gZ3JhcGhbY3Vycl1bbm9kZV0gKyBsb25nZXN0KGdyYXBoLCBub2RlLCB2aXNpdGVkLmNvbmNhdChjdXJyKSksXG4gICAgKTtcbiAgcmV0dXJuIHBhdGhzLmxlbmd0aCA/IE1hdGgubWF4LmFwcGx5KE1hdGgsIHBhdGhzKSA6IDA7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gIGNvbnN0IGdyYXBoID0gaW5wdXRcbiAgICAuc3BsaXQoJ1xcbicpXG4gICAgLm1hcCh4ID0+IHgubWF0Y2goL14oLiopIHRvICguKikgPSAoXFxkKykkLykpXG4gICAgLm1hcCh4ID0+ICh7IHAxOiB4WzFdLCBwMjogeFsyXSwgZDogcGFyc2VJbnQoeFszXSkgfSkpXG4gICAgLnJlZHVjZSgoZ3JhcGgsIGVkZ2UpID0+IHtcbiAgICAgIGdyYXBoW2VkZ2UucDFdID0geyAuLi5ncmFwaFtlZGdlLnAxXSwgW2VkZ2UucDJdOiBlZGdlLmQgfTtcbiAgICAgIGdyYXBoW2VkZ2UucDJdID0geyAuLi5ncmFwaFtlZGdlLnAyXSwgW2VkZ2UucDFdOiBlZGdlLmQgfTtcbiAgICAgIHJldHVybiBncmFwaDtcbiAgICB9LCB7fSk7XG4gIGdyYXBoLiQkc3RhcnQgPSBPYmplY3Qua2V5cyhncmFwaCkucmVkdWNlKFxuICAgIChvYmosIGtleSkgPT4gKHsgW2tleV06IDAsIC4uLm9iaiB9KSxcbiAgICB7fSxcbiAgKTtcbiAgcmV0dXJuIGdyYXBoO1xufVxuXG5leHBvcnQgY29uc3QgcGFydDEgPSBpbnB1dCA9PiBzaG9ydGVzdChwYXJzZShpbnB1dCksICckJHN0YXJ0JywgW10pO1xuZXhwb3J0IGNvbnN0IHBhcnQyID0gaW5wdXQgPT4gbG9uZ2VzdChwYXJzZShpbnB1dCksICckJHN0YXJ0JywgW10pO1xuIl19