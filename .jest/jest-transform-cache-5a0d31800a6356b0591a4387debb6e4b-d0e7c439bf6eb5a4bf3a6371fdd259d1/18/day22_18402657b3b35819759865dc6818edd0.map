{"version":3,"sources":["day22.js"],"names":["cache","pos","x","y","terrain","point","depth","erosion","geo","undefined","parse","input","match","map","parseInt","target","part1","risk","neighbors","equip","time","options","current","add","p","e","push","points","filter","forEach","next","part2","visited","Map","queue","score","a","Math","abs","length","n","shift","o","v","get","splice","indexOf","set","sort","b"],"mappings":";;;;;;;AAAA,IAAIA,KAAK,GAAG,EAAZ;;AACA,MAAMC,GAAG,GAAG,CAAC;AAAEC,EAAAA,CAAF;AAAKC,EAAAA;AAAL,CAAD,KAAe,GAAED,CAAE,IAAGC,CAAE,EAApC;;AACA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkBC,OAAO,CAACF,KAAD,EAAQC,KAAR,CAAP,GAAwB,CAA1D;;AAEA,SAASC,OAAT,CAAiB;AAAEL,EAAAA,CAAF;AAAKC,EAAAA;AAAL,CAAjB,EAA2BG,KAA3B,EAAkC;AAChC,MAAIE,GAAJ;AACA,MAAIR,KAAK,CAACC,GAAG,CAAC;AAAEC,IAAAA,CAAF;AAAKC,IAAAA;AAAL,GAAD,CAAJ,CAAL,KAAyBM,SAA7B,EAAwC,OAAOT,KAAK,CAACC,GAAG,CAAC;AAAEC,IAAAA,CAAF;AAAKC,IAAAA;AAAL,GAAD,CAAJ,CAAZ,CAAxC,KACK,IAAIA,CAAC,KAAK,CAAV,EAAaK,GAAG,GAAGN,CAAC,GAAG,KAAV,CAAb,KACA,IAAIA,CAAC,KAAK,CAAV,EAAaM,GAAG,GAAGL,CAAC,GAAG,KAAV,CAAb,KACAK,GAAG,GAAGD,OAAO,CAAC;AAAEL,IAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,IAAAA;AAAZ,GAAD,EAAkBG,KAAlB,CAAP,GAAkCC,OAAO,CAAC;AAAEL,IAAAA,CAAF;AAAKC,IAAAA,CAAC,EAAEA,CAAC,GAAG;AAAZ,GAAD,EAAkBG,KAAlB,CAA/C;AACLN,EAAAA,KAAK,CAACC,GAAG,CAAC;AAAEC,IAAAA,CAAF;AAAKC,IAAAA;AAAL,GAAD,CAAJ,CAAL,GAAuB,CAACK,GAAG,GAAGF,KAAP,IAAgB,KAAvC;AACA,SAAON,KAAK,CAACC,GAAG,CAAC;AAAEC,IAAAA,CAAF;AAAKC,IAAAA;AAAL,GAAD,CAAJ,CAAZ;AACD;;AAED,SAASO,KAAT,CAAeC,KAAf,EAAsB;AACpB,QAAM,CAACL,KAAD,EAAQJ,CAAR,EAAWC,CAAX,IAAgBQ,KAAK,CAACC,KAAN,CAAY,MAAZ,EAAoBC,GAApB,CAAwBX,CAAC,IAAIY,QAAQ,CAACZ,CAAD,CAArC,CAAtB;AACA,SAAO;AAAEI,IAAAA,KAAF;AAASS,IAAAA,MAAM,EAAE;AAAEb,MAAAA,CAAF;AAAKC,MAAAA;AAAL;AAAjB,GAAP;AACD;;AAEM,SAASa,KAAT,CAAeL,KAAf,EAAsB;AAC3B,QAAM;AAAEL,IAAAA,KAAF;AAASS,IAAAA;AAAT,MAAoBL,KAAK,CAACC,KAAD,CAA/B;AACA,MAAIM,IAAI,GAAG,CAAX;AACAjB,EAAAA,KAAK,GAAG;AAAE,KAACC,GAAG,CAACc,MAAD,CAAJ,GAAe;AAAjB,GAAR;;AACA,OAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIa,MAAM,CAACb,CAA5B,EAA+BA,CAAC,EAAhC,EAAoC;AAClC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIY,MAAM,CAACZ,CAA5B,EAA+BA,CAAC,EAAhC,EAAoC;AAClCc,MAAAA,IAAI,IAAIb,OAAO,CAAC;AAAEF,QAAAA,CAAF;AAAKC,QAAAA;AAAL,OAAD,EAAWG,KAAX,CAAf;AACD;AACF;;AACD,SAAOW,IAAP;AACD;;AAED,SAASC,SAAT,CAAmB;AAAEb,EAAAA,KAAF;AAASc,EAAAA,KAAT;AAAgBC,EAAAA;AAAhB,CAAnB,EAA2Cd,KAA3C,EAAkDS,MAAlD,EAA0D;AACxD,QAAMM,OAAO,GAAG,EAAhB;AACA,QAAMC,OAAO,GAAGlB,OAAO,CAACC,KAAD,EAAQC,KAAR,CAAvB;;AACA,QAAMiB,GAAG,GAAG,CAACC,CAAD,EAAIC,CAAJ,KACVJ,OAAO,CAACK,IAAR,CAAa;AAAErB,IAAAA,KAAK,EAAEmB,CAAT;AAAYL,IAAAA,KAAK,EAAEM,CAAnB;AAAsBL,IAAAA,IAAI,EAAEA,IAAI,IAAIK,CAAC,KAAKN,KAAN,GAAc,CAAd,GAAkB,CAAtB;AAAhC,GAAb,CADF;;AAEA,QAAMQ,MAAM,GAAG,CACb;AAAEzB,IAAAA,CAAC,EAAEG,KAAK,CAACH,CAAN,GAAU,CAAf;AAAkBC,IAAAA,CAAC,EAAEE,KAAK,CAACF,CAAN,GAAU;AAA/B,GADa,EAEb;AAAED,IAAAA,CAAC,EAAEG,KAAK,CAACH,CAAN,GAAU,CAAf;AAAkBC,IAAAA,CAAC,EAAEE,KAAK,CAACF,CAAN,GAAU;AAA/B,GAFa,EAGb;AAAED,IAAAA,CAAC,EAAEG,KAAK,CAACH,CAAN,GAAU,CAAf;AAAkBC,IAAAA,CAAC,EAAEE,KAAK,CAACF,CAAN,GAAU;AAA/B,GAHa,EAIb;AAAED,IAAAA,CAAC,EAAEG,KAAK,CAACH,CAAN,GAAU,CAAf;AAAkBC,IAAAA,CAAC,EAAEE,KAAK,CAACF,CAAN,GAAU;AAA/B,GAJa,EAKbyB,MALa,CAKNJ,CAAC,IAAIA,CAAC,CAACtB,CAAF,IAAO,CAAP,IAAYsB,CAAC,CAACrB,CAAF,IAAO,CALlB,CAAf;AAMAwB,EAAAA,MAAM,CAACE,OAAP,CAAexB,KAAK,IAAI;AACtB,UAAMyB,IAAI,GAAG1B,OAAO,CAACC,KAAD,EAAQC,KAAR,CAApB;;AACA,QAAID,KAAK,CAACH,CAAN,KAAYa,MAAM,CAACb,CAAnB,IAAwBG,KAAK,CAACF,CAAN,KAAYY,MAAM,CAACZ,CAA/C,EAAkD;AAChD,UAAImB,OAAO,KAAK,CAAZ,IAAiBH,KAAK,KAAK,MAA/B,EAAuCI,GAAG,CAAClB,KAAD,EAAQ,OAAR,CAAH,CAAvC,CACA;AADA,WAEKgB,OAAO,CAACK,IAAR,CAAa;AAAErB,UAAAA,KAAF;AAASc,UAAAA,KAAK,EAAE,OAAhB;AAAyBC,UAAAA,IAAI,EAAEA,IAAI,GAAG;AAAtC,SAAb;AACN,KAJD,MAIO,IAAIU,IAAI,KAAK,CAAb,EAAgB;AACrB,UAAIR,OAAO,KAAK,CAAhB,EAAmBC,GAAG,CAAClB,KAAD,EAAQ,OAAR,CAAH;AACnB,UAAIiB,OAAO,KAAK,CAAhB,EAAmBC,GAAG,CAAClB,KAAD,EAAQ,MAAR,CAAH;AACpB,KAHM,MAGA,IAAIyB,IAAI,KAAK,CAAb,EAAgB;AACrB,UAAIR,OAAO,KAAK,CAAhB,EAAmBC,GAAG,CAAClB,KAAD,EAAQ,SAAR,CAAH;AACnB,UAAIiB,OAAO,KAAK,CAAhB,EAAmBC,GAAG,CAAClB,KAAD,EAAQ,MAAR,CAAH;AACpB,KAHM,MAGA,IAAIyB,IAAI,KAAK,CAAb,EAAgB;AACrB,UAAIR,OAAO,KAAK,CAAhB,EAAmBC,GAAG,CAAClB,KAAD,EAAQ,OAAR,CAAH;AACnB,UAAIiB,OAAO,KAAK,CAAhB,EAAmBC,GAAG,CAAClB,KAAD,EAAQ,SAAR,CAAH;AACpB;AACF,GAhBD;AAiBA,SAAOgB,OAAP;AACD;;AAEM,SAASU,KAAT,CAAepB,KAAf,EAAsB;AAC3B,QAAM;AAAEL,IAAAA,KAAF;AAASS,IAAAA;AAAT,MAAoBL,KAAK,CAACC,KAAD,CAA/B;AACA,QAAMqB,OAAO,GAAG,IAAIC,GAAJ,EAAhB;AACA,QAAMC,KAAK,GAAG,CAAC;AAAE7B,IAAAA,KAAK,EAAE;AAAEH,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAAT;AAAyBgB,IAAAA,KAAK,EAAE,OAAhC;AAAyCC,IAAAA,IAAI,EAAE;AAA/C,GAAD,CAAd;;AACA,QAAMe,KAAK,GAAGC,CAAC,IACbA,CAAC,CAAChB,IAAF,GAASiB,IAAI,CAACC,GAAL,CAASF,CAAC,CAAC/B,KAAF,CAAQH,CAAR,GAAYa,MAAM,CAACb,CAA5B,CAAT,GAA0CmC,IAAI,CAACC,GAAL,CAASF,CAAC,CAAC/B,KAAF,CAAQF,CAAR,GAAYY,MAAM,CAACZ,CAA5B,CAD5C;;AAEAH,EAAAA,KAAK,GAAG;AAAE,KAACC,GAAG,CAACc,MAAD,CAAJ,GAAe;AAAjB,GAAR;;AACA,SAAOmB,KAAK,CAACK,MAAN,GAAe,CAAtB,EAAyB;AACvB,UAAMC,CAAC,GAAGN,KAAK,CAACO,KAAN,EAAV;;AACA,QAAID,CAAC,CAACnC,KAAF,CAAQH,CAAR,KAAca,MAAM,CAACb,CAArB,IAA0BsC,CAAC,CAACnC,KAAF,CAAQF,CAAR,KAAcY,MAAM,CAACZ,CAAnD,EAAsD;AACpD,aAAOqC,CAAC,CAACpB,IAAT;AACD;;AACDF,IAAAA,SAAS,CAACsB,CAAD,EAAIlC,KAAJ,EAAWS,MAAX,CAAT,CAA4Bc,OAA5B,CAAoCa,CAAC,IAAI;AACvC,YAAMC,CAAC,GAAGX,OAAO,CAACY,GAAR,CAAa,GAAEF,CAAC,CAACrC,KAAF,CAAQH,CAAE,IAAGwC,CAAC,CAACrC,KAAF,CAAQF,CAAE,IAAGuC,CAAC,CAACvB,KAAM,EAAjD,CAAV;;AACA,UAAI,CAACwB,CAAD,IAAMD,CAAC,CAACtB,IAAF,GAASuB,CAAC,CAACvB,IAArB,EAA2B;AACzB,YAAIuB,CAAJ,EAAOT,KAAK,CAACW,MAAN,CAAaX,KAAK,CAACY,OAAN,CAAcH,CAAd,CAAb,EAA+B,CAA/B;AACPX,QAAAA,OAAO,CAACe,GAAR,CAAa,GAAEL,CAAC,CAACrC,KAAF,CAAQH,CAAE,IAAGwC,CAAC,CAACrC,KAAF,CAAQF,CAAE,IAAGuC,CAAC,CAACvB,KAAM,EAAjD,EAAoDuB,CAApD;AACAR,QAAAA,KAAK,CAACR,IAAN,CAAWgB,CAAX;AACD;AACF,KAPD;AAQAR,IAAAA,KAAK,CAACc,IAAN,CAAW,CAACZ,CAAD,EAAIa,CAAJ,KAAUd,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACc,CAAD,CAArC;AACD;AACF","sourcesContent":["let cache = {};\nconst pos = ({ x, y }) => `${x},${y}`;\nconst terrain = (point, depth) => erosion(point, depth) % 3;\n\nfunction erosion({ x, y }, depth) {\n  let geo;\n  if (cache[pos({ x, y })] !== undefined) return cache[pos({ x, y })];\n  else if (y === 0) geo = x * 16807;\n  else if (x === 0) geo = y * 48271;\n  else geo = erosion({ x: x - 1, y }, depth) * erosion({ x, y: y - 1 }, depth);\n  cache[pos({ x, y })] = (geo + depth) % 20183;\n  return cache[pos({ x, y })];\n}\n\nfunction parse(input) {\n  const [depth, x, y] = input.match(/\\d+/g).map(x => parseInt(x));\n  return { depth, target: { x, y } };\n}\n\nexport function part1(input) {\n  const { depth, target } = parse(input);\n  let risk = 0;\n  cache = { [pos(target)]: 0 };\n  for (let x = 0; x <= target.x; x++) {\n    for (let y = 0; y <= target.y; y++) {\n      risk += terrain({ x, y }, depth);\n    }\n  }\n  return risk;\n}\n\nfunction neighbors({ point, equip, time }, depth, target) {\n  const options = [];\n  const current = terrain(point, depth);\n  const add = (p, e) =>\n    options.push({ point: p, equip: e, time: time + (e === equip ? 1 : 8) });\n  const points = [\n    { x: point.x - 1, y: point.y + 0 },\n    { x: point.x + 1, y: point.y + 0 },\n    { x: point.x + 0, y: point.y - 1 },\n    { x: point.x + 0, y: point.y + 1 },\n  ].filter(p => p.x >= 0 && p.y >= 0);\n  points.forEach(point => {\n    const next = terrain(point, depth);\n    if (point.x === target.x && point.y === target.y) {\n      if (current !== 1 || equip === 'gear') add(point, 'torch');\n      //neither -> gear -> walk -> torch (7 + 1 + 7 = 15)\n      else options.push({ point, equip: 'torch', time: time + 15 });\n    } else if (next === 0) {\n      if (current !== 1) add(point, 'torch');\n      if (current !== 2) add(point, 'gear');\n    } else if (next === 1) {\n      if (current !== 0) add(point, 'neither');\n      if (current !== 2) add(point, 'gear');\n    } else if (next === 2) {\n      if (current !== 1) add(point, 'torch');\n      if (current !== 0) add(point, 'neither');\n    }\n  });\n  return options;\n}\n\nexport function part2(input) {\n  const { depth, target } = parse(input);\n  const visited = new Map();\n  const queue = [{ point: { x: 0, y: 0 }, equip: 'torch', time: 0 }];\n  const score = a =>\n    a.time + Math.abs(a.point.x - target.x) + Math.abs(a.point.y - target.y);\n  cache = { [pos(target)]: 0 };\n  while (queue.length > 0) {\n    const n = queue.shift();\n    if (n.point.x === target.x && n.point.y === target.y) {\n      return n.time;\n    }\n    neighbors(n, depth, target).forEach(o => {\n      const v = visited.get(`${o.point.x},${o.point.y},${o.equip}`);\n      if (!v || o.time < v.time) {\n        if (v) queue.splice(queue.indexOf(v), 1);\n        visited.set(`${o.point.x},${o.point.y},${o.equip}`, o);\n        queue.push(o);\n      }\n    });\n    queue.sort((a, b) => score(a) - score(b));\n  }\n}\n"]}