{"version":3,"sources":["day09.js"],"names":["shortest","graph","curr","visited","paths","Object","keys","filter","node","indexOf","map","concat","length","Math","min","apply","longest","max","parse","input","split","x","match","p1","p2","d","parseInt","reduce","edge","$$start","obj","key","part1","part2"],"mappings":"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","sourcesContent":["function shortest(graph, curr, visited) {\n  const paths = Object.keys(graph[curr])\n    .filter(node => visited.indexOf(node) === -1)\n    .map(\n      node => graph[curr][node] + shortest(graph, node, visited.concat(curr)),\n    );\n  return paths.length ? Math.min.apply(Math, paths) : 0;\n}\n\nfunction longest(graph, curr, visited) {\n  const paths = Object.keys(graph[curr])\n    .filter(node => visited.indexOf(node) === -1)\n    .map(\n      node => graph[curr][node] + longest(graph, node, visited.concat(curr)),\n    );\n  return paths.length ? Math.max.apply(Math, paths) : 0;\n}\n\nfunction parse(input) {\n  const graph = input\n    .split('\\n')\n    .map(x => x.match(/^(.*) to (.*) = (\\d+)$/))\n    .map(x => ({ p1: x[1], p2: x[2], d: parseInt(x[3]) }))\n    .reduce((graph, edge) => {\n      graph[edge.p1] = { ...graph[edge.p1], [edge.p2]: edge.d };\n      graph[edge.p2] = { ...graph[edge.p2], [edge.p1]: edge.d };\n      return graph;\n    }, {});\n  graph.$$start = Object.keys(graph).reduce(\n    (obj, key) => ({ [key]: 0, ...obj }),\n    {},\n  );\n  return graph;\n}\n\nexport const part1 = input => shortest(parse(input), '$$start', []);\nexport const part2 = input => longest(parse(input), '$$start', []);\n"]}