49dafce9dbb8f3e44fbb62453e77917d
"use strict";

var _day = require("./day07.js");

var _readInput = _interopRequireDefault(require("../utils/read-input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const meta = Object.freeze({
  url: require('url').pathToFileURL(__filename)
});
const input = (0, _readInput.default)(meta.url);
describe('day07 2018', () => {
  describe('part1', () => {
    it('should work for part 1 examples', () => {
      expect((0, _day.part1)(['Step C must be finished before step A can begin.', 'Step C must be finished before step F can begin.', 'Step A must be finished before step B can begin.', 'Step A must be finished before step D can begin.', 'Step B must be finished before step E can begin.', 'Step D must be finished before step E can begin.', 'Step F must be finished before step E can begin.'].join('\n'))).toEqual('CABDFE');
    });
    it('should work for part 1 input', () => {
      expect((0, _day.part1)(input)).toEqual('IJLFUVDACEHGRZPNKQWSBTMXOY');
    });
  });
  describe('part2', () => {
    it('should work for part 2 examples', () => {
      expect((0, _day.part2)(['Step C must be finished before step A can begin.', 'Step C must be finished before step F can begin.', 'Step A must be finished before step B can begin.', 'Step A must be finished before step D can begin.', 'Step B must be finished before step E can begin.', 'Step D must be finished before step E can begin.', 'Step F must be finished before step E can begin.'].join('\n'), 2, 0)).toEqual(15);
    });
    it('should work for part 2 input', () => {
      expect((0, _day.part2)(input)).toEqual(1072);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTA3LnNwZWMuanMiXSwibmFtZXMiOlsiaW5wdXQiLCJ1cmwiLCJkZXNjcmliZSIsIml0IiwiZXhwZWN0Iiwiam9pbiIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7Ozs7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUcsd0JBQVUsS0FBWUMsR0FBdEIsQ0FBZDtBQUVBQyxRQUFRLENBQUMsWUFBRCxFQUFlLE1BQU07QUFDM0JBLEVBQUFBLFFBQVEsQ0FBQyxPQUFELEVBQVUsTUFBTTtBQUN0QkMsSUFBQUEsRUFBRSxDQUFDLGlDQUFELEVBQW9DLE1BQU07QUFDMUNDLE1BQUFBLE1BQU0sQ0FDSixnQkFDRSxDQUNFLGtEQURGLEVBRUUsa0RBRkYsRUFHRSxrREFIRixFQUlFLGtEQUpGLEVBS0Usa0RBTEYsRUFNRSxrREFORixFQU9FLGtEQVBGLEVBUUVDLElBUkYsQ0FRTyxJQVJQLENBREYsQ0FESSxDQUFOLENBWUVDLE9BWkYsQ0FZVSxRQVpWO0FBYUQsS0FkQyxDQUFGO0FBZ0JBSCxJQUFBQSxFQUFFLENBQUMsOEJBQUQsRUFBaUMsTUFBTTtBQUN2Q0MsTUFBQUEsTUFBTSxDQUFDLGdCQUFNSixLQUFOLENBQUQsQ0FBTixDQUFxQk0sT0FBckIsQ0FBNkIsNEJBQTdCO0FBQ0QsS0FGQyxDQUFGO0FBR0QsR0FwQk8sQ0FBUjtBQXNCQUosRUFBQUEsUUFBUSxDQUFDLE9BQUQsRUFBVSxNQUFNO0FBQ3RCQyxJQUFBQSxFQUFFLENBQUMsaUNBQUQsRUFBb0MsTUFBTTtBQUMxQ0MsTUFBQUEsTUFBTSxDQUNKLGdCQUNFLENBQ0Usa0RBREYsRUFFRSxrREFGRixFQUdFLGtEQUhGLEVBSUUsa0RBSkYsRUFLRSxrREFMRixFQU1FLGtEQU5GLEVBT0Usa0RBUEYsRUFRRUMsSUFSRixDQVFPLElBUlAsQ0FERixFQVVFLENBVkYsRUFXRSxDQVhGLENBREksQ0FBTixDQWNFQyxPQWRGLENBY1UsRUFkVjtBQWVELEtBaEJDLENBQUY7QUFrQkFILElBQUFBLEVBQUUsQ0FBQyw4QkFBRCxFQUFpQyxNQUFNO0FBQ3ZDQyxNQUFBQSxNQUFNLENBQUMsZ0JBQU1KLEtBQU4sQ0FBRCxDQUFOLENBQXFCTSxPQUFyQixDQUE2QixJQUE3QjtBQUNELEtBRkMsQ0FBRjtBQUdELEdBdEJPLENBQVI7QUF1QkQsQ0E5Q08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnQxLCBwYXJ0MiB9IGZyb20gJy4vZGF5MDcuanMnO1xuaW1wb3J0IHJlYWRJbnB1dCBmcm9tICcuLi91dGlscy9yZWFkLWlucHV0JztcblxuY29uc3QgaW5wdXQgPSByZWFkSW5wdXQoaW1wb3J0Lm1ldGEudXJsKTtcblxuZGVzY3JpYmUoJ2RheTA3IDIwMTgnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdwYXJ0MScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHdvcmsgZm9yIHBhcnQgMSBleGFtcGxlcycsICgpID0+IHtcbiAgICAgIGV4cGVjdChcbiAgICAgICAgcGFydDEoXG4gICAgICAgICAgW1xuICAgICAgICAgICAgJ1N0ZXAgQyBtdXN0IGJlIGZpbmlzaGVkIGJlZm9yZSBzdGVwIEEgY2FuIGJlZ2luLicsXG4gICAgICAgICAgICAnU3RlcCBDIG11c3QgYmUgZmluaXNoZWQgYmVmb3JlIHN0ZXAgRiBjYW4gYmVnaW4uJyxcbiAgICAgICAgICAgICdTdGVwIEEgbXVzdCBiZSBmaW5pc2hlZCBiZWZvcmUgc3RlcCBCIGNhbiBiZWdpbi4nLFxuICAgICAgICAgICAgJ1N0ZXAgQSBtdXN0IGJlIGZpbmlzaGVkIGJlZm9yZSBzdGVwIEQgY2FuIGJlZ2luLicsXG4gICAgICAgICAgICAnU3RlcCBCIG11c3QgYmUgZmluaXNoZWQgYmVmb3JlIHN0ZXAgRSBjYW4gYmVnaW4uJyxcbiAgICAgICAgICAgICdTdGVwIEQgbXVzdCBiZSBmaW5pc2hlZCBiZWZvcmUgc3RlcCBFIGNhbiBiZWdpbi4nLFxuICAgICAgICAgICAgJ1N0ZXAgRiBtdXN0IGJlIGZpbmlzaGVkIGJlZm9yZSBzdGVwIEUgY2FuIGJlZ2luLicsXG4gICAgICAgICAgXS5qb2luKCdcXG4nKSxcbiAgICAgICAgKSxcbiAgICAgICkudG9FcXVhbCgnQ0FCREZFJyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHdvcmsgZm9yIHBhcnQgMSBpbnB1dCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChwYXJ0MShpbnB1dCkpLnRvRXF1YWwoJ0lKTEZVVkRBQ0VIR1JaUE5LUVdTQlRNWE9ZJyk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdwYXJ0MicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHdvcmsgZm9yIHBhcnQgMiBleGFtcGxlcycsICgpID0+IHtcbiAgICAgIGV4cGVjdChcbiAgICAgICAgcGFydDIoXG4gICAgICAgICAgW1xuICAgICAgICAgICAgJ1N0ZXAgQyBtdXN0IGJlIGZpbmlzaGVkIGJlZm9yZSBzdGVwIEEgY2FuIGJlZ2luLicsXG4gICAgICAgICAgICAnU3RlcCBDIG11c3QgYmUgZmluaXNoZWQgYmVmb3JlIHN0ZXAgRiBjYW4gYmVnaW4uJyxcbiAgICAgICAgICAgICdTdGVwIEEgbXVzdCBiZSBmaW5pc2hlZCBiZWZvcmUgc3RlcCBCIGNhbiBiZWdpbi4nLFxuICAgICAgICAgICAgJ1N0ZXAgQSBtdXN0IGJlIGZpbmlzaGVkIGJlZm9yZSBzdGVwIEQgY2FuIGJlZ2luLicsXG4gICAgICAgICAgICAnU3RlcCBCIG11c3QgYmUgZmluaXNoZWQgYmVmb3JlIHN0ZXAgRSBjYW4gYmVnaW4uJyxcbiAgICAgICAgICAgICdTdGVwIEQgbXVzdCBiZSBmaW5pc2hlZCBiZWZvcmUgc3RlcCBFIGNhbiBiZWdpbi4nLFxuICAgICAgICAgICAgJ1N0ZXAgRiBtdXN0IGJlIGZpbmlzaGVkIGJlZm9yZSBzdGVwIEUgY2FuIGJlZ2luLicsXG4gICAgICAgICAgXS5qb2luKCdcXG4nKSxcbiAgICAgICAgICAyLFxuICAgICAgICAgIDAsXG4gICAgICAgICksXG4gICAgICApLnRvRXF1YWwoMTUpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB3b3JrIGZvciBwYXJ0IDIgaW5wdXQnLCAoKSA9PiB7XG4gICAgICBleHBlY3QocGFydDIoaW5wdXQpKS50b0VxdWFsKDEwNzIpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19