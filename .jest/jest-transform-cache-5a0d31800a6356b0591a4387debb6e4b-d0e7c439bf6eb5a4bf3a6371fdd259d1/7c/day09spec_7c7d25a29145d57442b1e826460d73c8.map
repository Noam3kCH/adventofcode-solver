{"version":3,"sources":["day09.spec.js"],"names":["input","url","describe","it","expect","toEqual","length"],"mappings":";;AAAA;;AACA;;;;;;;AAEA,MAAMA,KAAK,GAAG,wBAAU,KAAYC,GAAtB,CAAd;AAEAC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BA,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CAAC,gBAAM,QAAN,CAAD,CAAN,CAAwBC,OAAxB,CAAgC,SAASC,MAAzC;AACAF,MAAAA,MAAM,CAAC,gBAAM,UAAN,CAAD,CAAN,CAA0BC,OAA1B,CAAkC,UAAUC,MAA5C;AACAF,MAAAA,MAAM,CAAC,gBAAM,UAAN,CAAD,CAAN,CAA0BC,OAA1B,CAAkC,YAAYC,MAA9C;AACAF,MAAAA,MAAM,CAAC,gBAAM,aAAN,CAAD,CAAN,CAA6BC,OAA7B,CAAqC,SAASC,MAA9C;AACAF,MAAAA,MAAM,CAAC,gBAAM,iBAAN,CAAD,CAAN,CAAiCC,OAAjC,CAAyC,qBAAqBC,MAA9D;AACD,KANC,CAAF;AAQAH,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBK,OAArB,CAA6B,KAA7B;AACD,KAFC,CAAF;AAGD,GAZO,CAAR;AAcAH,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CAAC,gBAAM,UAAN,CAAD,CAAN,CAA0BC,OAA1B,CAAkC,YAAYC,MAA9C;AACAF,MAAAA,MAAM,CAAC,gBAAM,iBAAN,CAAD,CAAN,CAAiCC,OAAjC,CAAyC,uBAAuBC,MAAhE;AACAF,MAAAA,MAAM,CAAC,gBAAM,oCAAN,CAAD,CAAN,CAAoDC,OAApD,CAA4D,MAA5D;AACAD,MAAAA,MAAM,CACJ,gBAAM,0DAAN,CADI,CAAN,CAEEC,OAFF,CAEU,GAFV;AAGD,KAPC,CAAF;AASAF,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBK,OAArB,CAA6B,WAA7B;AACD,KAFC,CAAF;AAGD,GAbO,CAAR;AAcD,CA7BO,CAAR","sourcesContent":["import { part1, part2 } from './day09.js';\nimport readInput from '../utils/read-input';\n\nconst input = readInput(import.meta.url);\n\ndescribe('day09 2016', () => {\n  describe('part1', () => {\n    it('should work for part 1 examples', () => {\n      expect(part1('ADVENT')).toEqual('ADVENT'.length);\n      expect(part1('A(1x5)BC')).toEqual('ABBBBBC'.length);\n      expect(part1('(3x3)XYZ')).toEqual('XYZXYZXYZ'.length);\n      expect(part1('(6x1)(1x3)A')).toEqual('(1x3)A'.length);\n      expect(part1('X(8x2)(3x3)ABCY')).toEqual('X(3x3)ABC(3x3)ABCY'.length);\n    });\n\n    it('should work for part 1 input', () => {\n      expect(part1(input)).toEqual(74532);\n    });\n  });\n\n  describe('part2', () => {\n    it('should work for part 2 examples', () => {\n      expect(part2('(3x3)XYZ')).toEqual('XYZXYZXYZ'.length);\n      expect(part2('X(8x2)(3x3)ABCY')).toEqual('XABCABCABCABCABCABCY'.length);\n      expect(part2('(27x12)(20x12)(13x14)(7x10)(1x12)A')).toEqual(241920);\n      expect(\n        part2('(25x3)(3x3)ABC(2x3)XY(5x2)PQRSTX(18x9)(3x2)TWO(5x7)SEVEN'),\n      ).toEqual(445);\n    });\n\n    it('should work for part 2 input', () => {\n      expect(part2(input)).toEqual(11558231665);\n    });\n  });\n});\n"]}