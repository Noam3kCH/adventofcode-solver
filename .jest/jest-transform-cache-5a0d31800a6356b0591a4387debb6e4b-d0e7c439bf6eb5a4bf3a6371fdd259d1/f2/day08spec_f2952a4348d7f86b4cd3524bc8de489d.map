{"version":3,"sources":["day08.spec.js"],"names":["input","url","describe","it","expect","toEqual"],"mappings":";;AAAA;;AACA;;;;;;;AAEA,MAAMA,KAAK,GAAG,wBAAU,KAAYC,GAAtB,CAAd;AAEAC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BA,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CAAC,gBAAM,IAAN,CAAD,CAAN,CAAoBC,OAApB,CAA4B,IAAI,CAAhC;AACAD,MAAAA,MAAM,CAAC,gBAAM,OAAN,CAAD,CAAN,CAAuBC,OAAvB,CAA+B,IAAI,CAAnC;AACAD,MAAAA,MAAM,CAAC,gBAAM,aAAN,CAAD,CAAN,CAA6BC,OAA7B,CAAqC,KAAK,CAA1C;AACAD,MAAAA,MAAM,CAAC,gBAAM,SAAN,CAAD,CAAN,CAAyBC,OAAzB,CAAiC,IAAI,CAArC;AACD,KALC,CAAF;AAOAF,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBK,OAArB,CAA6B,IAA7B;AACD,KAFC,CAAF;AAGD,GAXO,CAAR;AAaAH,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CAAC,gBAAM,IAAN,CAAD,CAAN,CAAoBC,OAApB,CAA4B,IAAI,CAAhC;AACAD,MAAAA,MAAM,CAAC,gBAAM,OAAN,CAAD,CAAN,CAAuBC,OAAvB,CAA+B,IAAI,CAAnC;AACAD,MAAAA,MAAM,CAAC,gBAAM,aAAN,CAAD,CAAN,CAA6BC,OAA7B,CAAqC,KAAK,EAA1C;AACAD,MAAAA,MAAM,CAAC,gBAAM,SAAN,CAAD,CAAN,CAAyBC,OAAzB,CAAiC,KAAK,CAAtC;AACD,KALC,CAAF;AAOAF,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBK,OAArB,CAA6B,IAA7B;AACD,KAFC,CAAF;AAGD,GAXO,CAAR;AAYD,CA1BO,CAAR","sourcesContent":["import { part1, part2 } from './day08.js';\nimport readInput from '../utils/read-input';\n\nconst input = readInput(import.meta.url);\n\ndescribe('day08 2015', () => {\n  describe('part1', () => {\n    it('should work for part 1 examples', () => {\n      expect(part1('\"\"')).toEqual(2 - 0);\n      expect(part1('\"abc\"')).toEqual(5 - 3);\n      expect(part1('\"aaa\\\\\"aaa\"')).toEqual(10 - 7);\n      expect(part1('\"\\\\x27\"')).toEqual(6 - 1);\n    });\n\n    it('should work for part 1 input', () => {\n      expect(part1(input)).toEqual(1350);\n    });\n  });\n\n  describe('part2', () => {\n    it('should work for part 2 examples', () => {\n      expect(part2('\"\"')).toEqual(6 - 2);\n      expect(part2('\"abc\"')).toEqual(9 - 5);\n      expect(part2('\"aaa\\\\\"aaa\"')).toEqual(16 - 10);\n      expect(part2('\"\\\\x27\"')).toEqual(11 - 6);\n    });\n\n    it('should work for part 2 input', () => {\n      expect(part2(input)).toEqual(2085);\n    });\n  });\n});\n"]}