{"version":3,"sources":["day16.js"],"names":["expect1","id","children","cats","samoyeds","pomeranians","akitas","vizslas","goldfish","trees","cars","perfumes","expect2","x","parseMap","s","p1","p2","split","map","reduce","obj","pair","parseInt","matches","expect","Object","keys","every","key","parse","input","match","part1","filter","shift","part2"],"mappings":"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","sourcesContent":["const expect1 = {\n  id: () => true,\n  children: 3,\n  cats: 7,\n  samoyeds: 2,\n  pomeranians: 3,\n  akitas: 0,\n  vizslas: 0,\n  goldfish: 5,\n  trees: 3,\n  cars: 2,\n  perfumes: 1,\n};\n\nconst expect2 = {\n  ...expect1,\n  cats: x => x > expect1.cats,\n  trees: x => x > expect1.trees,\n  pomeranians: x => x < expect1.pomeranians,\n  goldfish: x => x < expect1.goldfish,\n};\n\nfunction parseMap(s, p1, p2) {\n  return s\n    .split(p1)\n    .map(x => x.split(p2))\n    .reduce((obj, pair) => ({ ...obj, [pair[0]]: parseInt(pair[1]) }), {});\n}\n\nfunction matches(x, expect) {\n  return Object.keys(x).every(key => {\n    return typeof expect[key] === 'function'\n      ? expect[key](x[key])\n      : expect[key] === x[key];\n  });\n}\n\nfunction parse(input) {\n  return input\n    .split('\\n')\n    .map(x => x.match(/^Sue ([^:]*): (.*)/))\n    .map(x => [x[1], parseMap(x[2], ', ', ': ')])\n    .map(x => ({ id: parseInt(x[0]), ...x[1] }));\n}\n\nexport const part1 = input =>\n  parse(input)\n    .filter(x => matches(x, expect1))\n    .map(x => x.id)\n    .shift();\nexport const part2 = input =>\n  parse(input)\n    .filter(x => matches(x, expect2))\n    .map(x => x.id)\n    .shift();\n"]}