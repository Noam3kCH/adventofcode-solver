8c754b6e85e01d3b137171a9a3c0d929
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part2 = exports.part1 = void 0;
const expect1 = {
  id: () => true,
  children: 3,
  cats: 7,
  samoyeds: 2,
  pomeranians: 3,
  akitas: 0,
  vizslas: 0,
  goldfish: 5,
  trees: 3,
  cars: 2,
  perfumes: 1
};
const expect2 = { ...expect1,
  cats: x => x > expect1.cats,
  trees: x => x > expect1.trees,
  pomeranians: x => x < expect1.pomeranians,
  goldfish: x => x < expect1.goldfish
};

function parseMap(s, p1, p2) {
  return s.split(p1).map(x => x.split(p2)).reduce((obj, pair) => ({ ...obj,
    [pair[0]]: parseInt(pair[1])
  }), {});
}

function matches(x, expect) {
  return Object.keys(x).every(key => {
    return typeof expect[key] === 'function' ? expect[key](x[key]) : expect[key] === x[key];
  });
}

function parse(input) {
  return input.split('\n').map(x => x.match(/^Sue ([^:]*): (.*)/)).map(x => [x[1], parseMap(x[2], ', ', ': ')]).map(x => ({
    id: parseInt(x[0]),
    ...x[1]
  }));
}

const part1 = input => parse(input).filter(x => matches(x, expect1)).map(x => x.id).shift();

exports.part1 = part1;

const part2 = input => parse(input).filter(x => matches(x, expect2)).map(x => x.id).shift();

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE2LmpzIl0sIm5hbWVzIjpbImV4cGVjdDEiLCJpZCIsImNoaWxkcmVuIiwiY2F0cyIsInNhbW95ZWRzIiwicG9tZXJhbmlhbnMiLCJha2l0YXMiLCJ2aXpzbGFzIiwiZ29sZGZpc2giLCJ0cmVlcyIsImNhcnMiLCJwZXJmdW1lcyIsImV4cGVjdDIiLCJ4IiwicGFyc2VNYXAiLCJzIiwicDEiLCJwMiIsInNwbGl0IiwibWFwIiwicmVkdWNlIiwib2JqIiwicGFpciIsInBhcnNlSW50IiwibWF0Y2hlcyIsImV4cGVjdCIsIk9iamVjdCIsImtleXMiLCJldmVyeSIsImtleSIsInBhcnNlIiwiaW5wdXQiLCJtYXRjaCIsInBhcnQxIiwiZmlsdGVyIiwic2hpZnQiLCJwYXJ0MiJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsTUFBTUEsT0FBTyxHQUFHO0FBQ2RDLEVBQUFBLEVBQUUsRUFBRSxNQUFNLElBREk7QUFFZEMsRUFBQUEsUUFBUSxFQUFFLENBRkk7QUFHZEMsRUFBQUEsSUFBSSxFQUFFLENBSFE7QUFJZEMsRUFBQUEsUUFBUSxFQUFFLENBSkk7QUFLZEMsRUFBQUEsV0FBVyxFQUFFLENBTEM7QUFNZEMsRUFBQUEsTUFBTSxFQUFFLENBTk07QUFPZEMsRUFBQUEsT0FBTyxFQUFFLENBUEs7QUFRZEMsRUFBQUEsUUFBUSxFQUFFLENBUkk7QUFTZEMsRUFBQUEsS0FBSyxFQUFFLENBVE87QUFVZEMsRUFBQUEsSUFBSSxFQUFFLENBVlE7QUFXZEMsRUFBQUEsUUFBUSxFQUFFO0FBWEksQ0FBaEI7QUFjQSxNQUFNQyxPQUFPLEdBQUcsRUFDZCxHQUFHWixPQURXO0FBRWRHLEVBQUFBLElBQUksRUFBRVUsQ0FBQyxJQUFJQSxDQUFDLEdBQUdiLE9BQU8sQ0FBQ0csSUFGVDtBQUdkTSxFQUFBQSxLQUFLLEVBQUVJLENBQUMsSUFBSUEsQ0FBQyxHQUFHYixPQUFPLENBQUNTLEtBSFY7QUFJZEosRUFBQUEsV0FBVyxFQUFFUSxDQUFDLElBQUlBLENBQUMsR0FBR2IsT0FBTyxDQUFDSyxXQUpoQjtBQUtkRyxFQUFBQSxRQUFRLEVBQUVLLENBQUMsSUFBSUEsQ0FBQyxHQUFHYixPQUFPLENBQUNRO0FBTGIsQ0FBaEI7O0FBUUEsU0FBU00sUUFBVCxDQUFrQkMsQ0FBbEIsRUFBcUJDLEVBQXJCLEVBQXlCQyxFQUF6QixFQUE2QjtBQUMzQixTQUFPRixDQUFDLENBQ0xHLEtBREksQ0FDRUYsRUFERixFQUVKRyxHQUZJLENBRUFOLENBQUMsSUFBSUEsQ0FBQyxDQUFDSyxLQUFGLENBQVFELEVBQVIsQ0FGTCxFQUdKRyxNQUhJLENBR0csQ0FBQ0MsR0FBRCxFQUFNQyxJQUFOLE1BQWdCLEVBQUUsR0FBR0QsR0FBTDtBQUFVLEtBQUNDLElBQUksQ0FBQyxDQUFELENBQUwsR0FBV0MsUUFBUSxDQUFDRCxJQUFJLENBQUMsQ0FBRCxDQUFMO0FBQTdCLEdBQWhCLENBSEgsRUFHOEQsRUFIOUQsQ0FBUDtBQUlEOztBQUVELFNBQVNFLE9BQVQsQ0FBaUJYLENBQWpCLEVBQW9CWSxNQUFwQixFQUE0QjtBQUMxQixTQUFPQyxNQUFNLENBQUNDLElBQVAsQ0FBWWQsQ0FBWixFQUFlZSxLQUFmLENBQXFCQyxHQUFHLElBQUk7QUFDakMsV0FBTyxPQUFPSixNQUFNLENBQUNJLEdBQUQsQ0FBYixLQUF1QixVQUF2QixHQUNISixNQUFNLENBQUNJLEdBQUQsQ0FBTixDQUFZaEIsQ0FBQyxDQUFDZ0IsR0FBRCxDQUFiLENBREcsR0FFSEosTUFBTSxDQUFDSSxHQUFELENBQU4sS0FBZ0JoQixDQUFDLENBQUNnQixHQUFELENBRnJCO0FBR0QsR0FKTSxDQUFQO0FBS0Q7O0FBRUQsU0FBU0MsS0FBVCxDQUFlQyxLQUFmLEVBQXNCO0FBQ3BCLFNBQU9BLEtBQUssQ0FDVGIsS0FESSxDQUNFLElBREYsRUFFSkMsR0FGSSxDQUVBTixDQUFDLElBQUlBLENBQUMsQ0FBQ21CLEtBQUYsQ0FBUSxvQkFBUixDQUZMLEVBR0piLEdBSEksQ0FHQU4sQ0FBQyxJQUFJLENBQUNBLENBQUMsQ0FBQyxDQUFELENBQUYsRUFBT0MsUUFBUSxDQUFDRCxDQUFDLENBQUMsQ0FBRCxDQUFGLEVBQU8sSUFBUCxFQUFhLElBQWIsQ0FBZixDQUhMLEVBSUpNLEdBSkksQ0FJQU4sQ0FBQyxLQUFLO0FBQUVaLElBQUFBLEVBQUUsRUFBRXNCLFFBQVEsQ0FBQ1YsQ0FBQyxDQUFDLENBQUQsQ0FBRixDQUFkO0FBQXNCLE9BQUdBLENBQUMsQ0FBQyxDQUFEO0FBQTFCLEdBQUwsQ0FKRCxDQUFQO0FBS0Q7O0FBRU0sTUFBTW9CLEtBQUssR0FBR0YsS0FBSyxJQUN4QkQsS0FBSyxDQUFDQyxLQUFELENBQUwsQ0FDR0csTUFESCxDQUNVckIsQ0FBQyxJQUFJVyxPQUFPLENBQUNYLENBQUQsRUFBSWIsT0FBSixDQUR0QixFQUVHbUIsR0FGSCxDQUVPTixDQUFDLElBQUlBLENBQUMsQ0FBQ1osRUFGZCxFQUdHa0MsS0FISCxFQURLOzs7O0FBS0EsTUFBTUMsS0FBSyxHQUFHTCxLQUFLLElBQ3hCRCxLQUFLLENBQUNDLEtBQUQsQ0FBTCxDQUNHRyxNQURILENBQ1VyQixDQUFDLElBQUlXLE9BQU8sQ0FBQ1gsQ0FBRCxFQUFJRCxPQUFKLENBRHRCLEVBRUdPLEdBRkgsQ0FFT04sQ0FBQyxJQUFJQSxDQUFDLENBQUNaLEVBRmQsRUFHR2tDLEtBSEgsRUFESyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGV4cGVjdDEgPSB7XG4gIGlkOiAoKSA9PiB0cnVlLFxuICBjaGlsZHJlbjogMyxcbiAgY2F0czogNyxcbiAgc2Ftb3llZHM6IDIsXG4gIHBvbWVyYW5pYW5zOiAzLFxuICBha2l0YXM6IDAsXG4gIHZpenNsYXM6IDAsXG4gIGdvbGRmaXNoOiA1LFxuICB0cmVlczogMyxcbiAgY2FyczogMixcbiAgcGVyZnVtZXM6IDEsXG59O1xuXG5jb25zdCBleHBlY3QyID0ge1xuICAuLi5leHBlY3QxLFxuICBjYXRzOiB4ID0+IHggPiBleHBlY3QxLmNhdHMsXG4gIHRyZWVzOiB4ID0+IHggPiBleHBlY3QxLnRyZWVzLFxuICBwb21lcmFuaWFuczogeCA9PiB4IDwgZXhwZWN0MS5wb21lcmFuaWFucyxcbiAgZ29sZGZpc2g6IHggPT4geCA8IGV4cGVjdDEuZ29sZGZpc2gsXG59O1xuXG5mdW5jdGlvbiBwYXJzZU1hcChzLCBwMSwgcDIpIHtcbiAgcmV0dXJuIHNcbiAgICAuc3BsaXQocDEpXG4gICAgLm1hcCh4ID0+IHguc3BsaXQocDIpKVxuICAgIC5yZWR1Y2UoKG9iaiwgcGFpcikgPT4gKHsgLi4ub2JqLCBbcGFpclswXV06IHBhcnNlSW50KHBhaXJbMV0pIH0pLCB7fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXMoeCwgZXhwZWN0KSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyh4KS5ldmVyeShrZXkgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgZXhwZWN0W2tleV0gPT09ICdmdW5jdGlvbidcbiAgICAgID8gZXhwZWN0W2tleV0oeFtrZXldKVxuICAgICAgOiBleHBlY3Rba2V5XSA9PT0geFtrZXldO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0XG4gICAgLnNwbGl0KCdcXG4nKVxuICAgIC5tYXAoeCA9PiB4Lm1hdGNoKC9eU3VlIChbXjpdKik6ICguKikvKSlcbiAgICAubWFwKHggPT4gW3hbMV0sIHBhcnNlTWFwKHhbMl0sICcsICcsICc6ICcpXSlcbiAgICAubWFwKHggPT4gKHsgaWQ6IHBhcnNlSW50KHhbMF0pLCAuLi54WzFdIH0pKTtcbn1cblxuZXhwb3J0IGNvbnN0IHBhcnQxID0gaW5wdXQgPT5cbiAgcGFyc2UoaW5wdXQpXG4gICAgLmZpbHRlcih4ID0+IG1hdGNoZXMoeCwgZXhwZWN0MSkpXG4gICAgLm1hcCh4ID0+IHguaWQpXG4gICAgLnNoaWZ0KCk7XG5leHBvcnQgY29uc3QgcGFydDIgPSBpbnB1dCA9PlxuICBwYXJzZShpbnB1dClcbiAgICAuZmlsdGVyKHggPT4gbWF0Y2hlcyh4LCBleHBlY3QyKSlcbiAgICAubWFwKHggPT4geC5pZClcbiAgICAuc2hpZnQoKTtcbiJdfQ==