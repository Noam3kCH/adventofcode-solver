{"version":3,"sources":["day11.js"],"names":["powerLevel","x","y","serial","rackId","mul","Math","floor","calc","size","state","results","Map","sum","get","i","set","point","values","Array","from","concat","max","sort","a","b","pop","part1","input","parseInt","Infinity","replace","part2"],"mappings":"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","sourcesContent":["function powerLevel({ x, y }, serial) {\n  const rackId = x + 10;\n  const mul = (rackId * y + serial) * rackId;\n  return Math.floor((mul % 1000) / 100) - 5;\n}\n\nfunction calc(serial, size, state) {\n  const results = new Map();\n  for (let x = 0; x < 300 - (size - 1); x++) {\n    for (let y = 0; y < 300 - (size - 1); y++) {\n      let { sum } = state.results.get(`${x},${y},${size - 1}`) || { sum: 0 };\n      for (let i = 0; i < size; i++) {\n        sum += powerLevel({ x: x + i, y: y + size - 1 }, serial);\n        sum += powerLevel({ x: x + size - 1, y: y + i }, serial);\n      }\n      sum -= powerLevel({ x: x + size - 1, y: y + size - 1 }, serial);\n      results.set(`${x},${y},${size}`, { point: `${x},${y},${size}`, sum });\n    }\n  }\n  const values = Array.from(results.values()).concat(state.max);\n  return {\n    results,\n    max: values.sort((a, b) => a.sum - b.sum).pop(),\n  };\n}\n\nexport function part1(input) {\n  const serial = parseInt(input);\n  let state = { results: new Map(), max: { sum: -Infinity } };\n  state = calc(serial, 1, { ...state, max: { sum: -Infinity } });\n  state = calc(serial, 2, { ...state, max: { sum: -Infinity } });\n  state = calc(serial, 3, { ...state, max: { sum: -Infinity } });\n  return state.max.point.replace(/,3$/, '');\n}\n\nexport function part2(input) {\n  const serial = parseInt(input);\n  let state = { results: new Map(), max: { sum: -Infinity } };\n  for (let i = 1; i <= 300; i++) {\n    state = calc(serial, i, state);\n  }\n  return state.max.point;\n}\n"]}