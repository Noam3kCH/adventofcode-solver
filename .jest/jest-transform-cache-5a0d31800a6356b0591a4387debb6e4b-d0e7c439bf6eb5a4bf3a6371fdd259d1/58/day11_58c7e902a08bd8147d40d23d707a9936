dbd49f29de4d75e702107b55058a9205
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function powerLevel({
  x,
  y
}, serial) {
  const rackId = x + 10;
  const mul = (rackId * y + serial) * rackId;
  return Math.floor(mul % 1000 / 100) - 5;
}

function calc(serial, size, state) {
  const results = new Map();

  for (let x = 0; x < 300 - (size - 1); x++) {
    for (let y = 0; y < 300 - (size - 1); y++) {
      let {
        sum
      } = state.results.get(`${x},${y},${size - 1}`) || {
        sum: 0
      };

      for (let i = 0; i < size; i++) {
        sum += powerLevel({
          x: x + i,
          y: y + size - 1
        }, serial);
        sum += powerLevel({
          x: x + size - 1,
          y: y + i
        }, serial);
      }

      sum -= powerLevel({
        x: x + size - 1,
        y: y + size - 1
      }, serial);
      results.set(`${x},${y},${size}`, {
        point: `${x},${y},${size}`,
        sum
      });
    }
  }

  const values = Array.from(results.values()).concat(state.max);
  return {
    results,
    max: values.sort((a, b) => a.sum - b.sum).pop()
  };
}

function part1(input) {
  const serial = parseInt(input);
  let state = {
    results: new Map(),
    max: {
      sum: -Infinity
    }
  };
  state = calc(serial, 1, { ...state,
    max: {
      sum: -Infinity
    }
  });
  state = calc(serial, 2, { ...state,
    max: {
      sum: -Infinity
    }
  });
  state = calc(serial, 3, { ...state,
    max: {
      sum: -Infinity
    }
  });
  return state.max.point.replace(/,3$/, '');
}

function part2(input) {
  const serial = parseInt(input);
  let state = {
    results: new Map(),
    max: {
      sum: -Infinity
    }
  };

  for (let i = 1; i <= 300; i++) {
    state = calc(serial, i, state);
  }

  return state.max.point;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTExLmpzIl0sIm5hbWVzIjpbInBvd2VyTGV2ZWwiLCJ4IiwieSIsInNlcmlhbCIsInJhY2tJZCIsIm11bCIsIk1hdGgiLCJmbG9vciIsImNhbGMiLCJzaXplIiwic3RhdGUiLCJyZXN1bHRzIiwiTWFwIiwic3VtIiwiZ2V0IiwiaSIsInNldCIsInBvaW50IiwidmFsdWVzIiwiQXJyYXkiLCJmcm9tIiwiY29uY2F0IiwibWF4Iiwic29ydCIsImEiLCJiIiwicG9wIiwicGFydDEiLCJpbnB1dCIsInBhcnNlSW50IiwiSW5maW5pdHkiLCJyZXBsYWNlIiwicGFydDIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsU0FBU0EsVUFBVCxDQUFvQjtBQUFFQyxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsQ0FBcEIsRUFBOEJDLE1BQTlCLEVBQXNDO0FBQ3BDLFFBQU1DLE1BQU0sR0FBR0gsQ0FBQyxHQUFHLEVBQW5CO0FBQ0EsUUFBTUksR0FBRyxHQUFHLENBQUNELE1BQU0sR0FBR0YsQ0FBVCxHQUFhQyxNQUFkLElBQXdCQyxNQUFwQztBQUNBLFNBQU9FLElBQUksQ0FBQ0MsS0FBTCxDQUFZRixHQUFHLEdBQUcsSUFBUCxHQUFlLEdBQTFCLElBQWlDLENBQXhDO0FBQ0Q7O0FBRUQsU0FBU0csSUFBVCxDQUFjTCxNQUFkLEVBQXNCTSxJQUF0QixFQUE0QkMsS0FBNUIsRUFBbUM7QUFDakMsUUFBTUMsT0FBTyxHQUFHLElBQUlDLEdBQUosRUFBaEI7O0FBQ0EsT0FBSyxJQUFJWCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLE9BQU9RLElBQUksR0FBRyxDQUFkLENBQXBCLEVBQXNDUixDQUFDLEVBQXZDLEVBQTJDO0FBQ3pDLFNBQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBRyxPQUFPTyxJQUFJLEdBQUcsQ0FBZCxDQUFwQixFQUFzQ1AsQ0FBQyxFQUF2QyxFQUEyQztBQUN6QyxVQUFJO0FBQUVXLFFBQUFBO0FBQUYs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QUFoQixDQUF3QixLQUF4QixFQUErQixFQUEvQixDQUFQO0FBQ0Q7O0FBRU0sU0FBU0MsS0FBVCxDQUFlSixLQUFmLEVBQXNCO0FBQzNCLFFBQU16QixNQUFNLEdBQUcwQixRQUFRLENBQUNELEtBQUQsQ0FBdkI7QUFDQSxNQUFJbEIsS0FBSyxHQUFHO0FBQUVDLElBQUFBLE9BQU8sRUFBRSxJQUFJQyxHQUFKLEVBQVg7QUFBc0JVLElBQUFBLEdBQUcsRUFBRTtBQUFFVCxNQUFBQSxHQUFHLEVBQUUsQ0FBQ2lCO0FBQVI7QUFBM0IsR0FBWjs7QUFDQSxPQUFLLElBQUlmLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLElBQUksR0FBckIsRUFBMEJBLENBQUMsRUFBM0IsRUFBK0I7QUFDN0JMLElBQUFBLEtBQUssR0FBR0YsSUFBSSxDQUFDTCxNQUFELEVBQVNZLENBQVQsRUFBWUwsS0FBWixDQUFaO0FBQ0Q7O0FBQ0QsU0FBT0EsS0FBSyxDQUFDWSxHQUFOLENBQVVMLEtBQWpCO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBwb3dlckxldmVsKHsgeCwgeSB9LCBzZXJpYWwpIHtcbiAgY29uc3QgcmFja0lkID0geCArIDEwO1xuICBjb25zdCBtdWwgPSAocmFja0lkICogeSArIHNlcmlhbCkgKiByYWNrSWQ7XG4gIHJldHVybiBNYXRoLmZsb29yKChtdWwgJSAxMDAwKSAvIDEwMCkgLSA1O1xufVxuXG5mdW5jdGlvbiBjYWxjKHNlcmlhbCwgc2l6ZSwgc3RhdGUpIHtcbiAgY29uc3QgcmVzdWx0cyA9IG5ldyBNYXAoKTtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCAzMDAgLSAoc2l6ZSAtIDEpOyB4KyspIHtcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IDMwMCAtIChzaXplIC0gMSk7IHkrKykge1xuICAgICAgbGV0IHsgc3VtIH0gPSBzdGF0ZS5yZXN1bHRzLmdldChgJHt4fSwke3l9LCR7c2l6ZSAtIDF9YCkgfHwgeyBzdW06IDAgfTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgIHN1bSArPSBwb3dlckxldmVsKHsgeDogeCArIGksIHk6IHkgKyBzaXplIC0gMSB9LCBzZXJpYWwpO1xuICAgICAgICBzdW0gKz0gcG93ZXJMZXZlbCh7IHg6IHggKyBzaXplIC0gMSwgeTogeSArIGkgfSwgc2VyaWFsKTtcbiAgICAgIH1cbiAgICAgIHN1bSAtPSBwb3dlckxldmVsKHsgeDogeCArIHNpemUgLSAxLCB5OiB5ICsgc2l6ZSAtIDEgfSwgc2VyaWFsKTtcbiAgICAgIHJlc3VsdHMuc2V0KGAke3h9LCR7eX0sJHtzaXplfWAsIHsgcG9pbnQ6IGAke3h9LCR7eX0sJHtzaXplfWAsIHN1bSB9KTtcbiAgICB9XG4gIH1cbiAgY29uc3QgdmFsdWVzID0gQXJyYXkuZnJvbShyZXN1bHRzLnZhbHVlcygpKS5jb25jYXQoc3RhdGUubWF4KTtcbiAgcmV0dXJuIHtcbiAgICByZXN1bHRzLFxuICAgIG1heDogdmFsdWVzLnNvcnQoKGEsIGIpID0+IGEuc3VtIC0gYi5zdW0pLnBvcCgpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDEoaW5wdXQpIHtcbiAgY29uc3Qgc2VyaWFsID0gcGFyc2VJbnQoaW5wdXQpO1xuICBsZXQgc3RhdGUgPSB7IHJlc3VsdHM6IG5ldyBNYXAoKSwgbWF4OiB7IHN1bTogLUluZmluaXR5IH0gfTtcbiAgc3RhdGUgPSBjYWxjKHNlcmlhbCwgMSwgeyAuLi5zdGF0ZSwgbWF4OiB7IHN1bTogLUluZmluaXR5IH0gfSk7XG4gIHN0YXRlID0gY2FsYyhzZXJpYWwsIDIsIHsgLi4uc3RhdGUsIG1heDogeyBzdW06IC1JbmZpbml0eSB9IH0pO1xuICBzdGF0ZSA9IGNhbGMoc2VyaWFsLCAzLCB7IC4uLnN0YXRlLCBtYXg6IHsgc3VtOiAtSW5maW5pdHkgfSB9KTtcbiAgcmV0dXJuIHN0YXRlLm1heC5wb2ludC5yZXBsYWNlKC8sMyQvLCAnJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MihpbnB1dCkge1xuICBjb25zdCBzZXJpYWwgPSBwYXJzZUludChpbnB1dCk7XG4gIGxldCBzdGF0ZSA9IHsgcmVzdWx0czogbmV3IE1hcCgpLCBtYXg6IHsgc3VtOiAtSW5maW5pdHkgfSB9O1xuICBmb3IgKGxldCBpID0gMTsgaSA8PSAzMDA7IGkrKykge1xuICAgIHN0YXRlID0gY2FsYyhzZXJpYWwsIGksIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gc3RhdGUubWF4LnBvaW50O1xufVxuIl19