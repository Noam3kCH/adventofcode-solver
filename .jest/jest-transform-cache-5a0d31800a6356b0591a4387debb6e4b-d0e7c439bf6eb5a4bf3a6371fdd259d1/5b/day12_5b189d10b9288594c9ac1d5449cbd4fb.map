{"version":3,"sources":["day12.js"],"names":["parse","input","split","reduce","obj","line","key","neighbors","count","graph","visited","Set","add","filter","x","has","forEach","countGroups","groups","Object","keys","part1","size","part2"],"mappings":";;;;;;;AAAA,SAASA,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOA,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBC,MAAlB,CAAyB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAC7C,UAAM,CAACC,GAAD,EAAMC,SAAN,IAAmBF,IAAI,CAACH,KAAL,CAAW,OAAX,CAAzB;AACA,WAAO,EAAE,GAAGE,GAAL;AAAU,OAACE,GAAD,GAAOC,SAAS,CAACL,KAAV,CAAgB,IAAhB;AAAjB,KAAP;AACD,GAHM,EAGJ,EAHI,CAAP;AAID;;AAED,SAASM,KAAT,CAAeC,KAAf,EAAsBH,GAAtB,EAA2BI,OAAO,GAAG,IAAIC,GAAJ,EAArC,EAAgD;AAC9CD,EAAAA,OAAO,CAACE,GAAR,CAAYN,GAAZ;AACAG,EAAAA,KAAK,CAACH,GAAD,CAAL,CACGO,MADH,CACUC,CAAC,IAAI,CAACJ,OAAO,CAACK,GAAR,CAAYD,CAAZ,CADhB,EAEGE,OAFH,CAEWF,CAAC,IAAIN,KAAK,CAACC,KAAD,EAAQK,CAAR,EAAWJ,OAAX,CAFrB;AAGA,SAAOA,OAAP;AACD;;AAED,SAASO,WAAT,CAAqBR,KAArB,EAA4B;AAC1B,MAAIS,MAAM,GAAG,CAAb;AACA,QAAMR,OAAO,GAAG,IAAIC,GAAJ,EAAhB;AACAQ,EAAAA,MAAM,CAACC,IAAP,CAAYX,KAAZ,EAAmBO,OAAnB,CAA2BF,CAAC,IAAI;AAC9B,QAAI,CAACJ,OAAO,CAACK,GAAR,CAAYD,CAAZ,CAAL,EAAqB;AACnBI,MAAAA,MAAM;AACNV,MAAAA,KAAK,CAACC,KAAD,EAAQK,CAAR,EAAWJ,OAAX,CAAL;AACD;AACF,GALD;AAMA,SAAOQ,MAAP;AACD;;AAEM,MAAMG,KAAK,GAAGpB,KAAK,IAAIO,KAAK,CAACR,KAAK,CAACC,KAAD,CAAN,EAAe,GAAf,CAAL,CAAyBqB,IAAhD;;;;AACA,MAAMC,KAAK,GAAGtB,KAAK,IAAIgB,WAAW,CAACjB,KAAK,CAACC,KAAD,CAAN,CAAlC","sourcesContent":["function parse(input) {\n  return input.split('\\n').reduce((obj, line) => {\n    const [key, neighbors] = line.split(' <-> ');\n    return { ...obj, [key]: neighbors.split(', ') };\n  }, {});\n}\n\nfunction count(graph, key, visited = new Set()) {\n  visited.add(key);\n  graph[key]\n    .filter(x => !visited.has(x))\n    .forEach(x => count(graph, x, visited));\n  return visited;\n}\n\nfunction countGroups(graph) {\n  let groups = 0;\n  const visited = new Set();\n  Object.keys(graph).forEach(x => {\n    if (!visited.has(x)) {\n      groups++;\n      count(graph, x, visited);\n    }\n  });\n  return groups;\n}\n\nexport const part1 = input => count(parse(input), '0').size;\nexport const part2 = input => countGroups(parse(input));\n"]}