{"version":3,"sources":["day13.js"],"names":["parse","input","split","map","line","depth","range","x","parseInt","severity","scanners","t","reduce","total","scanner","Math","max","solve","i","part1","part2"],"mappings":";;;;;;;AAAA,SAASA,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOA,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBC,GAAlB,CAAsBC,IAAI,IAAI;AACnC,UAAM,CAACC,KAAD,EAAQC,KAAR,IAAiBF,IAAI,CAACF,KAAL,CAAW,IAAX,EAAiBC,GAAjB,CAAqBI,CAAC,IAAIC,QAAQ,CAACD,CAAD,CAAlC,CAAvB;AACA,WAAO;AAAEF,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAP;AACD,GAHM,CAAP;AAID;;AAED,SAASG,QAAT,CAAkBC,QAAlB,EAA4BC,CAAC,GAAG,CAAhC,EAAmC;AACjC,SAAOD,QAAQ,CAACE,MAAT,CAAgB,CAACC,KAAD,EAAQC,OAAR,KAAoB;AACzC,QAAI,CAACH,CAAC,GAAGG,OAAO,CAACT,KAAb,KAAuBS,OAAO,CAACR,KAAR,GAAgBQ,OAAO,CAACR,KAAxB,GAAgC,CAAvD,MAA8D,CAAlE,EAAqE;AACnE,aAAOS,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,KAAZ,IAAqBC,OAAO,CAACT,KAAR,GAAgBS,OAAO,CAACR,KAApD;AACD,KAFD,MAEO;AACL,aAAOO,KAAP;AACD;AACF,GANM,EAMJ,CAAC,CANG,CAAP;AAOD;;AAED,SAASI,KAAT,CAAeP,QAAf,EAAyB;AACvB,MAAIQ,CAAC,GAAG,CAAR;;AACA,SAAOT,QAAQ,CAACC,QAAD,EAAWQ,CAAX,CAAR,KAA0B,CAAC,CAAlC,EAAqC;AACnCA,IAAAA,CAAC;AACF;;AACD,SAAOA,CAAP;AACD;;AAEM,MAAMC,KAAK,GAAGlB,KAAK,IAAIQ,QAAQ,CAACT,KAAK,CAACC,KAAD,CAAN,CAA/B;;;;AACA,MAAMmB,KAAK,GAAGnB,KAAK,IAAIgB,KAAK,CAACjB,KAAK,CAACC,KAAD,CAAN,CAA5B","sourcesContent":["function parse(input) {\n  return input.split('\\n').map(line => {\n    const [depth, range] = line.split(': ').map(x => parseInt(x));\n    return { depth, range };\n  });\n}\n\nfunction severity(scanners, t = 0) {\n  return scanners.reduce((total, scanner) => {\n    if ((t + scanner.depth) % (scanner.range + scanner.range - 2) === 0) {\n      return Math.max(0, total) + scanner.depth * scanner.range;\n    } else {\n      return total;\n    }\n  }, -1);\n}\n\nfunction solve(scanners) {\n  let i = 0;\n  while (severity(scanners, i) !== -1) {\n    i++;\n  }\n  return i;\n}\n\nexport const part1 = input => severity(parse(input));\nexport const part2 = input => solve(parse(input));\n"]}