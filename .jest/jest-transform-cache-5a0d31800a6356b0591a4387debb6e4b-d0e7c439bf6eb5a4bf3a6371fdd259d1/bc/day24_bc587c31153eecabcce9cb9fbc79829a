1d858ca65c77911c3b23caae2f3351ef
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function parse(input) {
  return input.split('\n').map(x => x.split('/').map(n => parseInt(n)));
}

function toKey(item) {
  return [Array.from(item.visited).map(x => x.join('-')).sort().join(','), item.strength, item.port].join(':');
}

function getNext(components, current, cache) {
  const next = components.filter(x => {
    return (x[0] === current.port || x[1] === current.port) && !current.visited.has(x);
  });
  return next.map(x => {
    return {
      visited: new Set(current.visited).add(x),
      strength: current.strength + x[0] + x[1],
      port: x[0] === current.port ? x[1] : x[0]
    };
  }).filter(x => {
    const key = toKey(x);
    return !cache.has(key) && cache.add(key);
  });
}

function solve(components, compare) {
  const cache = new Set();
  let max = {
    visited: new Set(),
    strength: 0,
    port: 0
  };
  let queue = getNext(components, max, cache);

  while (queue.length > 0) {
    const current = queue.shift();
    max = compare(current, max) ? current : max;
    queue = queue.concat(getNext(components, current, cache));
  }

  return max.strength;
}

function part1(input) {
  const components = parse(input);
  return solve(components, (current, max) => current.strength > max.strength);
}

function part2(input) {
  const components = parse(input);
  return solve(components, (current, max) => {
    return current.visited.size > max.visited.size || current.visited.size === max.visited.size && current.strength > max.strength;
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTI0LmpzIl0sIm5hbWVzIjpbInBhcnNlIiwiaW5wdXQiLCJzcGxpdCIsIm1hcCIsIngiLCJuIiwicGFyc2VJbnQiLCJ0b0tleSIsIml0ZW0iLCJBcnJheSIsImZyb20iLCJ2aXNpdGVkIiwiam9pbiIsInNvcnQiLCJzdHJlbmd0aCIsInBvcnQiLCJnZXROZXh0IiwiY29tcG9uZW50cyIsImN1cnJlbnQiLCJjYWNoZSIsIm5leHQiLCJmaWx0ZXIiLCJoYXMiLCJTZXQiLCJhZGQiLCJrZXkiLCJzb2x2ZSIsImNvbXBhcmUiLCJtYXgiLCJxdWV1ZSIsImxlbmd0aCIsInNoaWZ0IiwiY29uY2F0IiwicGFydDEiLCJwYXJ0MiIsInNpemUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsU0FBU0EsS0FBVCxDQUFlQyxLQUFmLEVBQXNCO0FBQ3BCLFNBQU9BLEtBQUssQ0FBQ0MsS0FBTixDQUFZLElBQVosRUFBa0JDLEdBQWxCLENBQXNCQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0YsS0FBRixDQUFRLEdBQVIsRUFBYUMsR0FBYixDQUFpQkUsQ0FBQyxJQUFJQyxRQUFRLENBQUNELENBQUQsQ0FBOUIsQ0FBM0IsQ0FBUDtBQUNEOztBQUVELFNBQVNFLEtBQVQsQ0FBZUMsSUFBZixFQUFxQjtBQUNuQixTQUFPLENBQ0xDLEtBQUssQ0FBQ0MsSUFBTixDQUFXRixJQUFJLENBQUNHLE9BQWhCLEVBQ0dSLEdBREgsQ0FDT0MsQ0FBQyxJQUFJQSxDQUFDLENBQUNRLElBQUYsQ0FBTyxHQUFQLENBRFosRUFFR0MsSUFGSCxHQUdHRCxJQUhILENBR1EsR0FIUixDQURLLEVBS0xKLElBQUksQ0FBQ00sUUFMQSxFQU1MTixJQUFJLENBQUNPLElBTkEsRUFPTEgsSUFQSyxDQU9BLEdBUEEsQ0FBUDtBQVFEOztBQUVELFNBQVNJLE9BQVQsQ0FBaUJDLFVBQWpCLEVBQTZCQyxPQUE3QixFQUFzQ0MsS0FBdEMsRUFBNkM7QUFDM0MsUUFBTUMsSUFBSSxHQUFHSCxVQUFVLENBQUNJLE1BQVgsQ0FBa0JqQixDQUFDLElBQUk7QUFDbEMsV0FDRSxDQUFDQSxDQUFDLENBQUMsQ0FBRCxDQUFELEtBQVNjLE9BQU8sQ0FBQ0gsSUFBakIsSUFBeUJYLENBQUMsQ0FBQyxDQUFELENBQUQsS0FBU2MsT0FBTyxDQUFDSCxJQUEzQyxLQUNBLENBQUNHLE9BQU8sQ0FBQ1AsT0FBUixDQUFnQlcsR0FBaEIsQ0FBb0JsQixDQUFwQixDQUZIO0FBSUQsR0FMWSxDQUFiO0FBTUEsU0FBT2dCLElBQUksQ0FDUmpCLEdBREksQ0FDQUMsQ0FBQyxJQUFJO0FBQ1IsV0FBTztBQUNMTyxNQUFBQSxPQUFPLEVBQUUsSUFBSVksR0FBSixDQUFRTCxPQUFPLENBQUNQLE9BQWhCLEVBQXlCYSxHQUF6QixDQUE2QnBCLENBQTdCLENBREo7QUFFTFUsTUFBQUEsUUFBUSxFQUFFSSxPQUFPLENBQUNKLFFBQVIsR0FBbUJWLENBQUMsQ0FBQyxDQUFELENBQXBCLEdBQTBCQSxDQUFDLENBQUMsQ0FBRCxDQUZoQztBQUdMVyxNQUFBQSxJQUFJLEVBQUVYLENBQUMsQ0FBQyxDQUFELENBQUQsS0FBU2MsT0FBTyxDQUFDSCxJQUFqQixHQUF3QlgsQ0FBQyxDQUFDLENBQUQsQ0FBekIsR0FBK0JBLENBQUMsQ0FBQyxDQUFEO0FBSGpDLEtBQVA7QUFLRCxHQVBJLEVBUUppQixNQVJJLENBUUdqQixDQUFDLElBQUk7QUFDWCxVQUFNcUIsR0FBRyxHQUFHbEIsS0FBSyxDQUFDSCxDQUFELENBQWpCO0FBQ0EsV0FBTyxDQUFDZSxLQUFLLENBQUNHLEdBQU4sQ0FBVUcsR0FBVixDQUFELElBQW1CTixLQUFLLENBQUNLLEdBQU4sQ0FBVUMsR0FBVixDQUExQjtBQUNELEdBWEksQ0FBUDtBQVlEOztBQUVELFNBQVNDLEtBQVQsQ0FBZVQsVUFBZixFQUEyQlUsT0FBM0IsRUFBb0M7QUFDbEMsUUFBTVIsS0FBSyxHQUFHLElBQUlJLEdBQUosRUFBZDtBQUNBLE1BQUlLLEdBQUcsR0FBRztBQUFFakIsSUFBQUEsT0FBTyxFQUFFLElBQUlZLEdBQUosRUFBWDtBQUFzQlQsSUFBQUEsUUFBUSxFQUFFLENBQWhDO0FBQW1DQyxJQUFBQSxJQUFJLEVBQUU7QUFBekMsR0FBVjtBQUNBLE1BQUljLEtBQUssR0FBR2IsT0FBTyxDQUFDQyxVQUFELEVBQWFXLEdBQWIsRUFBa0JULEtBQWxCLENBQW5COztBQUNBLFNBQU9VLEtBQUssQ0FBQ0MsTUFBTixHQUFlLENBQXRCLEVBQXlCO0FBQ3ZCLFVBQU1aLE9BQU8sR0FBR1csS0FBSyxDQUFDRSxLQUFOLEVBQWhCO0FBQ0FILElBQUFBLEdBQUcsR0FBR0QsT0FBTyxDQUFDVCxPQUFELEVBQVVVLEdBQVYsQ0FBUCxHQUF3QlYsT0FBeEIsR0FBa0NVLEdBQXhDO0FBQ0FDLElBQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDRyxNQUFOLENBQWFoQixPQUFPLENBQUNDLFVBQUQsRUFBYUMsT0FBYixFQUFzQkMsS0FBdEIsQ0FBcEIsQ0FBUjtBQUNEOztBQUNELFNBQU9TLEdBQUcsQ0FBQ2QsUUFBWDtBQUNEOztBQUVNLFNBQVNtQixLQUFULENBQWVoQyxLQUFmLEVBQXNCO0FBQzNCLFFBQU1nQixVQUFVLEdBQUdqQixLQUFLLENBQUNDLEtBQUQsQ0FBeEI7QUFDQSxTQUFPeUIsS0FBSyxDQUFDVCxVQUFELEVBQWEsQ0FBQ0MsT0FBRCxFQUFVVSxHQUFWLEtBQWtCVixPQUFPLENBQUNKLFFBQVIsR0FBbUJjLEdBQUcsQ0FBQ2QsUUFBdEQsQ0FBWjtBQUNEOztBQUVNLFNBQVNvQixLQUFULENBQWVqQyxLQUFmLEVBQXNCO0FBQzNCLFFBQU1nQixVQUFVLEdBQUdqQixLQUFLLENBQUNDLEtBQUQsQ0FBeEI7QUFDQSxTQUFPeUIsS0FBSyxDQUFDVCxVQUFELEVBQWEsQ0FBQ0MsT0FBRCxFQUFVVSxHQUFWLEtBQWtCO0FBQ3pDLFdBQ0VWLE9BQU8sQ0FBQ1AsT0FBUixDQUFnQndCLElBQWhCLEdBQXVCUCxHQUFHLENBQUNqQixPQUFKLENBQVl3QixJQUFuQyxJQUNDakIsT0FBTyxDQUFDUCxPQUFSLENBQWdCd0IsSUFBaEIsS0FBeUJQLEdBQUcsQ0FBQ2pCLE9BQUosQ0FBWXdCLElBQXJDLElBQ0NqQixPQUFPLENBQUNKLFFBQVIsR0FBbUJjLEdBQUcsQ0FBQ2QsUUFIM0I7QUFLRCxHQU5XLENBQVo7QUFPRCIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5zcGxpdCgnXFxuJykubWFwKHggPT4geC5zcGxpdCgnLycpLm1hcChuID0+IHBhcnNlSW50KG4pKSk7XG59XG5cbmZ1bmN0aW9uIHRvS2V5KGl0ZW0pIHtcbiAgcmV0dXJuIFtcbiAgICBBcnJheS5mcm9tKGl0ZW0udmlzaXRlZClcbiAgICAgIC5tYXAoeCA9PiB4LmpvaW4oJy0nKSlcbiAgICAgIC5zb3J0KClcbiAgICAgIC5qb2luKCcsJyksXG4gICAgaXRlbS5zdHJlbmd0aCxcbiAgICBpdGVtLnBvcnQsXG4gIF0uam9pbignOicpO1xufVxuXG5mdW5jdGlvbiBnZXROZXh0KGNvbXBvbmVudHMsIGN1cnJlbnQsIGNhY2hlKSB7XG4gIGNvbnN0IG5leHQgPSBjb21wb25lbnRzLmZpbHRlcih4ID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgKHhbMF0gPT09IGN1cnJlbnQucG9ydCB8fCB4WzFdID09PSBjdXJyZW50LnBvcnQpICYmXG4gICAgICAhY3VycmVudC52aXNpdGVkLmhhcyh4KVxuICAgICk7XG4gIH0pO1xuICByZXR1cm4gbmV4dFxuICAgIC5tYXAoeCA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2aXNpdGVkOiBuZXcgU2V0KGN1cnJlbnQudmlzaXRlZCkuYWRkKHgpLFxuICAgICAgICBzdHJlbmd0aDogY3VycmVudC5zdHJlbmd0aCArIHhbMF0gKyB4WzFdLFxuICAgICAgICBwb3J0OiB4WzBdID09PSBjdXJyZW50LnBvcnQgPyB4WzFdIDogeFswXSxcbiAgICAgIH07XG4gICAgfSlcbiAgICAuZmlsdGVyKHggPT4ge1xuICAgICAgY29uc3Qga2V5ID0gdG9LZXkoeCk7XG4gICAgICByZXR1cm4gIWNhY2hlLmhhcyhrZXkpICYmIGNhY2hlLmFkZChrZXkpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzb2x2ZShjb21wb25lbnRzLCBjb21wYXJlKSB7XG4gIGNvbnN0IGNhY2hlID0gbmV3IFNldCgpO1xuICBsZXQgbWF4ID0geyB2aXNpdGVkOiBuZXcgU2V0KCksIHN0cmVuZ3RoOiAwLCBwb3J0OiAwIH07XG4gIGxldCBxdWV1ZSA9IGdldE5leHQoY29tcG9uZW50cywgbWF4LCBjYWNoZSk7XG4gIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgY3VycmVudCA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgbWF4ID0gY29tcGFyZShjdXJyZW50LCBtYXgpID8gY3VycmVudCA6IG1heDtcbiAgICBxdWV1ZSA9IHF1ZXVlLmNvbmNhdChnZXROZXh0KGNvbXBvbmVudHMsIGN1cnJlbnQsIGNhY2hlKSk7XG4gIH1cbiAgcmV0dXJuIG1heC5zdHJlbmd0aDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnQxKGlucHV0KSB7XG4gIGNvbnN0IGNvbXBvbmVudHMgPSBwYXJzZShpbnB1dCk7XG4gIHJldHVybiBzb2x2ZShjb21wb25lbnRzLCAoY3VycmVudCwgbWF4KSA9PiBjdXJyZW50LnN0cmVuZ3RoID4gbWF4LnN0cmVuZ3RoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnQyKGlucHV0KSB7XG4gIGNvbnN0IGNvbXBvbmVudHMgPSBwYXJzZShpbnB1dCk7XG4gIHJldHVybiBzb2x2ZShjb21wb25lbnRzLCAoY3VycmVudCwgbWF4KSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIGN1cnJlbnQudmlzaXRlZC5zaXplID4gbWF4LnZpc2l0ZWQuc2l6ZSB8fFxuICAgICAgKGN1cnJlbnQudmlzaXRlZC5zaXplID09PSBtYXgudmlzaXRlZC5zaXplICYmXG4gICAgICAgIGN1cnJlbnQuc3RyZW5ndGggPiBtYXguc3RyZW5ndGgpXG4gICAgKTtcbiAgfSk7XG59XG4iXX0=