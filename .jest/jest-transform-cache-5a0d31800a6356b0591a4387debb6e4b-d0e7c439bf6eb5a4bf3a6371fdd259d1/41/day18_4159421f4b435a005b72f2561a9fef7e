18f7d10a4a22dedefa0ee7726800c254
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function life(grid, stuck) {
  function calc(state, i, j) {
    const safe = (idiff, jdiff) => grid[i + idiff] && grid[i + idiff][j + jdiff];

    const adjacent = [safe(-1, -1), safe(-1, 0), safe(-1, 1), safe(0, -1), safe(0, 1), safe(1, -1), safe(1, 0), safe(1, 1)].filter(x => x).length;

    switch (adjacent) {
      case 3:
        return true;

      case 2:
        return state;

      default:
        return false;
    }
  }

  return grid.map((row, i) => row.map((cell, j) => stuck(i, j) || calc(cell, i, j)));
}

function part1(input, steps = 100) {
  const grid1 = input.split('\n').map(x => x.split('').map(c => c === '#'));
  const result = new Array(steps).fill(undefined).reduce(x => life(x, () => false), grid1);
  return result.reduce((prev, row) => prev.concat(row)).filter(x => x).length;
}

function part2(input, steps = 100) {
  const grid1 = input.split('\n').map(x => x.split('').map(c => c === '#'));

  const corner = (i, j) => (i === 0 || i === grid1.length - 1) && (j === 0 || j === grid1.length - 1);

  const grid2 = grid1.map((row, i) => row.map((cell, j) => cell || corner(i, j)));
  const result = new Array(steps).fill(undefined).reduce(x => life(x, corner), grid2);
  return result.reduce((prev, row) => prev.concat(row)).filter(x => x).length;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE4LmpzIl0sIm5hbWVzIjpbImxpZmUiLCJncmlkIiwic3R1Y2siLCJjYWxjIiwic3RhdGUiLCJpIiwiaiIsInNhZmUiLCJpZGlmZiIsImpkaWZmIiwiYWRqYWNlbnQiLCJmaWx0ZXIiLCJ4IiwibGVuZ3RoIiwibWFwIiwicm93IiwiY2VsbCIsInBhcnQxIiwiaW5wdXQiLCJzdGVwcyIsImdyaWQxIiwic3BsaXQiLCJjIiwicmVzdWx0IiwiQXJyYXkiLCJmaWxsIiwidW5kZWZpbmVkIiwicmVkdWNlIiwicHJldiIsImNvbmNhdCIsInBhcnQyIiwiY29ybmVyIiwiZ3JpZDIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsU0FBU0EsSUFBVCxDQUFjQyxJQUFkLEVBQW9CQyxLQUFwQixFQUEyQjtBQUN6QixXQUFTQyxJQUFULENBQWNDLEtBQWQsRUFBcUJDLENBQXJCLEVBQXdCQyxDQUF4QixFQUEyQjtBQUN6QixVQUFNQyxJQUFJLEdBQUcsQ0FBQ0MsS0FBRCxFQUFRQyxLQUFSLEtBQ1hSLElBQUksQ0FBQ0ksQ0FBQyxHQUFHRyxLQUFMLENBQUosSUFBbUJQLElBQUksQ0FBQ0ksQ0FBQyxHQUFHRyxLQUFMLENBQUosQ0FBZ0JGLENBQUMsR0FBR0csS0FBcEIsQ0FEckI7O0FBRUEsVUFBTUMsUUFBUSxHQUFHLENBQ2ZILElBQUksQ0FBQyxDQUFDLENBQUYsRUFBSyxDQUFDLENBQU4sQ0FEVyxFQUVmQSxJQUFJLENBQUMsQ0FBQyxDQUFGLEVBQUssQ0FBTCxDQUZXLEVBR2ZBLElBQUksQ0FBQyxDQUFDLENBQUYsRUFBSyxDQUFMLENBSFcsRUFJZkEsSUFBSSxDQUFDLENBQUQsRUFBSSxDQUFDLENBQUwsQ0FKVyxFQUtmQSxJQUFJLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FMVyxFQU1mQSxJQUFJLENBQUMsQ0FBRCxFQUFJLENBQUMsQ0FBTCxDQU5XLEVBT2ZBLElBQUksQ0FBQyxDQUFELEVBQUksQ0FBSixDQVBXLEVBUWZBLElBQUksQ0FBQyxDQUFELEVB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Z3JpZCwgc3R1Y2spIHtcbiAgZnVuY3Rpb24gY2FsYyhzdGF0ZSwgaSwgaikge1xuICAgIGNvbnN0IHNhZmUgPSAoaWRpZmYsIGpkaWZmKSA9PlxuICAgICAgZ3JpZFtpICsgaWRpZmZdICYmIGdyaWRbaSArIGlkaWZmXVtqICsgamRpZmZdO1xuICAgIGNvbnN0IGFkamFjZW50ID0gW1xuICAgICAgc2FmZSgtMSwgLTEpLFxuICAgICAgc2FmZSgtMSwgMCksXG4gICAgICBzYWZlKC0xLCAxKSxcbiAgICAgIHNhZmUoMCwgLTEpLFxuICAgICAgc2FmZSgwLCAxKSxcbiAgICAgIHNhZmUoMSwgLTEpLFxuICAgICAgc2FmZSgxLCAwKSxcbiAgICAgIHNhZmUoMSwgMSksXG4gICAgXS5maWx0ZXIoeCA9PiB4KS5sZW5ndGg7XG4gICAgc3dpdGNoIChhZGphY2VudCkge1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZ3JpZC5tYXAoKHJvdywgaSkgPT5cbiAgICByb3cubWFwKChjZWxsLCBqKSA9PiBzdHVjayhpLCBqKSB8fCBjYWxjKGNlbGwsIGksIGopKSxcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnQxKGlucHV0LCBzdGVwcyA9IDEwMCkge1xuICBjb25zdCBncmlkMSA9IGlucHV0LnNwbGl0KCdcXG4nKS5tYXAoeCA9PiB4LnNwbGl0KCcnKS5tYXAoYyA9PiBjID09PSAnIycpKTtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IEFycmF5KHN0ZXBzKVxuICAgIC5maWxsKHVuZGVmaW5lZClcbiAgICAucmVkdWNlKHggPT4gbGlmZSh4LCAoKSA9PiBmYWxzZSksIGdyaWQxKTtcbiAgcmV0dXJuIHJlc3VsdC5yZWR1Y2UoKHByZXYsIHJvdykgPT4gcHJldi5jb25jYXQocm93KSkuZmlsdGVyKHggPT4geCkubGVuZ3RoO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDIoaW5wdXQsIHN0ZXBzID0gMTAwKSB7XG4gIGNvbnN0IGdyaWQxID0gaW5wdXQuc3BsaXQoJ1xcbicpLm1hcCh4ID0+IHguc3BsaXQoJycpLm1hcChjID0+IGMgPT09ICcjJykpO1xuICBjb25zdCBjb3JuZXIgPSAoaSwgaikgPT5cbiAgICAoaSA9PT0gMCB8fCBpID09PSBncmlkMS5sZW5ndGggLSAxKSAmJiAoaiA9PT0gMCB8fCBqID09PSBncmlkMS5sZW5ndGggLSAxKTtcbiAgY29uc3QgZ3JpZDIgPSBncmlkMS5tYXAoKHJvdywgaSkgPT5cbiAgICByb3cubWFwKChjZWxsLCBqKSA9PiBjZWxsIHx8IGNvcm5lcihpLCBqKSksXG4gICk7XG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShzdGVwcylcbiAgICAuZmlsbCh1bmRlZmluZWQpXG4gICAgLnJlZHVjZSh4ID0+IGxpZmUoeCwgY29ybmVyKSwgZ3JpZDIpO1xuICByZXR1cm4gcmVzdWx0LnJlZHVjZSgocHJldiwgcm93KSA9PiBwcmV2LmNvbmNhdChyb3cpKS5maWx0ZXIoeCA9PiB4KS5sZW5ndGg7XG59XG4iXX0=