d6c4b14bfbe047866779ae5242fa0a31
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function parseRoom(s) {
  const [, name, sector, checksum] = s.match(/^(.*)-(\d+)\[(.*)\]$/);
  return {
    name,
    sector: parseInt(sector),
    checksum
  };
}

function checksum(s) {
  const occurences = s.replace(/-/g, '').split('').sort().reduce((obj, c) => {
    return { ...obj,
      [c]: (obj[c] || 0) + 1
    };
  }, {});
  return Object.keys(occurences).map(x => ({
    letter: x,
    times: occurences[x]
  })).sort((a, b) => a.times === b.times ? a.letter.charCodeAt(0) - b.letter.charCodeAt(0) : b.times - a.times).map(x => x.letter).join('').slice(0, 5);
}

function shift(c, t) {
  return String.fromCharCode((c.charCodeAt(0) - 'a'.charCodeAt(0) + t) % 26 + 'a'.charCodeAt(0));
}

function decrypt(name, sector) {
  return name.split('-').map(word => word.split('').map(c => shift(c, sector)).join('')).join(' ');
}

function parse(input) {
  return input.split('\n').map(parseRoom).filter(room => room.checksum === checksum(room.name));
}

function part1(input) {
  const rooms = parse(input);
  return rooms.reduce((sum, room) => sum + room.sector, 0);
}

function part2(input) {
  const rooms = parse(input);
  const room = rooms.map(room => decrypt(room.name, room.sector)).findIndex(x => x === 'northpole object storage');
  return rooms[room] && rooms[room].sector;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTA0LmpzIl0sIm5hbWVzIjpbInBhcnNlUm9vbSIsInMiLCJuYW1lIiwic2VjdG9yIiwiY2hlY2tzdW0iLCJtYXRjaCIsInBhcnNlSW50Iiwib2NjdXJlbmNlcyIsInJlcGxhY2UiLCJzcGxpdCIsInNvcnQiLCJyZWR1Y2UiLCJvYmoiLCJjIiwiT2JqZWN0Iiwia2V5cyIsIm1hcCIsIngiLCJsZXR0ZXIiLCJ0aW1lcyIsImEiLCJiIiwiY2hhckNvZGVBdCIsImpvaW4iLCJzbGljZSIsInNoaWZ0IiwidCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImRlY3J5cHQiLCJ3b3JkIiwicGFyc2UiLCJpbnB1dCIsImZpbHRlciIsInJvb20iLCJwYXJ0MSIsInJvb21zIiwic3VtIiwicGFydDIiLCJmaW5kSW5kZXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsU0FBU0EsU0FBVCxDQUFtQkMsQ0FBbkIsRUFBc0I7QUFDcEIsUUFBTSxHQUFHQyxJQUFILEVBQVNDLE1BQVQsRUFBaUJDLFFBQWpCLElBQTZCSCxDQUFDLENBQUNJLEtBQUYsQ0FBUSxzQkFBUixDQUFuQztBQUNBLFNBQU87QUFBRUgsSUFBQUEsSUFBRjtBQUFRQyxJQUFBQSxNQUFNLEVBQUVHLFFBQVEsQ0FBQ0gsTUFBRCxDQUF4QjtBQUFrQ0MsSUFBQUE7QUFBbEMsR0FBUDtBQUNEOztBQUVELFNBQVNBLFFBQVQsQ0FBa0JILENBQWxCLEVBQXFCO0FBQ25CLFFBQU1NLFVBQVUsR0FBR04sQ0FBQyxDQUNqQk8sT0FEZ0IsQ0FDUixJQURRLEVBQ0YsRUFERSxFQUVoQkMsS0FGZ0IsQ0FFVixFQUZVLEVBR2hCQyxJQUhnQixHQUloQkMsTUFKZ0IsQ0FJVCxDQUFDQyxHQUFELEVBQU1DLENBQU4sS0FBWTtBQUNsQixXQUFPLEVBQUUsR0FBR0QsR0FBTDtBQUFVLE9BQUNDLENBQUQsR0FBSyxDQUFDRCxHQUFHLENBQUNDLENBQUQsQ0FBSCxJQUFVLENBQVgsSUFBZ0I7QUFBL0IsS0FBUDtBQUNELEdBTmdCLEVBTWQsRUFOYyxDQUFuQjtBQU9BLFNBQU9DLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZUixVQUFaLEVBQ0pTLEdBREksQ0FDQUMsQ0FBQyxLQUFLO0FBQUVDLElBQUFBLE1BQU0sRUFBRUQsQ0FBVjtBQUFhRSxJQUFBQSxLQUFLLEVBQUVaLFVBQVUsQ0FBQ1UsQ0FBRDtBQUE5QixHQUFMLENBREQsRUFFSlAsSUFGSSxDQUVDLENBQUNVLENBQUQsRUFBSUMsQ0FBSixLQUNKRCxDQUFDLENBQUNELEtBQUYsS0FBWUUsQ0FBQyxDQUFDRixLQUFkLEdBQ0lDLENBQUMsQ0FBQ0YsTUFBRixDQUFTSSxVQUFULENBQW9CLENBQXBCLElBQXlCRCxDQUFDLENBQUNILE1BQUYsQ0FBU0ksVUFBVCxDQUFvQixDQUFwQixDQUQ3QixHQUVJRCxDQUFDLENBQUNGLEtBQUYsR0FBVUMsQ0FBQyxDQUFDRCxLQUxiLEVBT0pILEdBUEksQ0FPQUMsQ0FBQyxJQUFJQSxDQUFDLENBQUNDLE1BUFAsRUFRSkssSUFSSSxDQVFDLEVBUkQsRUFTSkMsS0FUSSxDQVNFLENBVEYsRUFTSyxDQVRMLENBQVA7QUFVRDs7QUFFRCxTQUFTQyxLQUFULENBQWVaLENBQWYsRUFBa0JhLENBQWxCLEVBQXFCO0FBQ25CLFNBQU9DLE1BQU0sQ0FBQ0MsWUFBUCxDQUNKLENBQUNmLENBQUMsQ0FBQ1MsVUFBRixDQUFhLENBQWIsSUFBa0IsSUFBSUEsVUFBSixDQUFlLENBQWYsQ0FBbEIsR0FBc0NJLENBQXZDLElBQTRDLEVBQTdDLEdBQW1ELElBQUlKLFVBQUosQ0FBZSxDQUFmLENBRDlDLENBQVA7QUFHRDs7QUFFRCxTQUFTTyxPQUFULENBQWlCM0IsSUFBakIsRUFBdUJDLE1BQXZCLEVBQStCO0FBQzdCLFNBQU9ELElBQUksQ0FDUk8sS0FESSxDQUNFLEdBREYsRUFFSk8sR0FGSSxDQUVBYyxJQUFJLElBQ1BBLElBQUksQ0FDRHJCLEtBREgsQ0FDUyxFQURULEVBRUdPLEdBRkgsQ0FFT0gsQ0FBQyxJQUFJWSxLQUFLLENBQUNaLENBQUQsRUFBSVYsTUFBSixDQUZqQixFQUdHb0IsSUFISCxDQUdRLEVBSFIsQ0FIRyxFQVFKQSxJQVJJLENBUUMsR0FSRCxDQUFQO0FBU0Q7O0FBRUQsU0FBU1EsS0FBVCxDQUFlQyxLQUFmLEVBQXNCO0FBQ3BCLFNBQU9BLEtBQUssQ0FDVHZCLEtBREksQ0FDRSxJQURGLEVBRUpPLEdBRkksQ0FFQWhCLFNBRkEsRUFHSmlDLE1BSEksQ0FHR0MsSUFBSSxJQUFJQSxJQUFJLENBQUM5QixRQUFMLEtBQWtCQSxRQUFRLENBQUM4QixJQUFJLENBQUNoQyxJQUFOLENBSHJDLENBQVA7QUFJRDs7QUFFTSxTQUFTaUMsS0FBVCxDQUFlSCxLQUFmLEVBQXNCO0FBQzNCLFFBQU1JLEtBQUssR0FBR0wsS0FBSyxDQUFDQyxLQUFELENBQW5CO0FBQ0EsU0FBT0ksS0FBSyxDQUFDekIsTUFBTixDQUFhLENBQUMwQixHQUFELEVBQU1ILElBQU4sS0FBZUcsR0FBRyxHQUFHSCxJQUFJLENBQUMvQixNQUF2QyxFQUErQyxDQUEvQyxDQUFQO0FBQ0Q7O0FBRU0sU0FBU21DLEtBQVQsQ0FBZU4sS0FBZixFQUFzQjtBQUMzQixRQUFNSSxLQUFLLEdBQUdMLEtBQUssQ0FBQ0MsS0FBRCxDQUFuQjtBQUNBLFFBQU1FLElBQUksR0FBR0UsS0FBSyxDQUNmcEIsR0FEVSxDQUNOa0IsSUFBSSxJQUFJTCxPQUFPLENBQUNLLElBQUksQ0FBQ2hDLElBQU4sRUFBWWdDLElBQUksQ0FBQy9CLE1BQWpCLENBRFQsRUFFVm9DLFNBRlUsQ0FFQXRCLENBQUMsSUFBSUEsQ0FBQyxLQUFLLDBCQUZYLENBQWI7QUFHQSxTQUFPbUIsS0FBSyxDQUFDRixJQUFELENBQUwsSUFBZUUsS0FBSyxDQUFDRixJQUFELENBQUwsQ0FBWS9CLE1BQWxDO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBwYXJzZVJvb20ocykge1xuICBjb25zdCBbLCBuYW1lLCBzZWN0b3IsIGNoZWNrc3VtXSA9IHMubWF0Y2goL14oLiopLShcXGQrKVxcWyguKilcXF0kLyk7XG4gIHJldHVybiB7IG5hbWUsIHNlY3RvcjogcGFyc2VJbnQoc2VjdG9yKSwgY2hlY2tzdW0gfTtcbn1cblxuZnVuY3Rpb24gY2hlY2tzdW0ocykge1xuICBjb25zdCBvY2N1cmVuY2VzID0gc1xuICAgIC5yZXBsYWNlKC8tL2csICcnKVxuICAgIC5zcGxpdCgnJylcbiAgICAuc29ydCgpXG4gICAgLnJlZHVjZSgob2JqLCBjKSA9PiB7XG4gICAgICByZXR1cm4geyAuLi5vYmosIFtjXTogKG9ialtjXSB8fCAwKSArIDEgfTtcbiAgICB9LCB7fSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvY2N1cmVuY2VzKVxuICAgIC5tYXAoeCA9PiAoeyBsZXR0ZXI6IHgsIHRpbWVzOiBvY2N1cmVuY2VzW3hdIH0pKVxuICAgIC5zb3J0KChhLCBiKSA9PlxuICAgICAgYS50aW1lcyA9PT0gYi50aW1lc1xuICAgICAgICA/IGEubGV0dGVyLmNoYXJDb2RlQXQoMCkgLSBiLmxldHRlci5jaGFyQ29kZUF0KDApXG4gICAgICAgIDogYi50aW1lcyAtIGEudGltZXMsXG4gICAgKVxuICAgIC5tYXAoeCA9PiB4LmxldHRlcilcbiAgICAuam9pbignJylcbiAgICAuc2xpY2UoMCwgNSk7XG59XG5cbmZ1bmN0aW9uIHNoaWZ0KGMsIHQpIHtcbiAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoXG4gICAgKChjLmNoYXJDb2RlQXQoMCkgLSAnYScuY2hhckNvZGVBdCgwKSArIHQpICUgMjYpICsgJ2EnLmNoYXJDb2RlQXQoMCksXG4gICk7XG59XG5cbmZ1bmN0aW9uIGRlY3J5cHQobmFtZSwgc2VjdG9yKSB7XG4gIHJldHVybiBuYW1lXG4gICAgLnNwbGl0KCctJylcbiAgICAubWFwKHdvcmQgPT5cbiAgICAgIHdvcmRcbiAgICAgICAgLnNwbGl0KCcnKVxuICAgICAgICAubWFwKGMgPT4gc2hpZnQoYywgc2VjdG9yKSlcbiAgICAgICAgLmpvaW4oJycpLFxuICAgIClcbiAgICAuam9pbignICcpO1xufVxuXG5mdW5jdGlvbiBwYXJzZShpbnB1dCkge1xuICByZXR1cm4gaW5wdXRcbiAgICAuc3BsaXQoJ1xcbicpXG4gICAgLm1hcChwYXJzZVJvb20pXG4gICAgLmZpbHRlcihyb29tID0+IHJvb20uY2hlY2tzdW0gPT09IGNoZWNrc3VtKHJvb20ubmFtZSkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDEoaW5wdXQpIHtcbiAgY29uc3Qgcm9vbXMgPSBwYXJzZShpbnB1dCk7XG4gIHJldHVybiByb29tcy5yZWR1Y2UoKHN1bSwgcm9vbSkgPT4gc3VtICsgcm9vbS5zZWN0b3IsIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDIoaW5wdXQpIHtcbiAgY29uc3Qgcm9vbXMgPSBwYXJzZShpbnB1dCk7XG4gIGNvbnN0IHJvb20gPSByb29tc1xuICAgIC5tYXAocm9vbSA9PiBkZWNyeXB0KHJvb20ubmFtZSwgcm9vbS5zZWN0b3IpKVxuICAgIC5maW5kSW5kZXgoeCA9PiB4ID09PSAnbm9ydGhwb2xlIG9iamVjdCBzdG9yYWdlJyk7XG4gIHJldHVybiByb29tc1tyb29tXSAmJiByb29tc1tyb29tXS5zZWN0b3I7XG59XG4iXX0=