49f0ca516c193adff7ea3c91209e5a53
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part2 = exports.part1 = void 0;

function calcNeighbors({
  molecule,
  replacements
}) {
  return replacements.reduce((result, pair) => {
    const regexp = new RegExp(pair.from, 'g');

    while (regexp.exec(molecule)) {
      result.push(molecule.slice(0, regexp.lastIndex - pair.from.length) + pair.to + molecule.slice(regexp.lastIndex));
    }

    return result;
  }, []).sort().filter((x, index, arr) => x !== arr[index - 1]);
}

function calcDistance(src, {
  molecule: dest,
  replacements
}) {
  let queue = [dest];
  const cost = {
    [dest]: 0
  };

  const heuristic = p => cost[p] + p.length - src.length;

  replacements = replacements.map(x => ({
    from: x.to,
    to: x.from
  }));

  while (queue.length) {
    const molecule = queue.shift();

    if (molecule === src) {
      return cost[src];
    }
    /* eslint no-loop-func: "off" */


    calcNeighbors({
      molecule,
      replacements
    }).forEach(next => {
      const newCost = cost[molecule] + 1;

      if (!cost[next] || newCost < cost[next]) {
        cost[next] = newCost;
        queue.push(next);
      }
    });
    queue = queue.sort().filter((x, index, arr) => x !== arr[index - 1]);
    queue = queue.sort((a, b) => heuristic(a) - heuristic(b)); //A* priority queue
  }
}

function parse(input) {
  input = input.split('\n');
  const molecule = input.pop();
  input.pop();
  const replacements = input.map(x => x.match(/^(\w+) => (\w+)$/)).map(x => ({
    from: x[1],
    to: x[2]
  }));
  return {
    molecule,
    replacements
  };
}

const part1 = input => calcNeighbors(parse(input)).length;

exports.part1 = part1;

const part2 = input => calcDistance('e', parse(input));

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE5LmpzIl0sIm5hbWVzIjpbImNhbGNOZWlnaGJvcnMiLCJtb2xlY3VsZSIsInJlcGxhY2VtZW50cyIsInJlZHVjZSIsInJlc3VsdCIsInBhaXIiLCJyZWdleHAiLCJSZWdFeHAiLCJmcm9tIiwiZXhlYyIsInB1c2giLCJzbGljZSIsImxhc3RJbmRleCIsImxlbmd0aCIsInRvIiwic29ydCIsImZpbHRlciIsIngiLCJpbmRleCIsImFyciIsImNhbGNEaXN0YW5jZSIsInNyYyIsImRlc3QiLCJxdWV1ZSIsImNvc3QiLCJoZXVyaXN0aWMiLCJwIiwibWFwIiwic2hpZnQiLCJmb3JFYWNoIiwibmV4dCIsIm5ld0Nvc3QiLCJhIiwiYiIsInBhcnNlIiwiaW5wdXQiLCJzcGxpdCIsInBvcCIsIm1hdGNoIiwicGFydDEiLCJwYXJ0MiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLFNBQVNBLGFBQVQsQ0FBdUI7QUFBRUMsRUFBQUEsUUFBRjtBQUFZQyxFQUFBQTtBQUFaLENBQXZCLEVBQW1EO0FBQ2pELFNBQU9BLFlBQVksQ0FDaEJDLE1BREksQ0FDRyxDQUFDQyxNQUFELEVBQVNDLElBQVQsS0FBa0I7QUFDeEIsVUFBTUMsTUFBTSxHQUFHLElBQUlDLE1BQUosQ0FBV0YsSUFBSSxDQUFDRyxJQUFoQixFQUFzQixHQUF0QixDQUFmOztBQUNBLFdBQU9GLE1BQU0sQ0FBQ0csSUFBUCxDQUFZUixRQUFaLENBQVAsRUFBOEI7QUFDNUJHLE1BQUFBLE1BQU0sQ0FBQ00sSUFBUCxDQUNFVCxRQUFRLENBQUNVLEtBQVQsQ0FBZSxDQUFmLEVBQWtCTCxNQUFNLENBQUNNLFNBQVAsR0FBbUJQLElBQUksQ0FBQ0csSUFBTCxDQUFVSyxNQUEvQyxJQUNFUixJQUFJLENBQUNTLEVBRFAsR0FFRWIsUUFBUSxDQUFDVSxLQUFULENBQWVMLE1BQU0sQ0FBQ00sU0FBdEIsQ0FISjtBQUtEOztBQUNELFdBQU9SLE1BQVA7QUFDRCxHQVhJLEVBV0YsRUFYRSxFQVlKVyxJQVpJLEdB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S0FBSyxHQUFHSixLQUFLLElBQUluQyxhQUFhLENBQUNrQyxLQUFLLENBQUNDLEtBQUQsQ0FBTixDQUFiLENBQTRCdEIsTUFBbkQ7Ozs7QUFDQSxNQUFNMkIsS0FBSyxHQUFHTCxLQUFLLElBQUlmLFlBQVksQ0FBQyxHQUFELEVBQU1jLEtBQUssQ0FBQ0MsS0FBRCxDQUFYLENBQW5DIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY2FsY05laWdoYm9ycyh7IG1vbGVjdWxlLCByZXBsYWNlbWVudHMgfSkge1xuICByZXR1cm4gcmVwbGFjZW1lbnRzXG4gICAgLnJlZHVjZSgocmVzdWx0LCBwYWlyKSA9PiB7XG4gICAgICBjb25zdCByZWdleHAgPSBuZXcgUmVnRXhwKHBhaXIuZnJvbSwgJ2cnKTtcbiAgICAgIHdoaWxlIChyZWdleHAuZXhlYyhtb2xlY3VsZSkpIHtcbiAgICAgICAgcmVzdWx0LnB1c2goXG4gICAgICAgICAgbW9sZWN1bGUuc2xpY2UoMCwgcmVnZXhwLmxhc3RJbmRleCAtIHBhaXIuZnJvbS5sZW5ndGgpICtcbiAgICAgICAgICAgIHBhaXIudG8gK1xuICAgICAgICAgICAgbW9sZWN1bGUuc2xpY2UocmVnZXhwLmxhc3RJbmRleCksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sIFtdKVxuICAgIC5zb3J0KClcbiAgICAuZmlsdGVyKCh4LCBpbmRleCwgYXJyKSA9PiB4ICE9PSBhcnJbaW5kZXggLSAxXSk7XG59XG5cbmZ1bmN0aW9uIGNhbGNEaXN0YW5jZShzcmMsIHsgbW9sZWN1bGU6IGRlc3QsIHJlcGxhY2VtZW50cyB9KSB7XG4gIGxldCBxdWV1ZSA9IFtkZXN0XTtcbiAgY29uc3QgY29zdCA9IHsgW2Rlc3RdOiAwIH07XG4gIGNvbnN0IGhldXJpc3RpYyA9IHAgPT4gY29zdFtwXSArIHAubGVuZ3RoIC0gc3JjLmxlbmd0aDtcbiAgcmVwbGFjZW1lbnRzID0gcmVwbGFjZW1lbnRzLm1hcCh4ID0+ICh7IGZyb206IHgudG8sIHRvOiB4LmZyb20gfSkpO1xuXG4gIHdoaWxlIChxdWV1ZS5sZW5ndGgpIHtcbiAgICBjb25zdCBtb2xlY3VsZSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgaWYgKG1vbGVjdWxlID09PSBzcmMpIHtcbiAgICAgIHJldHVybiBjb3N0W3NyY107XG4gICAgfVxuICAgIC8qIGVzbGludCBuby1sb29wLWZ1bmM6IFwib2ZmXCIgKi9cbiAgICBjYWxjTmVpZ2hib3JzKHsgbW9sZWN1bGUsIHJlcGxhY2VtZW50cyB9KS5mb3JFYWNoKG5leHQgPT4ge1xuICAgICAgY29uc3QgbmV3Q29zdCA9IGNvc3RbbW9sZWN1bGVdICsgMTtcbiAgICAgIGlmICghY29zdFtuZXh0XSB8fCBuZXdDb3N0IDwgY29zdFtuZXh0XSkge1xuICAgICAgICBjb3N0W25leHRdID0gbmV3Q29zdDtcbiAgICAgICAgcXVldWUucHVzaChuZXh0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBxdWV1ZSA9IHF1ZXVlLnNvcnQoKS5maWx0ZXIoKHgsIGluZGV4LCBhcnIpID0+IHggIT09IGFycltpbmRleCAtIDFdKTtcbiAgICBxdWV1ZSA9IHF1ZXVlLnNvcnQoKGEsIGIpID0+IGhldXJpc3RpYyhhKSAtIGhldXJpc3RpYyhiKSk7IC8vQSogcHJpb3JpdHkgcXVldWVcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZShpbnB1dCkge1xuICBpbnB1dCA9IGlucHV0LnNwbGl0KCdcXG4nKTtcbiAgY29uc3QgbW9sZWN1bGUgPSBpbnB1dC5wb3AoKTtcbiAgaW5wdXQucG9wKCk7XG4gIGNvbnN0IHJlcGxhY2VtZW50cyA9IGlucHV0XG4gICAgLm1hcCh4ID0+IHgubWF0Y2goL14oXFx3KykgPT4gKFxcdyspJC8pKVxuICAgIC5tYXAoeCA9PiAoeyBmcm9tOiB4WzFdLCB0bzogeFsyXSB9KSk7XG4gIHJldHVybiB7IG1vbGVjdWxlLCByZXBsYWNlbWVudHMgfTtcbn1cblxuZXhwb3J0IGNvbnN0IHBhcnQxID0gaW5wdXQgPT4gY2FsY05laWdoYm9ycyhwYXJzZShpbnB1dCkpLmxlbmd0aDtcbmV4cG9ydCBjb25zdCBwYXJ0MiA9IGlucHV0ID0+IGNhbGNEaXN0YW5jZSgnZScsIHBhcnNlKGlucHV0KSk7XG4iXX0=