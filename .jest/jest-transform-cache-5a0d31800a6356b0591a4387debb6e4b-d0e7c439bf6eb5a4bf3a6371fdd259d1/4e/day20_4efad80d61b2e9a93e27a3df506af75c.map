{"version":3,"sources":["day20.js"],"names":["MAX_IP","merge","ranges","sort","a","b","reduce","segments","range","lastSegment","length","push","Math","max","parse","input","split","map","x","match","slice","parseInt","part1","part2","sum"],"mappings":";;;;;;AAAA,MAAMA,MAAM,GAAG,UAAf;;AAEA,SAASC,KAAT,CAAeC,MAAf,EAAuB;AACrBA,EAAAA,MAAM,CAACC,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOC,CAAC,CAAC,CAAD,CAA9B;AACA,SAAOH,MAAM,CAACI,MAAP,CACL,CAACC,QAAD,EAAWC,KAAX,KAAqB;AACnB,UAAMC,WAAW,GAAGF,QAAQ,CAACA,QAAQ,CAACG,MAAT,GAAkB,CAAnB,CAA5B;;AACA,QAAIF,KAAK,CAAC,CAAD,CAAL,GAAWC,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAhC,EAAmC;AACjCF,MAAAA,QAAQ,CAACI,IAAT,CAAcH,KAAd;AACD,KAFD,MAEO;AACLC,MAAAA,WAAW,CAAC,CAAD,CAAX,GAAiBG,IAAI,CAACC,GAAL,CAASL,KAAK,CAAC,CAAD,CAAd,EAAmBC,WAAW,CAAC,CAAD,CAA9B,CAAjB;AACD;;AACD,WAAOF,QAAP;AACD,GATI,EAUL,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,CAVK,CAAP;AAYD;;AAED,SAASO,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOA,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBC,GAAlB,CAAsBC,CAAC,IAC5BA,CAAC,CACEC,KADH,CACS,eADT,EAEGC,KAFH,CAES,CAFT,EAGGH,GAHH,CAGOC,CAAC,IAAIG,QAAQ,CAACH,CAAD,CAHpB,CADK,CAAP;AAMD;;AAEM,MAAMI,KAAK,GAAGP,KAAK,IAAId,KAAK,CAACa,KAAK,CAACC,KAAD,CAAN,CAAL,CAAoB,CAApB,EAAuB,CAAvB,IAA4B,CAAnD;;;;AACA,MAAMQ,KAAK,GAAGR,KAAK,IACxBf,MAAM,GAAGC,KAAK,CAACa,KAAK,CAACC,KAAD,CAAN,CAAL,CAAoBT,MAApB,CAA2B,CAACkB,GAAD,EAAMN,CAAN,KAAYM,GAAG,GAAGN,CAAC,CAAC,CAAD,CAAP,GAAaA,CAAC,CAAC,CAAD,CAAd,GAAoB,CAA3D,EAA8D,CAA9D,CAAT,GAA4E,CADvE","sourcesContent":["const MAX_IP = 4294967295;\n\nfunction merge(ranges) {\n  ranges.sort((a, b) => a[0] - b[0]);\n  return ranges.reduce(\n    (segments, range) => {\n      const lastSegment = segments[segments.length - 1];\n      if (range[0] > lastSegment[1] + 1) {\n        segments.push(range);\n      } else {\n        lastSegment[1] = Math.max(range[1], lastSegment[1]);\n      }\n      return segments;\n    },\n    [[0, 0]],\n  );\n}\n\nfunction parse(input) {\n  return input.split('\\n').map(x =>\n    x\n      .match(/^(\\d+)-(\\d+)$/)\n      .slice(1)\n      .map(x => parseInt(x)),\n  );\n}\n\nexport const part1 = input => merge(parse(input))[0][1] + 1;\nexport const part2 = input =>\n  MAX_IP - merge(parse(input)).reduce((sum, x) => sum + x[1] - x[0] + 1, 0) + 1;\n"]}