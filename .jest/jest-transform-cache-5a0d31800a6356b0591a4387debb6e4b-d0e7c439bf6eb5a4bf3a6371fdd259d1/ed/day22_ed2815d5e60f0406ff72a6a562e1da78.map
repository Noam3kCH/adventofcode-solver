{"version":3,"sources":["day22.js"],"names":["parse","input","split","slice","map","x","fix","parseInt","replace","name","size","used","avail","use","solve1","nodes","pairs","Combinatorics","bigCombination","toArray","concat","filter","cellId","y","build","big","Math","floor","log10","sort","a","b","length","start","data","forEach","node","match","wall","getNeighbors","point","distance","p","shortest","source","destination","queue","visited","next","shift","neighbors","part1","part2"],"mappings":"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","sourcesContent":["import Combinatorics from 'js-combinatorics';\n\nfunction parse(input) {\n  return input\n    .split('\\n')\n    .slice(2)\n    .map(x => {\n      const fix = x => parseInt(x.replace(/.$/, ''), 10);\n      const [name, size, used, avail, use] = x.split(/\\s+/);\n      return { name, size: fix(size), used: fix(used), avail: fix(avail), use };\n    });\n}\n\nfunction solve1(nodes) {\n  const pairs = Combinatorics.bigCombination(nodes, 2).toArray();\n  return pairs.concat(pairs.map(x => [x[1], x[0]])).filter(x => {\n    return x[0].used !== 0 && x[0].used <= x[1].avail;\n  });\n}\n\nfunction cellId({ x, y }) {\n  return `${x}-${y}`;\n}\n\nfunction build(nodes) {\n  const big = Math.floor(\n    Math.log10(nodes.sort((a, b) => a.used - b.used)[nodes.length - 1].used),\n  );\n  const map = {};\n  let start,\n    data = { x: 0, y: 0 };\n  nodes.forEach(node => {\n    const [x, y] = node.name\n      .match(/x(\\d+)-y(\\d+)$/)\n      .slice(1)\n      .map(x => parseInt(x));\n    map[cellId({ x, y })] = { wall: Math.floor(Math.log10(node.used)) === big };\n    start = node.used === 0 ? { x, y } : start;\n    data = y === 0 && x > data.x ? { x, y } : data;\n  });\n  return { map, start, data };\n}\n\nfunction getNeighbors(map, point) {\n  return [\n    { x: point.x - 1, y: point.y, distance: point.distance + 1 },\n    { x: point.x + 1, y: point.y, distance: point.distance + 1 },\n    { x: point.x, y: point.y - 1, distance: point.distance + 1 },\n    { x: point.x, y: point.y + 1, distance: point.distance + 1 },\n  ].filter(p => map[cellId(p)]);\n}\n\nfunction shortest(map, source, destination) {\n  let queue = [source];\n  const visited = { [cellId(source)]: { distance: 0 } };\n  while (queue.length) {\n    const next = queue.shift();\n    if (next.x === destination.x && next.y === destination.y) {\n      return visited[cellId(next)].distance;\n    } else {\n      const neighbors = getNeighbors(map, next).filter(\n        x => !visited[cellId(x)],\n      );\n      const distance = visited[cellId(next)].distance + 1;\n      neighbors.forEach(x => (visited[cellId(x)] = { distance }));\n      queue = queue.concat(neighbors.filter(x => !map[cellId(x)].wall));\n    }\n  }\n  return 0;\n}\n\nexport function part1(input) {\n  const nodes = parse(input);\n  return solve1(nodes).length;\n}\n\nexport function part2(input) {\n  const nodes = parse(input);\n  const { map, start, data } = build(nodes);\n  return shortest(map, start, { x: data.x - 1, y: 0 }) + 1 + 5 * (data.x - 1);\n}\n"]}