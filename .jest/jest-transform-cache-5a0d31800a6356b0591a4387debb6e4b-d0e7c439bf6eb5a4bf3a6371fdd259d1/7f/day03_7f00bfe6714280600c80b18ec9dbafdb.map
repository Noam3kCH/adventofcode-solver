{"version":3,"sources":["day03.js"],"names":["step","x","y","pos","steps","v","parse","input","split","map","part1","reduce","state","next","visited","add","Set","size","part2","index","turn","santa","robot"],"mappings":";;;;;;;;AAAA,SAASA,IAAT,CAAcC,CAAd,EAAiBC,CAAjB,EAAoB;AAClB,SAAOC,GAAG,KAAK;AAAEF,IAAAA,CAAC,EAAEE,GAAG,CAACF,CAAJ,GAAQA,CAAb;AAAgBC,IAAAA,CAAC,EAAEC,GAAG,CAACD,CAAJ,GAAQA;AAA3B,GAAL,CAAV;AACD;;AAED,MAAME,KAAK,GAAG;AACZ,OAAKJ,IAAI,CAAC,CAAC,CAAF,EAAK,CAAL,CADG;AAEZ,OAAKA,IAAI,CAAC,CAAD,EAAI,CAAJ,CAFG;AAGZ,OAAKA,IAAI,CAAC,CAAD,EAAI,CAAC,CAAL,CAHG;AAIZK,EAAAA,CAAC,EAAEL,IAAI,CAAC,CAAD,EAAI,CAAJ;AAJK,CAAd;;AAOA,SAASM,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOA,KAAK,CAACC,KAAN,CAAY,EAAZ,EAAgBC,GAAhB,CAAoBR,CAAC,IAAIG,KAAK,CAACH,CAAD,CAA9B,CAAP;AACD;;AAEM,SAASS,KAAT,CAAeH,KAAf,EAAsB;AAC3B,SAAOD,KAAK,CAACC,KAAD,CAAL,CAAaI,MAAb,CACL,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACf,UAAMV,GAAG,GAAIS,KAAK,CAACT,GAAN,GAAYU,IAAI,CAACD,KAAK,CAACT,GAAP,CAA7B;AACAS,IAAAA,KAAK,CAACE,OAAN,CAAcC,GAAd,CAAmB,GAAEZ,GAAG,CAACF,CAAE,IAAGE,GAAG,CAACD,CAAE,EAApC;AACA,WAAOU,KAAP;AACD,GALI,EAML;AAAEE,IAAAA,OAAO,EAAE,IAAIE,GAAJ,GAAUD,GAAV,CAAc,KAAd,CAAX;AAAiCZ,IAAAA,GAAG,EAAE;AAAEF,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX;AAAtC,GANK,EAOLY,OAPK,CAOGG,IAPV;AAQD;;AAEM,SAASC,KAAT,CAAeX,KAAf,EAAsB;AAC3B,SAAOD,KAAK,CAACC,KAAD,CAAL,CAAaI,MAAb,CACL,CAACC,KAAD,EAAQC,IAAR,EAAcM,KAAd,KAAwB;AACtB,UAAMC,IAAI,GAAGD,KAAK,GAAG,CAAR,KAAc,CAAd,GAAkB,OAAlB,GAA4B,OAAzC;AACA,UAAMhB,GAAG,GAAIS,KAAK,CAACT,GAAN,CAAUiB,IAAV,IAAkBP,IAAI,CAACD,KAAK,CAACT,GAAN,CAAUiB,IAAV,CAAD,CAAnC;AACAR,IAAAA,KAAK,CAACE,OAAN,CAAcC,GAAd,CAAmB,GAAEZ,GAAG,CAACF,CAAE,IAAGE,GAAG,CAACD,CAAE,EAApC;AACA,WAAOU,KAAP;AACD,GANI,EAOL;AACEE,IAAAA,OAAO,EAAE,IAAIE,GAAJ,GAAUD,GAAV,CAAc,KAAd,CADX;AAEEZ,IAAAA,GAAG,EAAE;AAAEkB,MAAAA,KAAK,EAAE;AAAEpB,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAAT;AAAyBoB,MAAAA,KAAK,EAAE;AAAErB,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX;AAAhC;AAFP,GAPK,EAWLY,OAXK,CAWGG,IAXV;AAYD","sourcesContent":["function step(x, y) {\n  return pos => ({ x: pos.x + x, y: pos.y + y });\n}\n\nconst steps = {\n  '<': step(-1, 0),\n  '>': step(1, 0),\n  '^': step(0, -1),\n  v: step(0, 1),\n};\n\nfunction parse(input) {\n  return input.split('').map(x => steps[x]);\n}\n\nexport function part1(input) {\n  return parse(input).reduce(\n    (state, next) => {\n      const pos = (state.pos = next(state.pos));\n      state.visited.add(`${pos.x}-${pos.y}`);\n      return state;\n    },\n    { visited: new Set().add('0-0'), pos: { x: 0, y: 0 } },\n  ).visited.size;\n}\n\nexport function part2(input) {\n  return parse(input).reduce(\n    (state, next, index) => {\n      const turn = index % 2 === 0 ? 'santa' : 'robot';\n      const pos = (state.pos[turn] = next(state.pos[turn]));\n      state.visited.add(`${pos.x}-${pos.y}`);\n      return state;\n    },\n    {\n      visited: new Set().add('0-0'),\n      pos: { santa: { x: 0, y: 0 }, robot: { x: 0, y: 0 } },\n    },\n  ).visited.size;\n}\n"]}