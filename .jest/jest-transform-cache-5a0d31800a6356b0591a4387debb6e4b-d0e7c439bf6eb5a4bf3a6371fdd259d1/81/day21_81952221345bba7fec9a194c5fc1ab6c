485e6215db3107c03f1cd00f72a14cdf
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

var _vm = _interopRequireDefault(require("vm"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ops = {
  addr: (l, i1, i2, o) => `case ${l}: r${o} = r${i1} + r${i2}; break;`,
  addi: (l, i1, i2, o) => `case ${l}: r${o} = r${i1} + ${i2}; break;`,
  mulr: (l, i1, i2, o) => `case ${l}: r${o} = r${i1} * r${i2}; break;`,
  muli: (l, i1, i2, o) => `case ${l}: r${o} = r${i1} * ${i2}; break;`,
  banr: (l, i1, i2, o) => `case ${l}: r${o} = r${i1} & r${i2}; break;`,
  bani: (l, i1, i2, o) => `case ${l}: r${o} = r${i1} & ${i2}; break;`,
  borr: (l, i1, i2, o) => `case ${l}: r${o} = r${i1} | r${i2}; break;`,
  bori: (l, i1, i2, o) => `case ${l}: r${o} = r${i1} | ${i2}; break;`,
  setr: (l, i1, i2, o) => `case ${l}: r${o} = r${i1}; break;`,
  seti: (l, i1, i2, o) => `case ${l}: r${o} = ${i1}; break;`,
  gtir: (l, i1, i2, o) => `case ${l}: r${o} = ${i1} > r${i2} ? 1 : 0; break;`,
  gtri: (l, i1, i2, o) => `case ${l}: r${o} = r${i1} > ${i2} ? 1 : 0; break;`,
  gtrr: (l, i1, i2, o) => `case ${l}: r${o} = r${i1} > r${i2} ? 1 : 0; break;`,
  eqir: (l, i1, i2, o) => `case ${l}: r${o} = ${i1} === r${i2} ? 1 : 0; break;`,
  eqri: (l, i1, i2, o) => `case ${l}: r${o} = r${i1} === ${i2} ? 1 : 0; break;`,
  eqrr: (l, i1, i2, o) => {
    if (i1 === '0') {
      return `case ${l}: r${o} = cb(r${i2}) === r${i2} ? 1 : 0; break;`;
    } else if (i2 === '0') {
      return `case ${l}: r${o} = r${i1} === cb(r${i1}) ? 1 : 0; break;`;
    } else {
      return `case ${l}: r${o} = r${i1} === r${i2} ? 1 : 0; break;`;
    }
  }
};

function run(input, tap, cb) {
  const lines = input.split('\n');
  const ip = parseInt(lines.shift().split(' ').pop());
  const commands = lines.map((x, i) => {
    const [op, ...params] = x.split(' ');
    return ops[op](i, ...params);
  });
  const script = `(cb) => {
    let r0 = 0, r1 = 0, r2 = 0, r3 = 0, r4 = 0, r5 = 0;
    while (true) {
      switch (r${ip}) {
        ${commands.join('\n')}
        default: return null;
      }
      r${ip}++;
    }
  }`;

  const exec = _vm.default.runInThisContext(script);

  return exec(tap, cb);
}

function part1(input) {
  let result;
  run(input, r => result = r);
  return result;
}

function part2(input) {
  let prev;
  const all = new Set();
  run(input, r => all.has(r) ? r : all.add(prev = r) && undefined);
  return prev;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTIxLmpzIl0sIm5hbWVzIjpbIm9wcyIsImFkZHIiLCJsIiwiaTEiLCJpMiIsIm8iLCJhZGRpIiwibXVsciIsIm11bGkiLCJiYW5yIiwiYmFuaSIsImJvcnIiLCJib3JpIiwic2V0ciIsInNldGkiLCJndGlyIiwiZ3RyaSIsImd0cnIiLCJlcWlyIiwiZXFyaSIsImVxcnIiLCJydW4iLCJpbnB1dCIsInRhcCIsImNiIiwibGluZXMiLCJzcGxpdCIsImlwIiwicGFyc2VJbnQiLCJzaGlmdCIsInBvcCIsImNvbW1hbmRzIiwibWFwIiwieCIsImkiLCJvcCIsInBhcmFtcyIsInNjcmlwdCIsImpvaW4iLCJleGVjIiwidm0iLCJydW5JblRoaXNDb250ZXh0IiwicGFydDEiLCJyZXN1bHQiLCJyIiwicGFydDIiLCJwcmV2IiwiYWxsIiwiU2V0IiwiaGFzIiwiYWRkIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0FBRUEsTUFBTUEsR0FBRyxHQUFHO0FBQ1ZDLEVBQUFBLElBQUksRUFBRSxDQUFDQyxDQUFELEVBQUlDLEVBQUosRUFBUUMsRUFBUixFQUFZQyxDQUFaLEtBQW1CLFFBQU9ILENBQUUsTUFBS0csQ0FBRSxPQUFNRixFQUFHLE9BQU1DLEVBQUcsVUFEakQ7QUFFVkUsRUFBQUEsSUFBSSxFQUFFLENBQUNKLENBQUQsRUFBSUMsRUFBSixFQUFRQyxFQUFSLEVBQVlDLENBQVosS0FBbUIsUUFBT0gsQ0FBRSxNQUFLRyxDQUFFLE9BQU1GLEVBQUcsTUFBS0MsRUFBRyxVQUZoRDtBQUdWRyxFQUFBQSxJQUFJLEVBQUUsQ0FBQ0wsQ0FBRCxFQUFJQyxFQUFKLEVBQVFDLEVBQVIsRUFBWUMsQ0FBWixLQUFtQixRQUFPSCxDQUFFLE1BQUtHLENBQUUsT0FBTUYsRUFBRyxPQUFNQyxFQUFHLFVBSGpEO0FBSVZJLEVBQUFBLElBQUksRUFBRSxDQUFDTixDQUFELEVBQUlDLEVBQUosRUFBUUMsRUFBUixFQUFZQyxDQUFaLEtBQW1CLFFB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R0FBaUJHLEdBQUcsQ0FBQ0csR0FBSixDQUFTSixJQUFJLEdBQUdGLENBQWhCLEtBQXVCTyxTQUF0RCxDQUFIO0FBQ0EsU0FBT0wsSUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHZtIGZyb20gJ3ZtJztcblxuY29uc3Qgb3BzID0ge1xuICBhZGRyOiAobCwgaTEsIGkyLCBvKSA9PiBgY2FzZSAke2x9OiByJHtvfSA9IHIke2kxfSArIHIke2kyfTsgYnJlYWs7YCxcbiAgYWRkaTogKGwsIGkxLCBpMiwgbykgPT4gYGNhc2UgJHtsfTogciR7b30gPSByJHtpMX0gKyAke2kyfTsgYnJlYWs7YCxcbiAgbXVscjogKGwsIGkxLCBpMiwgbykgPT4gYGNhc2UgJHtsfTogciR7b30gPSByJHtpMX0gKiByJHtpMn07IGJyZWFrO2AsXG4gIG11bGk6IChsLCBpMSwgaTIsIG8pID0+IGBjYXNlICR7bH06IHIke299ID0gciR7aTF9ICogJHtpMn07IGJyZWFrO2AsXG4gIGJhbnI6IChsLCBpMSwgaTIsIG8pID0+IGBjYXNlICR7bH06IHIke299ID0gciR7aTF9ICYgciR7aTJ9OyBicmVhaztgLFxuICBiYW5pOiAobCwgaTEsIGkyLCBvKSA9PiBgY2FzZSAke2x9OiByJHtvfSA9IHIke2kxfSAmICR7aTJ9OyBicmVhaztgLFxuICBib3JyOiAobCwgaTEsIGkyLCBvKSA9PiBgY2FzZSAke2x9OiByJHtvfSA9IHIke2kxfSB8IHIke2kyfTsgYnJlYWs7YCxcbiAgYm9yaTogKGwsIGkxLCBpMiwgbykgPT4gYGNhc2UgJHtsfTogciR7b30gPSByJHtpMX0gfCAke2kyfTsgYnJlYWs7YCxcbiAgc2V0cjogKGwsIGkxLCBpMiwgbykgPT4gYGNhc2UgJHtsfTogciR7b30gPSByJHtpMX07IGJyZWFrO2AsXG4gIHNldGk6IChsLCBpMSwgaTIsIG8pID0+IGBjYXNlICR7bH06IHIke299ID0gJHtpMX07IGJyZWFrO2AsXG4gIGd0aXI6IChsLCBpMSwgaTIsIG8pID0+IGBjYXNlICR7bH06IHIke299ID0gJHtpMX0gPiByJHtpMn0gPyAxIDogMDsgYnJlYWs7YCxcbiAgZ3RyaTogKGwsIGkxLCBpMiwgbykgPT4gYGNhc2UgJHtsfTogciR7b30gPSByJHtpMX0gPiAke2kyfSA/IDEgOiAwOyBicmVhaztgLFxuICBndHJyOiAobCwgaTEsIGkyLCBvKSA9PiBgY2FzZSAke2x9OiByJHtvfSA9IHIke2kxfSA+IHIke2kyfSA/IDEgOiAwOyBicmVhaztgLFxuICBlcWlyOiAobCwgaTEsIGkyLCBvKSA9PiBgY2FzZSAke2x9OiByJHtvfSA9ICR7aTF9ID09PSByJHtpMn0gPyAxIDogMDsgYnJlYWs7YCxcbiAgZXFyaTogKGwsIGkxLCBpMiwgbykgPT4gYGNhc2UgJHtsfTogciR7b30gPSByJHtpMX0gPT09ICR7aTJ9ID8gMSA6IDA7IGJyZWFrO2AsXG4gIGVxcnI6IChsLCBpMSwgaTIsIG8pID0+IHtcbiAgICBpZiAoaTEgPT09ICcwJykge1xuICAgICAgcmV0dXJuIGBjYXNlICR7bH06IHIke299ID0gY2IociR7aTJ9KSA9PT0gciR7aTJ9ID8gMSA6IDA7IGJyZWFrO2A7XG4gICAgfSBlbHNlIGlmIChpMiA9PT0gJzAnKSB7XG4gICAgICByZXR1cm4gYGNhc2UgJHtsfTogciR7b30gPSByJHtpMX0gPT09IGNiKHIke2kxfSkgPyAxIDogMDsgYnJlYWs7YDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGBjYXNlICR7bH06IHIke299ID0gciR7aTF9ID09PSByJHtpMn0gPyAxIDogMDsgYnJlYWs7YDtcbiAgICB9XG4gIH0sXG59O1xuXG5mdW5jdGlvbiBydW4oaW5wdXQsIHRhcCwgY2IpIHtcbiAgY29uc3QgbGluZXMgPSBpbnB1dC5zcGxpdCgnXFxuJyk7XG4gIGNvbnN0IGlwID0gcGFyc2VJbnQoXG4gICAgbGluZXNcbiAgICAgIC5zaGlmdCgpXG4gICAgICAuc3BsaXQoJyAnKVxuICAgICAgLnBvcCgpLFxuICApO1xuICBjb25zdCBjb21tYW5kcyA9IGxpbmVzLm1hcCgoeCwgaSkgPT4ge1xuICAgIGNvbnN0IFtvcCwgLi4ucGFyYW1zXSA9IHguc3BsaXQoJyAnKTtcbiAgICByZXR1cm4gb3BzW29wXShpLCAuLi5wYXJhbXMpO1xuICB9KTtcbiAgY29uc3Qgc2NyaXB0ID0gYChjYikgPT4ge1xuICAgIGxldCByMCA9IDAsIHIxID0gMCwgcjIgPSAwLCByMyA9IDAsIHI0ID0gMCwgcjUgPSAwO1xuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBzd2l0Y2ggKHIke2lwfSkge1xuICAgICAgICAke2NvbW1hbmRzLmpvaW4oJ1xcbicpfVxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHIke2lwfSsrO1xuICAgIH1cbiAgfWA7XG4gIGNvbnN0IGV4ZWMgPSB2bS5ydW5JblRoaXNDb250ZXh0KHNjcmlwdCk7XG4gIHJldHVybiBleGVjKHRhcCwgY2IpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDEoaW5wdXQpIHtcbiAgbGV0IHJlc3VsdDtcbiAgcnVuKGlucHV0LCByID0+IChyZXN1bHQgPSByKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MihpbnB1dCkge1xuICBsZXQgcHJldjtcbiAgY29uc3QgYWxsID0gbmV3IFNldCgpO1xuICBydW4oaW5wdXQsIHIgPT4gKGFsbC5oYXMocikgPyByIDogYWxsLmFkZCgocHJldiA9IHIpKSAmJiB1bmRlZmluZWQpKTtcbiAgcmV0dXJuIHByZXY7XG59XG4iXX0=