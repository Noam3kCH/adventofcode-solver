358eb842cf9161143620150717569f90
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

var _day = require("./day18.js");

function parseDebug(input, debug) {
  return (0, _day.parse)(input, {
    sub: (p1, p2) => state => state[p1] = (0, _day.getter)(state, p1) - (0, _day.getter)(state, p2),
    jnz: (p1, p2) => state => (0, _day.getter)(state, p1) !== 0 ? state.instruction += (0, _day.getter)(state, p2) - 1 : null
  }, debug);
}

function part1(input) {
  const debug = {};
  const commands = parseDebug(input, x => debug[x] = (debug[x] || 0) + 1);
  const state = {
    instruction: 0
  };

  while (state.instruction < commands.length) {
    commands[state.instruction](state);
    state.instruction++;
  }

  return debug.mul;
}

function isPrime(num) {
  const sqrt = Math.floor(Math.sqrt(num));

  for (let i = 2; i < sqrt + 1; i++) {
    if (num % i === 0) {
      return false;
    }
  }

  return true;
}

function part2(input) {
  const num = parseInt(input.split('\n').shift().split(' ').pop(), 10) * 100 + 1e5;
  let count = 0;

  for (let i = 0; i <= 17000; i += 17) {
    if (!isPrime(num + i)) {
      count++;
    }
  }

  return count;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTIzLmpzIl0sIm5hbWVzIjpbInBhcnNlRGVidWciLCJpbnB1dCIsImRlYnVnIiwic3ViIiwicDEiLCJwMiIsInN0YXRlIiwiam56IiwiaW5zdHJ1Y3Rpb24iLCJwYXJ0MSIsImNvbW1hbmRzIiwieCIsImxlbmd0aCIsIm11bCIsImlzUHJpbWUiLCJudW0iLCJzcXJ0IiwiTWF0aCIsImZsb29yIiwiaSIsInBhcnQyIiwicGFyc2VJbnQiLCJzcGxpdCIsInNoaWZ0IiwicG9wIiwiY291bnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7O0FBRUEsU0FBU0EsVUFBVCxDQUFvQkMsS0FBcEIsRUFBMkJDLEtBQTNCLEVBQWtDO0FBQ2hDLFNBQU8sZ0JBQ0xELEtBREssRUFFTDtBQUNFRSxJQUFBQSxHQUFHLEVBQUUsQ0FBQ0MsRUFBRCxFQUFLQyxFQUFMLEtBQVlDLEtBQUssSUFDbkJBLEtBQUssQ0FBQ0YsRUFBRCxDQUFMLEdBQVksaUJBQU9FLEtBQVAsRUFBY0YsRUFBZCxJQUFvQixpQkFBT0UsS0FBUCxFQUFjRCxFQUFkLENBRnJDO0FBR0VFLElBQUFBLEdBQUcsRUFBRSxDQUFDSCxFQUFELEVBQUtDLEVBQUwsS0FBWUMsS0FBSyxJQUNwQixpQkFBT0EsS0FBUCxFQUFjRixFQUFkLE1BQXNCLENBQXRCLEdBQ0tFLEtBQUssQ0FBQ0UsV0FBTixJQUFxQixpQkFBT0YsS0FBUCxFQUFjRCxFQUFkLElBQW9CLENBRDlDLEdBRUk7QUFOUixHQUZLLEVBVUxILEtBVkssQ0FBUDtBQVlEOztBQUVNLFNBQVNPLEtBQVQsQ0FBZVIsS0FBZixFQUFzQjtBQUMzQixRQUFNQyxLQUFLLEdBQUcsRUFBZDtBQUNBLFFBQU1RLFFBQVEsR0FBR1YsVUFBVSxDQUFDQyxLQUFELEVBQVFVLENBQUMsSUFBS1QsS0FBSyxDQUFDUyxDQUFELENBQUwsR0FBVyxDQUFDVCxLQUFLLENBQUNTLENBQUQsQ0FBTCxJQUFZLENBQWIsSUFBa0IsQ0FBM0MsQ0FBM0I7QUFDQSxRQUFNTCxLQUFLLEdBQUc7QUFBRUUsSUFBQUEsV0FBVyxFQUFFO0FBQWYsR0FBZDs7QUFDQSxTQUFPRixLQUFLLENBQUNFLFdBQU4sR0FBb0JFLFFBQVEsQ0FBQ0UsTUFBcEMsRUFBNEM7QUFDMUNGLElBQUFBLFFBQVEsQ0FBQ0osS0FBSyxDQUFDRSxXQUFQLENBQVIsQ0FBNEJGLEtBQTVCO0FBQ0FBLElBQUFBLEtBQUssQ0FBQ0UsV0FBTjtBQUNEOztBQUNELFNBQU9OLEtBQUssQ0FBQ1csR0FBYjtBQUNEOztBQUVELFNBQVNDLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQXNCO0FBQ3BCLFFBQU1DLElBQUksR0FBR0MsSUFBSSxDQUFDQyxLQUFMLENBQVdELElBQUksQ0FBQ0QsSUFBTCxDQUFVRCxHQUFWLENBQVgsQ0FBYjs7QUFDQSxPQUFLLElBQUlJLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdILElBQUksR0FBRyxDQUEzQixFQUE4QkcsQ0FBQyxFQUEvQixFQUFtQztBQUNqQyxRQUFJSixHQUFHLEdBQUdJLENBQU4sS0FBWSxDQUFoQixFQUFtQjtBQUNqQixhQUFPLEtBQVA7QUFDRDtBQUNGOztBQUNELFNBQU8sSUFBUDtBQUNEOztBQUVNLFNBQVNDLEtBQVQsQ0FBZW5CLEtBQWYsRUFBc0I7QUFDM0IsUUFBTWMsR0FBRyxHQUNQTSxRQUFRLENBQ05wQixLQUFLLENBQ0ZxQixLQURILENBQ1MsSUFEVCxFQUVHQyxLQUZILEdBR0dELEtBSEgsQ0FHUyxHQUhULEVBSUdFLEdBSkgsRUFETSxFQU1OLEVBTk0sQ0FBUixHQVFFLEdBUkYsR0FTQSxHQVZGO0FBV0EsTUFBSUMsS0FBSyxHQUFHLENBQVo7O0FBQ0EsT0FBSyxJQUFJTixDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxJQUFJLEtBQXJCLEVBQTRCQSxDQUFDLElBQUksRUFBakMsRUFBcUM7QUFDbkMsUUFBSSxDQUFDTCxPQUFPLENBQUNDLEdBQUcsR0FBR0ksQ0FBUCxDQUFaLEVBQXVCO0FBQ3JCTSxNQUFBQSxLQUFLO0FBQ047QUFDRjs7QUFDRCxTQUFPQSxLQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZSwgZ2V0dGVyIH0gZnJvbSAnLi9kYXkxOC5qcyc7XG5cbmZ1bmN0aW9uIHBhcnNlRGVidWcoaW5wdXQsIGRlYnVnKSB7XG4gIHJldHVybiBwYXJzZShcbiAgICBpbnB1dCxcbiAgICB7XG4gICAgICBzdWI6IChwMSwgcDIpID0+IHN0YXRlID0+XG4gICAgICAgIChzdGF0ZVtwMV0gPSBnZXR0ZXIoc3RhdGUsIHAxKSAtIGdldHRlcihzdGF0ZSwgcDIpKSxcbiAgICAgIGpuejogKHAxLCBwMikgPT4gc3RhdGUgPT5cbiAgICAgICAgZ2V0dGVyKHN0YXRlLCBwMSkgIT09IDBcbiAgICAgICAgICA/IChzdGF0ZS5pbnN0cnVjdGlvbiArPSBnZXR0ZXIoc3RhdGUsIHAyKSAtIDEpXG4gICAgICAgICAgOiBudWxsLFxuICAgIH0sXG4gICAgZGVidWcsXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MShpbnB1dCkge1xuICBjb25zdCBkZWJ1ZyA9IHt9O1xuICBjb25zdCBjb21tYW5kcyA9IHBhcnNlRGVidWcoaW5wdXQsIHggPT4gKGRlYnVnW3hdID0gKGRlYnVnW3hdIHx8IDApICsgMSkpO1xuICBjb25zdCBzdGF0ZSA9IHsgaW5zdHJ1Y3Rpb246IDAgfTtcbiAgd2hpbGUgKHN0YXRlLmluc3RydWN0aW9uIDwgY29tbWFuZHMubGVuZ3RoKSB7XG4gICAgY29tbWFuZHNbc3RhdGUuaW5zdHJ1Y3Rpb25dKHN0YXRlKTtcbiAgICBzdGF0ZS5pbnN0cnVjdGlvbisrO1xuICB9XG4gIHJldHVybiBkZWJ1Zy5tdWw7XG59XG5cbmZ1bmN0aW9uIGlzUHJpbWUobnVtKSB7XG4gIGNvbnN0IHNxcnQgPSBNYXRoLmZsb29yKE1hdGguc3FydChudW0pKTtcbiAgZm9yIChsZXQgaSA9IDI7IGkgPCBzcXJ0ICsgMTsgaSsrKSB7XG4gICAgaWYgKG51bSAlIGkgPT09IDApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MihpbnB1dCkge1xuICBjb25zdCBudW0gPVxuICAgIHBhcnNlSW50KFxuICAgICAgaW5wdXRcbiAgICAgICAgLnNwbGl0KCdcXG4nKVxuICAgICAgICAuc2hpZnQoKVxuICAgICAgICAuc3BsaXQoJyAnKVxuICAgICAgICAucG9wKCksXG4gICAgICAxMCxcbiAgICApICpcbiAgICAgIDEwMCArXG4gICAgMWU1O1xuICBsZXQgY291bnQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8PSAxNzAwMDsgaSArPSAxNykge1xuICAgIGlmICghaXNQcmltZShudW0gKyBpKSkge1xuICAgICAgY291bnQrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvdW50O1xufVxuIl19