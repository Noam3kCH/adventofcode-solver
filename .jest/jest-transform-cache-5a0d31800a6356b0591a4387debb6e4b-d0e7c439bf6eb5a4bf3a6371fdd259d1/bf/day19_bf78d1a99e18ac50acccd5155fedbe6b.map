{"version":3,"sources":["day19.js"],"names":["parse","input","split","map","line","findEntryPoint","route","x","indexOf","y","next","down","up","left","right","valueAt","road","value","direction","roads","undefined","includes","walk","state","point","message","steps","match","part1","part2"],"mappings":"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","sourcesContent":["function parse(input) {\n  return input.split('\\n').map(line => line.split(''));\n}\n\nfunction findEntryPoint(route) {\n  return { x: route[0].indexOf('|'), y: 0 };\n}\n\nconst next = {\n  down: ({ x, y }) => ({ x, y: y + 1 }),\n  up: ({ x, y }) => ({ x, y: y - 1 }),\n  left: ({ x, y }) => ({ x: x - 1, y }),\n  right: ({ x, y }) => ({ x: x + 1, y }),\n};\n\nfunction valueAt(route, { x, y }) {\n  return route[y] && route[y][x];\n}\n\nfunction road(value, direction) {\n  const roads = { right: '|', left: '|', up: '-', down: '-' };\n  return !['.', ' ', undefined, roads[direction]].includes(value);\n}\n\nfunction walk(route) {\n  const state = {\n    point: findEntryPoint(route),\n    direction: 'down',\n    message: '',\n    steps: 0,\n  };\n  while (state.direction !== 'done') {\n    if (valueAt(route, state.point) === '+') {\n      if (state.direction === 'down' || state.direction === 'up') {\n        if (road(valueAt(route, next.right(state.point)), 'right')) {\n          state.direction = 'right';\n        } else {\n          state.direction = 'left';\n        }\n      } else {\n        if (road(valueAt(route, next.up(state.point)), 'up')) {\n          state.direction = 'up';\n        } else {\n          state.direction = 'down';\n        }\n      }\n    }\n    if (valueAt(route, state.point).match(/[A-Z]/)) {\n      state.message += valueAt(route, state.point);\n    }\n    if (!road(valueAt(route, next[state.direction](state.point)))) {\n      state.direction = 'done';\n    } else {\n      state.point = next[state.direction](state.point);\n    }\n    state.steps++;\n  }\n  return state;\n}\n\nexport function part1(input) {\n  return walk(parse(input)).message;\n}\n\nexport function part2(input) {\n  return walk(parse(input)).steps;\n}\n"]}