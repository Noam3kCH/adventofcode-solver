c275410c8ac455c147dcc9ec54126e2a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function parse(input) {
  return input.split('\n').map(line => line.split(''));
}

function findEntryPoint(route) {
  return {
    x: route[0].indexOf('|'),
    y: 0
  };
}

const next = {
  down: ({
    x,
    y
  }) => ({
    x,
    y: y + 1
  }),
  up: ({
    x,
    y
  }) => ({
    x,
    y: y - 1
  }),
  left: ({
    x,
    y
  }) => ({
    x: x - 1,
    y
  }),
  right: ({
    x,
    y
  }) => ({
    x: x + 1,
    y
  })
};

function valueAt(route, {
  x,
  y
}) {
  return route[y] && route[y][x];
}

function road(value, direction) {
  const roads = {
    right: '|',
    left: '|',
    up: '-',
    down: '-'
  };
  return !['.', ' ', undefined, roads[direction]].includes(value);
}

function walk(route) {
  const state = {
    point: findEntryPoint(route),
    direction: 'down',
    message: '',
    steps: 0
  };

  while (state.direction !== 'done') {
    if (valueAt(route, state.point) === '+') {
      if (state.direction === 'down' || state.direction === 'up') {
        if (road(valueAt(route, next.right(state.point)), 'right')) {
          state.direction = 'right';
        } else {
          state.direction = 'left';
        }
      } else {
        if (road(valueAt(route, next.up(state.point)), 'up')) {
          state.direction = 'up';
        } else {
          state.direction = 'down';
        }
      }
    }

    if (valueAt(route, state.point).match(/[A-Z]/)) {
      state.message += valueAt(route, state.point);
    }

    if (!road(valueAt(route, next[state.direction](state.point)))) {
      state.direction = 'done';
    } else {
      state.point = next[state.direction](state.point);
    }

    state.steps++;
  }

  return state;
}

function part1(input) {
  return walk(parse(input)).message;
}

function part2(input) {
  return walk(parse(input)).steps;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE5LmpzIl0sIm5hbWVzIjpbInBhcnNlIiwiaW5wdXQiLCJzcGxpdCIsIm1hcCIsImxpbmUiLCJmaW5kRW50cnlQb2ludCIsInJvdXRlIiwieCIsImluZGV4T2YiLCJ5IiwibmV4dCIsImRvd24iLCJ1cCIsImxlZnQiLCJyaWdodCIsInZhbHVlQXQiLCJyb2FkIiwidmFsdWUiLCJkaXJlY3Rpb24iLCJyb2FkcyIsInVuZGVmaW5lZCIsImluY2x1ZGVzIiwid2FsayIsInN0YXRlIiwicG9pbnQiLCJtZXNzYWdlIiwic3RlcHMiLCJtYXRjaCIsInBhcnQxIiwicGFydDIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsU0FBU0EsS0FBVCxDQUFlQyxLQUFmLEVBQXNCO0FBQ3BCLFNBQU9BLEtBQUssQ0FBQ0MsS0FBTixDQUFZLElBQVosRUFBa0JDLEdBQWxCLENBQXNCQyxJQUFJLElBQUlBLElBQUksQ0FBQ0YsS0FBTCxDQUFXLEVBQVgsQ0FBOUIsQ0FBUDtBQUNEOztBQUVELFNBQVNHLGNBQVQsQ0FBd0JDLEtBQXhCLEVBQStCO0FBQzdCLFNBQU87QUFBRUMsSUFBQUEsQ0FBQyxFQUFFRCxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVNFLE9BQVQsQ0FBaUIsR0FBakIsQ0FBTDtBQUE0QkMsSUFBQUEsQ0FBQyxFQUFFO0FBQS9CLEdBQVA7QUFDRDs7QUFFRCxNQUFNQyxJQUFJLEdBQUc7QUFDWEMsRUFBQUEsSUFBSSxFQUFFLENBQUM7QUFBRUosSUFBQUEsQ0FBRjtBQUFLRSxJQUFBQTtBQUFMLEdBQUQsTUFBZTtBQUFFRixJQUFBQSxDQUFGO0FBQUtFLElBQUFBLENBQUMsRUFBRUEsQ0FBQyxHQUFHO0FBQVosR0FBZixDQURLO0FBRVhHLEVBQUFBLEVBQUUsRUFBRSxDQUFDO0FBQUVMLElBQUFBLENBQUY7QUFBS0UsSUFBQUE7QUFBTCxHQUFELE1BQWU7QUFBRUYsSUFBQUEsQ0FBRjtBQUFLRSxJQUFBQSxDQUFDLEVBQUVBLENBQUMsR0FBRztBQUFaLEdB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RCxPQUFPLENBQUNULEtBQUQsRUFBUUksSUFBSSxDQUFDYSxLQUFLLENBQUNMLFNBQVAsQ0FBSixDQUFzQkssS0FBSyxDQUFDQyxLQUE1QixDQUFSLENBQVIsQ0FBVCxFQUErRDtBQUM3REQsTUFBQUEsS0FBSyxDQUFDTCxTQUFOLEdBQWtCLE1BQWxCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xLLE1BQUFBLEtBQUssQ0FBQ0MsS0FBTixHQUFjZCxJQUFJLENBQUNhLEtBQUssQ0FBQ0wsU0FBUCxDQUFKLENBQXNCSyxLQUFLLENBQUNDLEtBQTVCLENBQWQ7QUFDRDs7QUFDREQsSUFBQUEsS0FBSyxDQUFDRyxLQUFOO0FBQ0Q7O0FBQ0QsU0FBT0gsS0FBUDtBQUNEOztBQUVNLFNBQVNLLEtBQVQsQ0FBZTNCLEtBQWYsRUFBc0I7QUFDM0IsU0FBT3FCLElBQUksQ0FBQ3RCLEtBQUssQ0FBQ0MsS0FBRCxDQUFOLENBQUosQ0FBbUJ3QixPQUExQjtBQUNEOztBQUVNLFNBQVNJLEtBQVQsQ0FBZTVCLEtBQWYsRUFBc0I7QUFDM0IsU0FBT3FCLElBQUksQ0FBQ3RCLEtBQUssQ0FBQ0MsS0FBRCxDQUFOLENBQUosQ0FBbUJ5QixLQUExQjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnNwbGl0KCdcXG4nKS5tYXAobGluZSA9PiBsaW5lLnNwbGl0KCcnKSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRFbnRyeVBvaW50KHJvdXRlKSB7XG4gIHJldHVybiB7IHg6IHJvdXRlWzBdLmluZGV4T2YoJ3wnKSwgeTogMCB9O1xufVxuXG5jb25zdCBuZXh0ID0ge1xuICBkb3duOiAoeyB4LCB5IH0pID0+ICh7IHgsIHk6IHkgKyAxIH0pLFxuICB1cDogKHsgeCwgeSB9KSA9PiAoeyB4LCB5OiB5IC0gMSB9KSxcbiAgbGVmdDogKHsgeCwgeSB9KSA9PiAoeyB4OiB4IC0gMSwgeSB9KSxcbiAgcmlnaHQ6ICh7IHgsIHkgfSkgPT4gKHsgeDogeCArIDEsIHkgfSksXG59O1xuXG5mdW5jdGlvbiB2YWx1ZUF0KHJvdXRlLCB7IHgsIHkgfSkge1xuICByZXR1cm4gcm91dGVbeV0gJiYgcm91dGVbeV1beF07XG59XG5cbmZ1bmN0aW9uIHJvYWQodmFsdWUsIGRpcmVjdGlvbikge1xuICBjb25zdCByb2FkcyA9IHsgcmlnaHQ6ICd8JywgbGVmdDogJ3wnLCB1cDogJy0nLCBkb3duOiAnLScgfTtcbiAgcmV0dXJuICFbJy4nLCAnICcsIHVuZGVmaW5lZCwgcm9hZHNbZGlyZWN0aW9uXV0uaW5jbHVkZXModmFsdWUpO1xufVxuXG5mdW5jdGlvbiB3YWxrKHJvdXRlKSB7XG4gIGNvbnN0IHN0YXRlID0ge1xuICAgIHBvaW50OiBmaW5kRW50cnlQb2ludChyb3V0ZSksXG4gICAgZGlyZWN0aW9uOiAnZG93bicsXG4gICAgbWVzc2FnZTogJycsXG4gICAgc3RlcHM6IDAsXG4gIH07XG4gIHdoaWxlIChzdGF0ZS5kaXJlY3Rpb24gIT09ICdkb25lJykge1xuICAgIGlmICh2YWx1ZUF0KHJvdXRlLCBzdGF0ZS5wb2ludCkgPT09ICcrJykge1xuICAgICAgaWYgKHN0YXRlLmRpcmVjdGlvbiA9PT0gJ2Rvd24nIHx8IHN0YXRlLmRpcmVjdGlvbiA9PT0gJ3VwJykge1xuICAgICAgICBpZiAocm9hZCh2YWx1ZUF0KHJvdXRlLCBuZXh0LnJpZ2h0KHN0YXRlLnBvaW50KSksICdyaWdodCcpKSB7XG4gICAgICAgICAgc3RhdGUuZGlyZWN0aW9uID0gJ3JpZ2h0JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzdGF0ZS5kaXJlY3Rpb24gPSAnbGVmdCc7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChyb2FkKHZhbHVlQXQocm91dGUsIG5leHQudXAoc3RhdGUucG9pbnQpKSwgJ3VwJykpIHtcbiAgICAgICAgICBzdGF0ZS5kaXJlY3Rpb24gPSAndXAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlLmRpcmVjdGlvbiA9ICdkb3duJztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodmFsdWVBdChyb3V0ZSwgc3RhdGUucG9pbnQpLm1hdGNoKC9bQS1aXS8pKSB7XG4gICAgICBzdGF0ZS5tZXNzYWdlICs9IHZhbHVlQXQocm91dGUsIHN0YXRlLnBvaW50KTtcbiAgICB9XG4gICAgaWYgKCFyb2FkKHZhbHVlQXQocm91dGUsIG5leHRbc3RhdGUuZGlyZWN0aW9uXShzdGF0ZS5wb2ludCkpKSkge1xuICAgICAgc3RhdGUuZGlyZWN0aW9uID0gJ2RvbmUnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5wb2ludCA9IG5leHRbc3RhdGUuZGlyZWN0aW9uXShzdGF0ZS5wb2ludCk7XG4gICAgfVxuICAgIHN0YXRlLnN0ZXBzKys7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDEoaW5wdXQpIHtcbiAgcmV0dXJuIHdhbGsocGFyc2UoaW5wdXQpKS5tZXNzYWdlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDIoaW5wdXQpIHtcbiAgcmV0dXJuIHdhbGsocGFyc2UoaW5wdXQpKS5zdGVwcztcbn1cbiJdfQ==