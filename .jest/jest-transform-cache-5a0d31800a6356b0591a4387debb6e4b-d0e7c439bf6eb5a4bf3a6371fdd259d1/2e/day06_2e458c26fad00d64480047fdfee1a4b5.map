{"version":3,"sources":["day06.js"],"names":["solve","input","split","map","x","reduce","commons","word","c","i","occurrences","Object","keys","letter","times","sort","a","b","part1","shift","join","part2","pop"],"mappings":";;;;;;;AAAA,SAASA,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOA,KAAK,CACTC,KADI,CACE,IADF,EAEJC,GAFI,CAEAC,CAAC,IAAIA,CAAC,CAACF,KAAF,CAAQ,EAAR,CAFL,EAGJG,MAHI,CAGG,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACzB,WAAOA,IAAI,CAACJ,GAAL,CAAS,CAACK,CAAD,EAAIC,CAAJ,KAAU;AACxBH,MAAAA,OAAO,CAACG,CAAD,CAAP,GAAaH,OAAO,CAACG,CAAD,CAAP,IAAc,EAA3B;AACAH,MAAAA,OAAO,CAACG,CAAD,CAAP,GAAa,EAAE,GAAGH,OAAO,CAACG,CAAD,CAAZ;AAAiB,SAACD,CAAD,GAAK,CAACF,OAAO,CAACG,CAAD,CAAP,CAAWD,CAAX,KAAiB,CAAlB,IAAuB;AAA7C,OAAb;AACA,aAAOF,OAAO,CAACG,CAAD,CAAd;AACD,KAJM,CAAP;AAKD,GATI,EASF,EATE,EAUJN,GAVI,CAUAO,WAAW,IAAI;AAClB,WAAOC,MAAM,CAACC,IAAP,CAAYF,WAAZ,EACJP,GADI,CACAC,CAAC,KAAK;AAAES,MAAAA,MAAM,EAAET,CAAV;AAAaU,MAAAA,KAAK,EAAEJ,WAAW,CAACN,CAAD;AAA/B,KAAL,CADD,EAEJW,IAFI,CAEC,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACH,KAAF,GAAUE,CAAC,CAACF,KAFvB,EAGJX,GAHI,CAGAC,CAAC,IAAIA,CAAC,CAACS,MAHP,CAAP;AAID,GAfI,CAAP;AAgBD;;AAEM,MAAMK,KAAK,GAAGjB,KAAK,IACxBD,KAAK,CAACC,KAAD,CAAL,CACGE,GADH,CACOC,CAAC,IAAIA,CAAC,CAACe,KAAF,EADZ,EAEGC,IAFH,CAEQ,EAFR,CADK;;;;AAIA,MAAMC,KAAK,GAAGpB,KAAK,IACxBD,KAAK,CAACC,KAAD,CAAL,CACGE,GADH,CACOC,CAAC,IAAIA,CAAC,CAACkB,GAAF,EADZ,EAEGF,IAFH,CAEQ,EAFR,CADK","sourcesContent":["function solve(input) {\n  return input\n    .split('\\n')\n    .map(x => x.split(''))\n    .reduce((commons, word) => {\n      return word.map((c, i) => {\n        commons[i] = commons[i] || {};\n        commons[i] = { ...commons[i], [c]: (commons[i][c] || 0) + 1 };\n        return commons[i];\n      });\n    }, [])\n    .map(occurrences => {\n      return Object.keys(occurrences)\n        .map(x => ({ letter: x, times: occurrences[x] }))\n        .sort((a, b) => b.times - a.times)\n        .map(x => x.letter);\n    });\n}\n\nexport const part1 = input =>\n  solve(input)\n    .map(x => x.shift())\n    .join('');\nexport const part2 = input =>\n  solve(input)\n    .map(x => x.pop())\n    .join('');\n"]}