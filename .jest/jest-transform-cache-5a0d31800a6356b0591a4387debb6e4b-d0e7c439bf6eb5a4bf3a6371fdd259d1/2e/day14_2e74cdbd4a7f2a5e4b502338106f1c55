550b0e5157b9b843893a14e1de919e0a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part2 = exports.part1 = void 0;

var _md = _interopRequireDefault(require("../utils/md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function findRepeatingCharacters(str, num) {
  return (str.match(new RegExp(`(.)\\1{${num - 1}}`, 'g')) || []).map(x => x[0]);
}

function generateKeys(input, hashFn) {
  const keys = [],
        window = [],
        characters = {};

  for (let i = 0; keys.length < 64; i++) {
    const str = hashFn(`${input}${i}`);
    findRepeatingCharacters(str, 5).forEach(x => characters[x] = (characters[x] || []).concat([i]));

    if (i >= 1000) {
      const digit = findRepeatingCharacters(window.shift(), 3).shift();
      const index = digit !== undefined && characters[digit] && characters[digit].find(x => x > i - 1000);

      if (index) {
        keys.push(i - 1000);
      }
    }

    window.push(str);
  }

  return keys;
}

function md5times(str, count) {
  while (count > 0) {
    str = (0, _md.default)(str);
    count--;
  }

  return str;
}

const part1 = input => generateKeys(input, x => md5times(x, 1)).pop();

exports.part1 = part1;

const part2 = input => generateKeys(input, x => md5times(x, 2017)).pop();

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE0LmpzIl0sIm5hbWVzIjpbImZpbmRSZXBlYXRpbmdDaGFyYWN0ZXJzIiwic3RyIiwibnVtIiwibWF0Y2giLCJSZWdFeHAiLCJtYXAiLCJ4IiwiZ2VuZXJhdGVLZXlzIiwiaW5wdXQiLCJoYXNoRm4iLCJrZXlzIiwid2luZG93IiwiY2hhcmFjdGVycyIsImkiLCJsZW5ndGgiLCJmb3JFYWNoIiwiY29uY2F0IiwiZGlnaXQiLCJzaGlmdCIsImluZGV4IiwidW5kZWZpbmVkIiwiZmluZCIsInB1c2giLCJtZDV0aW1lcyIsImNvdW50IiwicGFydDEiLCJwb3AiLCJwYXJ0MiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOzs7O0FBRUEsU0FBU0EsdUJBQVQsQ0FBaUNDLEdBQWpDLEVBQXNDQyxHQUF0QyxFQUEyQztBQUN6QyxTQUFPLENBQUNELEdBQUcsQ0FBQ0UsS0FBSixDQUFVLElBQUlDLE1BQUosQ0FBWSxVQUFTRixHQUFHLEdBQUcsQ0FBRSxHQUE3QixFQUFpQyxHQUFqQyxDQUFWLEtBQW9ELEVBQXJELEVBQXlERyxHQUF6RCxDQUNMQyxDQUFDLElBQUlBLENBQUMsQ0FBQyxDQUFELENBREQsQ0FBUDtBQUdEOztBQUVELFNBQVNDLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCQyxNQUE3QixFQUFxQztBQUNuQyxRQUFNQyxJQUFJLEdBQUcsRUFBYjtBQUFBLFFBQ0VDLE1BQU0sR0FBRyxFQURYO0FBQUEsUUFFRUMsVUFBVSxHQUFHLEVBRmY7O0FBR0EsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkgsSUFBSSxDQUFDSSxNQUFMLEdBQWMsRUFBOUIsRUFBa0NELENBQUMsRUFBbkMsRUFBdUM7QUFDckMsVUFBTVosR0FBRyxHQUFHUSxNQUFNLENBQUUsR0FBRUQsS0FBTSxHQUFFSyxDQUFFLEVBQWQsQ0FBbEI7QUFDQWIsSUFBQUEsdUJBQXVCLENBQUNDLEdBQUQsRUFBTSxDQUFOLENBQXZCLENBQWdDYyxPQUFoQyxDQUNFVCxDQUFDLElBQUtNLFVBQVUsQ0FBQ04sQ0FBRCxDQUFWLEdBQWdCLENBQUNNLFVBQVUsQ0FBQ04sQ0FBRCxDQUFWLElBQWlCLEVBQWxCLEVBQXNCVSxNQUF0QixDQUE2QixDQUFDSCxDQUFELENBQTdCLENBRHhCOztBQUdBLFFBQUlBLENBQUMsSUFBSSxJQUFULEVBQWU7QUFDYixZQUFNSSxLQUFLLEdBQUdqQix1QkFBdUIsQ0FBQ1csTUFBTSxDQUFDTyxLQUFQLEVBQUQsRUFBaUIsQ0FBakIsQ0FBdkIsQ0FBMkNBLEtBQTNDLEVBQWQ7QUFDQSxZQUFNQyxLQUFLLEdBQ1RGLEtBQUssS0FBS0csU0FBVixJQUNBUixVQUFVLENBQUNLLEtBQUQsQ0FEVixJQUVBTCxVQUFVLENBQUNLLEtBQUQsQ0FBVixDQUFrQkksSUFBbEIsQ0FBdUJmLENBQUMsSUFBSUEsQ0FBQyxHQUFHTyxDQUFDLEdBQUcsSUFBcEMsQ0FIRjs7QUFJQSxVQUFJTSxLQUFKLEVBQVc7QUFDVFQsUUFBQUEsSUFBSSxDQUFDWSxJQUFMLENBQVVULENBQUMsR0FBRyxJQUFkO0FBQ0Q7QUFDRjs7QUFDREYsSUFBQUEsTUFBTSxDQUFDVyxJQUFQLENBQVlyQixHQUFaO0FBQ0Q7O0FBQ0QsU0FBT1MsSUFBUDtBQUNEOztBQUVELFNBQVNhLFFBQVQsQ0FBa0J0QixHQUFsQixFQUF1QnVCLEtBQXZCLEVBQThCO0FBQzVCLFNBQU9BLEtBQUssR0FBRyxDQUFmLEVBQWtCO0FBQ2hCdkIsSUFBQUEsR0FBRyxHQUFHLGlCQUFJQSxHQUFKLENBQU47QUFDQXVCLElBQUFBLEtBQUs7QUFDTjs7QUFDRCxTQUFPdkIsR0FBUDtBQUNEOztBQUVNLE1BQU13QixLQUFLLEdBQUdqQixLQUFLLElBQUlELFlBQVksQ0FBQ0MsS0FBRCxFQUFRRixDQUFDLElBQUlpQixRQUFRLENBQUNqQixDQUFELEVBQUksQ0FBSixDQUFyQixDQUFaLENBQXlDb0IsR0FBekMsRUFBdkI7Ozs7QUFDQSxNQUFNQyxLQUFLLEdBQUduQixLQUFLLElBQUlELFlBQVksQ0FBQ0MsS0FBRCxFQUFRRixDQUFDLElBQUlpQixRQUFRLENBQUNqQixDQUFELEVBQUksSUFBSixDQUFyQixDQUFaLENBQTRDb0IsR0FBNUMsRUFBdkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWQ1IGZyb20gJy4uL3V0aWxzL21kNS5qcyc7XG5cbmZ1bmN0aW9uIGZpbmRSZXBlYXRpbmdDaGFyYWN0ZXJzKHN0ciwgbnVtKSB7XG4gIHJldHVybiAoc3RyLm1hdGNoKG5ldyBSZWdFeHAoYCguKVxcXFwxeyR7bnVtIC0gMX19YCwgJ2cnKSkgfHwgW10pLm1hcChcbiAgICB4ID0+IHhbMF0sXG4gICk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlS2V5cyhpbnB1dCwgaGFzaEZuKSB7XG4gIGNvbnN0IGtleXMgPSBbXSxcbiAgICB3aW5kb3cgPSBbXSxcbiAgICBjaGFyYWN0ZXJzID0ge307XG4gIGZvciAobGV0IGkgPSAwOyBrZXlzLmxlbmd0aCA8IDY0OyBpKyspIHtcbiAgICBjb25zdCBzdHIgPSBoYXNoRm4oYCR7aW5wdXR9JHtpfWApO1xuICAgIGZpbmRSZXBlYXRpbmdDaGFyYWN0ZXJzKHN0ciwgNSkuZm9yRWFjaChcbiAgICAgIHggPT4gKGNoYXJhY3RlcnNbeF0gPSAoY2hhcmFjdGVyc1t4XSB8fCBbXSkuY29uY2F0KFtpXSkpLFxuICAgICk7XG4gICAgaWYgKGkgPj0gMTAwMCkge1xuICAgICAgY29uc3QgZGlnaXQgPSBmaW5kUmVwZWF0aW5nQ2hhcmFjdGVycyh3aW5kb3cuc2hpZnQoKSwgMykuc2hpZnQoKTtcbiAgICAgIGNvbnN0IGluZGV4ID1cbiAgICAgICAgZGlnaXQgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICBjaGFyYWN0ZXJzW2RpZ2l0XSAmJlxuICAgICAgICBjaGFyYWN0ZXJzW2RpZ2l0XS5maW5kKHggPT4geCA+IGkgLSAxMDAwKTtcbiAgICAgIGlmIChpbmRleCkge1xuICAgICAgICBrZXlzLnB1c2goaSAtIDEwMDApO1xuICAgICAgfVxuICAgIH1cbiAgICB3aW5kb3cucHVzaChzdHIpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBtZDV0aW1lcyhzdHIsIGNvdW50KSB7XG4gIHdoaWxlIChjb3VudCA+IDApIHtcbiAgICBzdHIgPSBtZDUoc3RyKTtcbiAgICBjb3VudC0tO1xuICB9XG4gIHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCBjb25zdCBwYXJ0MSA9IGlucHV0ID0+IGdlbmVyYXRlS2V5cyhpbnB1dCwgeCA9PiBtZDV0aW1lcyh4LCAxKSkucG9wKCk7XG5leHBvcnQgY29uc3QgcGFydDIgPSBpbnB1dCA9PiBnZW5lcmF0ZUtleXMoaW5wdXQsIHggPT4gbWQ1dGltZXMoeCwgMjAxNykpLnBvcCgpO1xuIl19