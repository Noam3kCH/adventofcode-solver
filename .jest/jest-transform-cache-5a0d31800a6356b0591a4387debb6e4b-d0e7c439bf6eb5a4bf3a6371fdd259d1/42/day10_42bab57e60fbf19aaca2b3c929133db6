ccf0962b03fb922766051201223dfa19
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part2 = exports.part1 = void 0;

function step({
  chain,
  skip,
  current
}, length) {
  const currentIsFirst = chain.slice(current).concat(chain.slice(0, current));
  const lengthReversed = currentIsFirst.slice(0, length).reverse().concat(currentIsFirst.slice(length));
  const currentRotatedBack = lengthReversed.slice(-1 * current).concat(lengthReversed.slice(0, -1 * current));
  return {
    chain: currentRotatedBack,
    skip: skip + 1,
    current: (current + length + skip) % chain.length
  };
}

function solve(chain, lengths) {
  return lengths.reduce(step, {
    chain,
    skip: 0,
    current: 0
  });
}

function solve2(chain, lengths) {
  let result = {
    chain,
    skip: 0,
    current: 0
  };

  for (let i = 0; i < 64; i++) {
    result = lengths.reduce(step, result);
  }

  return result.chain;
}

function dense(arr) {
  /* eslint no-bitwise: "off" */
  const result = [];

  while (arr.length > 0) {
    result.push(arr.slice(0, 16).reduce((a, b) => a ^ b, 0));
    arr = arr.slice(16);
  }

  return result;
}

function encode(arr) {
  return arr.map(x => x.toString(16).padStart(2, '0')).join('');
}

function parse(input) {
  return input.split(',').map(x => parseInt(x));
}

function parse2(input) {
  return input.split('').map(x => x.charCodeAt(0)).concat([17, 31, 73, 47, 23]);
}

function list(size) {
  return new Array(size).fill().map((x, i) => i);
}

const part1 = (input, size = 256) => solve(list(size), parse(input)).chain.slice(0, 2).reduce((a, b) => a * b);

exports.part1 = part1;

const part2 = (input, size = 256) => encode(dense(solve2(list(size), parse2(input))));

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTEwLmpzIl0sIm5hbWVzIjpbInN0ZXAiLCJjaGFpbiIsInNraXAiLCJjdXJyZW50IiwibGVuZ3RoIiwiY3VycmVudElzRmlyc3QiLCJzbGljZSIsImNvbmNhdCIsImxlbmd0aFJldmVyc2VkIiwicmV2ZXJzZSIsImN1cnJlbnRSb3RhdGVkQmFjayIsInNvbHZlIiwibGVuZ3RocyIsInJlZHVjZSIsInNvbHZlMiIsInJlc3VsdCIsImkiLCJkZW5zZSIsImFyciIsInB1c2giLCJhIiwiYiIsImVuY29kZSIsIm1hcCIsIngiLCJ0b1N0cmluZyIsInBhZFN0YXJ0Iiwiam9pbiIsInBhcnNlIiwiaW5wdXQiLCJzcGxpdCIsInBhcnNlSW50IiwicGFyc2UyIiwiY2hhckNvZGVBdCIsImxpc3QiLCJzaXplIiwiQXJyYXkiLCJmaWxsIiwicGFydDEiLCJwYXJ0MiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLFNBQVNBLElBQVQsQ0FBYztBQUFFQyxFQUFBQSxLQUFGO0FBQVNDLEVBQUFBLElBQVQ7QUFBZUMsRUFBQUE7QUFBZixDQUFkLEVBQXdDQyxNQUF4QyxFQUFnRDtBQUM5QyxRQUFNQyxjQUFjLEdBQUdKLEtBQUssQ0FBQ0ssS0FBTixDQUFZSCxPQUFaLEVBQXFCSSxNQUFyQixDQUE0Qk4sS0FBSyxDQUFDSyxLQUFOLENBQVksQ0FBWixFQUFlSCxPQUFmLENBQTVCLENBQXZCO0FBQ0EsUUFBTUssY0FBYyxHQUFHSCxjQUFjLENBQ2xDQyxLQURvQixDQUNkLENBRGMsRUFDWEYsTUFEVyxFQUVwQkssT0FGb0IsR0FHcEJGLE1BSG9CLENBR2JGLGNBQWMsQ0FBQ0MsS0FBZixDQUFxQkYsTUFBckIsQ0FIYSxDQUF2QjtBQUlBLFFBQU1NLGtCQUFrQixHQUFHRixjQUFjLENBQ3RDRixLQUR3QixDQUNsQixDQUFDLENBQUQsR0FBS0gsT0FEYSxFQUV4QkksTUFGd0IsQ0FFakJDLGNBQWMsQ0FBQ0YsS0FBZixDQUFxQixDQUFyQixFQUF3QixDQUFDLENBQUQsR0FB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dUIsSUFBSSxDQUFDQyxJQUFELENBQUwsRUFBYVAsS0FBSyxDQUFDQyxLQUFELENBQWxCLENBQUwsQ0FDRzVCLEtBREgsQ0FDU0ssS0FEVCxDQUNlLENBRGYsRUFDa0IsQ0FEbEIsRUFFR08sTUFGSCxDQUVVLENBQUNPLENBQUQsRUFBSUMsQ0FBSixLQUFVRCxDQUFDLEdBQUdDLENBRnhCLENBREs7Ozs7QUFJQSxNQUFNa0IsS0FBSyxHQUFHLENBQUNWLEtBQUQsRUFBUU0sSUFBSSxHQUFHLEdBQWYsS0FDbkJiLE1BQU0sQ0FBQ0wsS0FBSyxDQUFDSCxNQUFNLENBQUNvQixJQUFJLENBQUNDLElBQUQsQ0FBTCxFQUFhSCxNQUFNLENBQUNILEtBQUQsQ0FBbkIsQ0FBUCxDQUFOLENBREQiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBzdGVwKHsgY2hhaW4sIHNraXAsIGN1cnJlbnQgfSwgbGVuZ3RoKSB7XG4gIGNvbnN0IGN1cnJlbnRJc0ZpcnN0ID0gY2hhaW4uc2xpY2UoY3VycmVudCkuY29uY2F0KGNoYWluLnNsaWNlKDAsIGN1cnJlbnQpKTtcbiAgY29uc3QgbGVuZ3RoUmV2ZXJzZWQgPSBjdXJyZW50SXNGaXJzdFxuICAgIC5zbGljZSgwLCBsZW5ndGgpXG4gICAgLnJldmVyc2UoKVxuICAgIC5jb25jYXQoY3VycmVudElzRmlyc3Quc2xpY2UobGVuZ3RoKSk7XG4gIGNvbnN0IGN1cnJlbnRSb3RhdGVkQmFjayA9IGxlbmd0aFJldmVyc2VkXG4gICAgLnNsaWNlKC0xICogY3VycmVudClcbiAgICAuY29uY2F0KGxlbmd0aFJldmVyc2VkLnNsaWNlKDAsIC0xICogY3VycmVudCkpO1xuICByZXR1cm4ge1xuICAgIGNoYWluOiBjdXJyZW50Um90YXRlZEJhY2ssXG4gICAgc2tpcDogc2tpcCArIDEsXG4gICAgY3VycmVudDogKGN1cnJlbnQgKyBsZW5ndGggKyBza2lwKSAlIGNoYWluLmxlbmd0aCxcbiAgfTtcbn1cblxuZnVuY3Rpb24gc29sdmUoY2hhaW4sIGxlbmd0aHMpIHtcbiAgcmV0dXJuIGxlbmd0aHMucmVkdWNlKHN0ZXAsIHsgY2hhaW4sIHNraXA6IDAsIGN1cnJlbnQ6IDAgfSk7XG59XG5cbmZ1bmN0aW9uIHNvbHZlMihjaGFpbiwgbGVuZ3Rocykge1xuICBsZXQgcmVzdWx0ID0geyBjaGFpbiwgc2tpcDogMCwgY3VycmVudDogMCB9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IDY0OyBpKyspIHtcbiAgICByZXN1bHQgPSBsZW5ndGhzLnJlZHVjZShzdGVwLCByZXN1bHQpO1xuICB9XG4gIHJldHVybiByZXN1bHQuY2hhaW47XG59XG5cbmZ1bmN0aW9uIGRlbnNlKGFycikge1xuICAvKiBlc2xpbnQgbm8tYml0d2lzZTogXCJvZmZcIiAqL1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKGFyci5sZW5ndGggPiAwKSB7XG4gICAgcmVzdWx0LnB1c2goYXJyLnNsaWNlKDAsIDE2KS5yZWR1Y2UoKGEsIGIpID0+IGEgXiBiLCAwKSk7XG4gICAgYXJyID0gYXJyLnNsaWNlKDE2KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBlbmNvZGUoYXJyKSB7XG4gIHJldHVybiBhcnIubWFwKHggPT4geC50b1N0cmluZygxNikucGFkU3RhcnQoMiwgJzAnKSkuam9pbignJyk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5zcGxpdCgnLCcpLm1hcCh4ID0+IHBhcnNlSW50KHgpKTtcbn1cblxuZnVuY3Rpb24gcGFyc2UyKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dFxuICAgIC5zcGxpdCgnJylcbiAgICAubWFwKHggPT4geC5jaGFyQ29kZUF0KDApKVxuICAgIC5jb25jYXQoWzE3LCAzMSwgNzMsIDQ3LCAyM10pO1xufVxuXG5mdW5jdGlvbiBsaXN0KHNpemUpIHtcbiAgcmV0dXJuIG5ldyBBcnJheShzaXplKS5maWxsKCkubWFwKCh4LCBpKSA9PiBpKTtcbn1cblxuZXhwb3J0IGNvbnN0IHBhcnQxID0gKGlucHV0LCBzaXplID0gMjU2KSA9PlxuICBzb2x2ZShsaXN0KHNpemUpLCBwYXJzZShpbnB1dCkpXG4gICAgLmNoYWluLnNsaWNlKDAsIDIpXG4gICAgLnJlZHVjZSgoYSwgYikgPT4gYSAqIGIpO1xuZXhwb3J0IGNvbnN0IHBhcnQyID0gKGlucHV0LCBzaXplID0gMjU2KSA9PlxuICBlbmNvZGUoZGVuc2Uoc29sdmUyKGxpc3Qoc2l6ZSksIHBhcnNlMihpbnB1dCkpKSk7XG4iXX0=