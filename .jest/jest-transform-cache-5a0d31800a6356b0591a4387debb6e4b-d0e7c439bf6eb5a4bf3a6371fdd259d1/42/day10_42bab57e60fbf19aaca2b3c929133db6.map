{"version":3,"sources":["day10.js"],"names":["step","chain","skip","current","length","currentIsFirst","slice","concat","lengthReversed","reverse","currentRotatedBack","solve","lengths","reduce","solve2","result","i","dense","arr","push","a","b","encode","map","x","toString","padStart","join","parse","input","split","parseInt","parse2","charCodeAt","list","size","Array","fill","part1","part2"],"mappings":"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","sourcesContent":["function step({ chain, skip, current }, length) {\n  const currentIsFirst = chain.slice(current).concat(chain.slice(0, current));\n  const lengthReversed = currentIsFirst\n    .slice(0, length)\n    .reverse()\n    .concat(currentIsFirst.slice(length));\n  const currentRotatedBack = lengthReversed\n    .slice(-1 * current)\n    .concat(lengthReversed.slice(0, -1 * current));\n  return {\n    chain: currentRotatedBack,\n    skip: skip + 1,\n    current: (current + length + skip) % chain.length,\n  };\n}\n\nfunction solve(chain, lengths) {\n  return lengths.reduce(step, { chain, skip: 0, current: 0 });\n}\n\nfunction solve2(chain, lengths) {\n  let result = { chain, skip: 0, current: 0 };\n  for (let i = 0; i < 64; i++) {\n    result = lengths.reduce(step, result);\n  }\n  return result.chain;\n}\n\nfunction dense(arr) {\n  /* eslint no-bitwise: \"off\" */\n  const result = [];\n  while (arr.length > 0) {\n    result.push(arr.slice(0, 16).reduce((a, b) => a ^ b, 0));\n    arr = arr.slice(16);\n  }\n  return result;\n}\n\nfunction encode(arr) {\n  return arr.map(x => x.toString(16).padStart(2, '0')).join('');\n}\n\nfunction parse(input) {\n  return input.split(',').map(x => parseInt(x));\n}\n\nfunction parse2(input) {\n  return input\n    .split('')\n    .map(x => x.charCodeAt(0))\n    .concat([17, 31, 73, 47, 23]);\n}\n\nfunction list(size) {\n  return new Array(size).fill().map((x, i) => i);\n}\n\nexport const part1 = (input, size = 256) =>\n  solve(list(size), parse(input))\n    .chain.slice(0, 2)\n    .reduce((a, b) => a * b);\nexport const part2 = (input, size = 256) =>\n  encode(dense(solve2(list(size), parse2(input))));\n"]}