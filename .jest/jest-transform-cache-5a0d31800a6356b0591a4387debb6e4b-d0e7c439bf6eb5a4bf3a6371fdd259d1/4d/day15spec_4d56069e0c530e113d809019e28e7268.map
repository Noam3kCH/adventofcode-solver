{"version":3,"sources":["day15.spec.js"],"names":["input","url","describe","it","expect","join","toEqual"],"mappings":";;AAAA;;AACA;;;;;;;AAEA,MAAMA,KAAK,GAAG,wBAAU,KAAYC,GAAtB,CAAd;AAEAC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BA,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CACJ,gBACE,CAAC,4BAAD,EAA+B,8BAA/B,EAA+DC,IAA/D,CACE,IADF,CADF,EAIE,CAJF,CADI,CAAN,CAOEC,OAPF,CAOU,CAPV;AASAF,MAAAA,MAAM,CACJ,gBACE,CAAC,4BAAD,EAA+B,8BAA/B,EAA+DC,IAA/D,CACE,IADF,CADF,CADI,CAAN,CAMEC,OANF,CAMU,GANV;AAOD,KAjBC,CAAF;AAmBAH,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBM,OAArB,CAA6B,GAA7B;AACD,KAFC,CAAF;AAGD,GAvBO,CAAR;AAyBAJ,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CACJ,gBACE,CAAC,4BAAD,EAA+B,8BAA/B,EAA+DC,IAA/D,CACE,IADF,CADF,EAIE,IAJF,CADI,CAAN,CAOEC,OAPF,CAOU,CAPV;AAQAF,MAAAA,MAAM,CACJ,gBACE,CAAC,4BAAD,EAA+B,8BAA/B,EAA+DC,IAA/D,CACE,IADF,CADF,CADI,CAAN,CAMEC,OANF,CAMU,GANV;AAOD,KAhBC,CAAF;AAkBAH,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBM,OAArB,CAA6B,GAA7B;AACD,KAFC,CAAF;AAGD,GAtBO,CAAR;AAuBD,CAjDO,CAAR","sourcesContent":["import { part1, part2 } from './day15.js';\nimport readInput from '../utils/read-input';\n\nconst input = readInput(import.meta.url);\n\ndescribe('day15 2017', () => {\n  describe('part1', () => {\n    it('should work for part 1 examples', () => {\n      expect(\n        part1(\n          ['Generator A starts with 65', 'Generator B starts with 8921'].join(\n            '\\n',\n          ),\n          5,\n        ),\n      ).toEqual(1);\n\n      expect(\n        part1(\n          ['Generator A starts with 65', 'Generator B starts with 8921'].join(\n            '\\n',\n          ),\n        ),\n      ).toEqual(588);\n    });\n\n    it('should work for part 1 input', () => {\n      expect(part1(input)).toEqual(638);\n    });\n  });\n\n  describe('part2', () => {\n    it('should work for part 2 examples', () => {\n      expect(\n        part2(\n          ['Generator A starts with 65', 'Generator B starts with 8921'].join(\n            '\\n',\n          ),\n          1056,\n        ),\n      ).toEqual(1);\n      expect(\n        part2(\n          ['Generator A starts with 65', 'Generator B starts with 8921'].join(\n            '\\n',\n          ),\n        ),\n      ).toEqual(309);\n    });\n\n    it('should work for part 2 input', () => {\n      expect(part2(input)).toEqual(343);\n    });\n  });\n});\n"]}