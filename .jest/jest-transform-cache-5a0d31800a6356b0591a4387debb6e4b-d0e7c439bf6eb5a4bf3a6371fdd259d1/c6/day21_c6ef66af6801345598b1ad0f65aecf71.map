{"version":3,"sources":["day21.js"],"names":["options","calcOptions","table","items","split","filter","x","match","map","reduce","state","currentCategory","trim","toLowerCase","push","name","cost","parseInt","damage","armor","rings","weapons","forEach","weapon","ring1","ring2","sum","sort","a","b","parse","input","hit","part1","boss","win","Math","ceil","max","shift","part2","lose","pop"],"mappings":"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","sourcesContent":["let options;\n\nfunction calcOptions() {\n  if (options) {\n    return options;\n  }\n\n  const table = ` Weapons:    Cost  Damage  Armor\n                  Dagger        8     4       0\n                  Shortsword   10     5       0\n                  Warhammer    25     6       0\n                  Longsword    40     7       0\n                  Greataxe     74     8       0\n\n                  Armor:      Cost  Damage  Armor\n                  Leather      13     0       1\n                  Chainmail    31     0       2\n                  Splintmail   53     0       3\n                  Bandedmail   75     0       4\n                  Platemail   102     0       5\n\n                  Rings:      Cost  Damage  Armor\n                  Damage +1    25     1       0\n                  Damage +2    50     2       0\n                  Damage +3   100     3       0\n                  Defense +1   20     0       1\n                  Defense +2   40     0       2\n                  Defense +3   80     0       3`;\n\n  const items = table\n    .split('\\n')\n    .filter(x => !x.match(/^\\s*$/))\n    .map(x => x.match(/^\\s*([^:]+):?\\s+([^\\s]+)\\s+([^\\s]+)\\s+([^\\s]+)\\s*$/))\n    .reduce((state, x) => {\n      if (x[2] === 'Cost') {\n        state.currentCategory = x[1].trim().toLowerCase();\n        state[state.currentCategory] = [];\n      } else {\n        state[state.currentCategory].push({\n          name: x[1].trim().toLowerCase(),\n          cost: parseInt(x[2]),\n          damage: parseInt(x[3]),\n          armor: parseInt(x[4]),\n        });\n      }\n      return state;\n    }, {});\n\n  items.armor.push({ name: 'nothing', cost: 0, damage: 0, armor: 0 });\n  items.rings.push({ name: 'nothing', cost: 0, damage: 0, armor: 0 });\n\n  options = [];\n\n  items.weapons.forEach(weapon => {\n    items.armor.forEach(armor => {\n      items.rings.forEach(ring1 => {\n        items.rings.forEach(ring2 => {\n          options.push([weapon, armor, ring1, ring2]);\n        });\n      });\n    });\n  });\n\n  return (options = options\n    .map(x =>\n      x.reduce((sum, x) => ({\n        cost: sum.cost + x.cost,\n        damage: sum.damage + x.damage,\n        armor: sum.armor + x.armor,\n      })),\n    )\n    .sort((a, b) => a.cost - b.cost));\n}\n\nfunction parse(input) {\n  const [hit, damage, armor] = input.match(/\\d+/g).map(x => parseInt(x));\n  return { hit, damage, armor };\n}\n\nexport function part1(input) {\n  const boss = parse(input);\n  const options = calcOptions();\n  const win = options.filter(\n    x =>\n      Math.ceil(100 / Math.max(1, boss.damage - x.armor)) >=\n      Math.ceil(boss.hit / Math.max(1, x.damage - boss.armor)),\n  );\n  return win.shift().cost;\n}\n\nexport function part2(input) {\n  const boss = parse(input);\n  const options = calcOptions();\n  const lose = options.filter(\n    x =>\n      Math.ceil(100 / Math.max(1, boss.damage - x.armor)) <\n      Math.ceil(boss.hit / Math.max(1, x.damage - boss.armor)),\n  );\n  return lose.pop().cost;\n}\n"]}