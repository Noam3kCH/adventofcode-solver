{"version":3,"sources":["day14.js"],"names":["parse","input","Array","fill","map","x","y","split","parseInt","toString","padStart","join","d","value","countUsed","disk","reduce","total","row","filter","length","toKey","getNeighbors","point","count","visited","Set","add","has","forEach","countRegions","regions","part1","part2"],"mappings":";;;;;;;AAAA;;AAEA,SAASA,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAO,IAAIC,KAAJ,CAAU,GAAV,EAAeC,IAAf,GAAsBC,GAAtB,CAA0B,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACzC,WAAO,gBAAM,GAAEL,KAAM,IAAGK,CAAE,EAAnB,EACJC,KADI,CACE,EADF,EAEJH,GAFI,CAEAC,CAAC,IAAI;AACR,aAAOG,QAAQ,CAACH,CAAD,EAAI,EAAJ,CAAR,CACJI,QADI,CACK,CADL,EAEJC,QAFI,CAEK,CAFL,EAEQ,GAFR,CAAP;AAGD,KANI,EAOJC,IAPI,CAOC,EAPD,EAQJJ,KARI,CAQE,EARF,EASJH,GATI,CASA,CAACQ,CAAD,EAAIP,CAAJ,MAAW;AAAEA,MAAAA,CAAF;AAAKC,MAAAA,CAAL;AAAQO,MAAAA,KAAK,EAAED,CAAC,KAAK,GAAN,GAAY,GAAZ,GAAkB;AAAjC,KAAX,CATA,CAAP;AAUD,GAXM,CAAP;AAYD;;AAED,SAASE,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,SAAOA,IAAI,CAACC,MAAL,CACL,CAACC,KAAD,EAAQC,GAAR,KAAgBD,KAAK,GAAGC,GAAG,CAACC,MAAJ,CAAWd,CAAC,IAAIA,CAAC,CAACQ,KAAF,KAAY,GAA5B,EAAiCO,MADpD,EAEL,CAFK,CAAP;AAID;;AAED,SAASC,KAAT,CAAe;AAAEhB,EAAAA,CAAF;AAAKC,EAAAA;AAAL,CAAf,EAAyB;AACvB,SAAQ,GAAED,CAAE,IAAGC,CAAE,EAAjB;AACD;;AAED,SAASgB,YAAT,CAAsBP,IAAtB,EAA4B;AAAEV,EAAAA,CAAF;AAAKC,EAAAA;AAAL,CAA5B,EAAsC;AACpC,SAAO,CACL;AAAED,IAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,IAAAA,CAAC,EAAEA,CAAC,GAAG;AAAnB,GADK,EAEL;AAAED,IAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,IAAAA,CAAC,EAAEA,CAAC,GAAG;AAAnB,GAFK,EAGL;AAAED,IAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,IAAAA,CAAC,EAAEA,CAAC,GAAG;AAAnB,GAHK,EAIL;AAAED,IAAAA,CAAC,EAAEA,CAAC,GAAG,CAAT;AAAYC,IAAAA,CAAC,EAAEA,CAAC,GAAG;AAAnB,GAJK,EAMJF,GANI,CAMAmB,KAAK,IAAIR,IAAI,CAACQ,KAAK,CAACjB,CAAP,CAAJ,IAAiBS,IAAI,CAACQ,KAAK,CAACjB,CAAP,CAAJ,CAAciB,KAAK,CAAClB,CAApB,CAN1B,EAOJc,MAPI,CAOGd,CAAC,IAAIA,CAPR,CAAP;AAQD;;AAED,SAASmB,KAAT,CAAeT,IAAf,EAAqBQ,KAArB,EAA4BE,OAAO,GAAG,IAAIC,GAAJ,EAAtC,EAAiD;AAC/CD,EAAAA,OAAO,CAACE,GAAR,CAAYN,KAAK,CAACE,KAAD,CAAjB;AACAD,EAAAA,YAAY,CAACP,IAAD,EAAOQ,KAAP,CAAZ,CACGJ,MADH,CACUd,CAAC,IAAI;AACX,WAAO,CAACoB,OAAO,CAACG,GAAR,CAAYP,KAAK,CAAChB,CAAD,CAAjB,CAAD,IAA0BA,CAAC,CAACQ,KAAF,KAAY,GAA7C;AACD,GAHH,EAIGgB,OAJH,CAIWxB,CAAC,IAAImB,KAAK,CAACT,IAAD,EAAOV,CAAP,EAAUoB,OAAV,CAJrB;AAKA,SAAOA,OAAP;AACD;;AAED,SAASK,YAAT,CAAsBf,IAAtB,EAA4B;AAC1B,MAAIgB,OAAO,GAAG,CAAd;AACA,QAAMN,OAAO,GAAG,IAAIC,GAAJ,EAAhB;AACAX,EAAAA,IAAI,CAACc,OAAL,CAAaX,GAAG,IAAI;AAClBA,IAAAA,GAAG,CAACW,OAAJ,CAAYN,KAAK,IAAI;AACnB,UAAI,CAACE,OAAO,CAACG,GAAR,CAAYP,KAAK,CAACE,KAAD,CAAjB,CAAD,IAA8BA,KAAK,CAACV,KAAN,KAAgB,GAAlD,EAAuD;AACrDkB,QAAAA,OAAO;AACPP,QAAAA,KAAK,CAACT,IAAD,EAAOQ,KAAP,EAAcE,OAAd,CAAL;AACD;AACF,KALD;AAMD,GAPD;AAQA,SAAOM,OAAP;AACD;;AAEM,MAAMC,KAAK,GAAG/B,KAAK,IAAIa,SAAS,CAACd,KAAK,CAACC,KAAD,CAAN,CAAhC;;;;AACA,MAAMgC,KAAK,GAAGhC,KAAK,IAAI6B,YAAY,CAAC9B,KAAK,CAACC,KAAD,CAAN,CAAnC","sourcesContent":["import { part2 as knot } from './day10.js';\n\nfunction parse(input) {\n  return new Array(128).fill().map((x, y) => {\n    return knot(`${input}-${y}`)\n      .split('')\n      .map(x => {\n        return parseInt(x, 16)\n          .toString(2)\n          .padStart(4, '0');\n      })\n      .join('')\n      .split('')\n      .map((d, x) => ({ x, y, value: d === '1' ? '#' : '.' }));\n  });\n}\n\nfunction countUsed(disk) {\n  return disk.reduce(\n    (total, row) => total + row.filter(x => x.value === '#').length,\n    0,\n  );\n}\n\nfunction toKey({ x, y }) {\n  return `${x}-${y}`;\n}\n\nfunction getNeighbors(disk, { x, y }) {\n  return [\n    { x: x + 0, y: y - 1 },\n    { x: x + 0, y: y + 1 },\n    { x: x - 1, y: y + 0 },\n    { x: x + 1, y: y + 0 },\n  ]\n    .map(point => disk[point.y] && disk[point.y][point.x])\n    .filter(x => x);\n}\n\nfunction count(disk, point, visited = new Set()) {\n  visited.add(toKey(point));\n  getNeighbors(disk, point)\n    .filter(x => {\n      return !visited.has(toKey(x)) && x.value === '#';\n    })\n    .forEach(x => count(disk, x, visited));\n  return visited;\n}\n\nfunction countRegions(disk) {\n  let regions = 0;\n  const visited = new Set();\n  disk.forEach(row => {\n    row.forEach(point => {\n      if (!visited.has(toKey(point)) && point.value === '#') {\n        regions++;\n        count(disk, point, visited);\n      }\n    });\n  });\n  return regions;\n}\n\nexport const part1 = input => countUsed(parse(input));\nexport const part2 = input => countRegions(parse(input));\n"]}