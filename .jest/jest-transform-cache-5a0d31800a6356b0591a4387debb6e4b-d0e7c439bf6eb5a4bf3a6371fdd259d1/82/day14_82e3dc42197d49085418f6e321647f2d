e11de60e18ec8d2936d538902e4ea78a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part2 = exports.part1 = void 0;

var _day = require("./day10.js");

function parse(input) {
  return new Array(128).fill().map((x, y) => {
    return (0, _day.part2)(`${input}-${y}`).split('').map(x => {
      return parseInt(x, 16).toString(2).padStart(4, '0');
    }).join('').split('').map((d, x) => ({
      x,
      y,
      value: d === '1' ? '#' : '.'
    }));
  });
}

function countUsed(disk) {
  return disk.reduce((total, row) => total + row.filter(x => x.value === '#').length, 0);
}

function toKey({
  x,
  y
}) {
  return `${x}-${y}`;
}

function getNeighbors(disk, {
  x,
  y
}) {
  return [{
    x: x + 0,
    y: y - 1
  }, {
    x: x + 0,
    y: y + 1
  }, {
    x: x - 1,
    y: y + 0
  }, {
    x: x + 1,
    y: y + 0
  }].map(point => disk[point.y] && disk[point.y][point.x]).filter(x => x);
}

function count(disk, point, visited = new Set()) {
  visited.add(toKey(point));
  getNeighbors(disk, point).filter(x => {
    return !visited.has(toKey(x)) && x.value === '#';
  }).forEach(x => count(disk, x, visited));
  return visited;
}

function countRegions(disk) {
  let regions = 0;
  const visited = new Set();
  disk.forEach(row => {
    row.forEach(point => {
      if (!visited.has(toKey(point)) && point.value === '#') {
        regions++;
        count(disk, point, visited);
      }
    });
  });
  return regions;
}

const part1 = input => countUsed(parse(input));

exports.part1 = part1;

const part2 = input => countRegions(parse(input));

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE0LmpzIl0sIm5hbWVzIjpbInBhcnNlIiwiaW5wdXQiLCJBcnJheSIsImZpbGwiLCJtYXAiLCJ4IiwieSIsInNwbGl0IiwicGFyc2VJbnQiLCJ0b1N0cmluZyIsInBhZFN0YXJ0Iiwiam9pbiIsImQiLCJ2YWx1ZSIsImNvdW50VXNlZCIsImRpc2siLCJyZWR1Y2UiLCJ0b3RhbCIsInJvdyIsImZpbHRlciIsImxlbmd0aCIsInRvS2V5IiwiZ2V0TmVpZ2hib3JzIiwicG9pbnQiLCJjb3VudCIsInZpc2l0ZWQiLCJTZXQiLCJhZGQiLCJoYXMiLCJmb3JFYWNoIiwiY291bnRSZWdpb25zIiwicmVnaW9ucyIsInBhcnQxIiwicGFydDIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQSxTQUFTQSxLQUFULENBQWVDLEtBQWYsRUFBc0I7QUFDcEIsU0FBTyxJQUFJQyxLQUFKLENBQVUsR0FBVixFQUFlQyxJQUFmLEdBQXNCQyxHQUF0QixDQUEwQixDQUFDQyxDQUFELEVBQUlDLENBQUosS0FBVTtBQUN6QyxXQUFPLGdCQUFNLEdBQUVMLEtBQU0sSUFBR0ssQ0FBRSxFQUFuQixFQUNKQyxLQURJLENBQ0UsRUFERixFQUVKSCxHQUZJLENBRUFDLENBQUMsSUFBSTtBQUNSLGFBQU9HLFFBQVEsQ0FBQ0gsQ0FBRCxFQUFJLEVBQUosQ0FBUixDQUNKSSxRQURJLENBQ0ssQ0FETCxFQUVKQyxRQUZJLENBRUssQ0FGTCxFQUVRLEdBRlIsQ0FBUDtBQUdELEtBTkksRUFPSkMsSUFQSSxDQU9DLEVBUEQsRUFRSkosS0FSSSxDQVFFLEVBUkYsRUFTSkgsR0FUSSxDQVNBLENBQUNRLENBQUQsRUFBSVAsQ0FBSixNQUFXO0FBQUVBLE1BQUFBLENBQUY7QUFBS0MsTUFBQUEsQ0FBTDtBQUFRTyxNQUFBQSxLQUFLLEVBQUVELENBQUMsS0FBSyxHQUFOLEdBQVksR0FBWixHQUFrQjtBQUFqQyxLQUFYLENBVEEsQ0FBUDtBQVVELEdBWE0sQ0FBUDtBQVlEOztBQUVELFNB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Q0FBQ2QsS0FBSyxDQUFDQyxLQUFELENBQU4sQ0FBaEM7Ozs7QUFDQSxNQUFNZ0MsS0FBSyxHQUFHaEMsS0FBSyxJQUFJNkIsWUFBWSxDQUFDOUIsS0FBSyxDQUFDQyxLQUFELENBQU4sQ0FBbkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJ0MiBhcyBrbm90IH0gZnJvbSAnLi9kYXkxMC5qcyc7XG5cbmZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gIHJldHVybiBuZXcgQXJyYXkoMTI4KS5maWxsKCkubWFwKCh4LCB5KSA9PiB7XG4gICAgcmV0dXJuIGtub3QoYCR7aW5wdXR9LSR7eX1gKVxuICAgICAgLnNwbGl0KCcnKVxuICAgICAgLm1hcCh4ID0+IHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KHgsIDE2KVxuICAgICAgICAgIC50b1N0cmluZygyKVxuICAgICAgICAgIC5wYWRTdGFydCg0LCAnMCcpO1xuICAgICAgfSlcbiAgICAgIC5qb2luKCcnKVxuICAgICAgLnNwbGl0KCcnKVxuICAgICAgLm1hcCgoZCwgeCkgPT4gKHsgeCwgeSwgdmFsdWU6IGQgPT09ICcxJyA/ICcjJyA6ICcuJyB9KSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjb3VudFVzZWQoZGlzaykge1xuICByZXR1cm4gZGlzay5yZWR1Y2UoXG4gICAgKHRvdGFsLCByb3cpID0+IHRvdGFsICsgcm93LmZpbHRlcih4ID0+IHgudmFsdWUgPT09ICcjJykubGVuZ3RoLFxuICAgIDAsXG4gICk7XG59XG5cbmZ1bmN0aW9uIHRvS2V5KHsgeCwgeSB9KSB7XG4gIHJldHVybiBgJHt4fS0ke3l9YDtcbn1cblxuZnVuY3Rpb24gZ2V0TmVpZ2hib3JzKGRpc2ssIHsgeCwgeSB9KSB7XG4gIHJldHVybiBbXG4gICAgeyB4OiB4ICsgMCwgeTogeSAtIDEgfSxcbiAgICB7IHg6IHggKyAwLCB5OiB5ICsgMSB9LFxuICAgIHsgeDogeCAtIDEsIHk6IHkgKyAwIH0sXG4gICAgeyB4OiB4ICsgMSwgeTogeSArIDAgfSxcbiAgXVxuICAgIC5tYXAocG9pbnQgPT4gZGlza1twb2ludC55XSAmJiBkaXNrW3BvaW50LnldW3BvaW50LnhdKVxuICAgIC5maWx0ZXIoeCA9PiB4KTtcbn1cblxuZnVuY3Rpb24gY291bnQoZGlzaywgcG9pbnQsIHZpc2l0ZWQgPSBuZXcgU2V0KCkpIHtcbiAgdmlzaXRlZC5hZGQodG9LZXkocG9pbnQpKTtcbiAgZ2V0TmVpZ2hib3JzKGRpc2ssIHBvaW50KVxuICAgIC5maWx0ZXIoeCA9PiB7XG4gICAgICByZXR1cm4gIXZpc2l0ZWQuaGFzKHRvS2V5KHgpKSAmJiB4LnZhbHVlID09PSAnIyc7XG4gICAgfSlcbiAgICAuZm9yRWFjaCh4ID0+IGNvdW50KGRpc2ssIHgsIHZpc2l0ZWQpKTtcbiAgcmV0dXJuIHZpc2l0ZWQ7XG59XG5cbmZ1bmN0aW9uIGNvdW50UmVnaW9ucyhkaXNrKSB7XG4gIGxldCByZWdpb25zID0gMDtcbiAgY29uc3QgdmlzaXRlZCA9IG5ldyBTZXQoKTtcbiAgZGlzay5mb3JFYWNoKHJvdyA9PiB7XG4gICAgcm93LmZvckVhY2gocG9pbnQgPT4ge1xuICAgICAgaWYgKCF2aXNpdGVkLmhhcyh0b0tleShwb2ludCkpICYmIHBvaW50LnZhbHVlID09PSAnIycpIHtcbiAgICAgICAgcmVnaW9ucysrO1xuICAgICAgICBjb3VudChkaXNrLCBwb2ludCwgdmlzaXRlZCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gcmVnaW9ucztcbn1cblxuZXhwb3J0IGNvbnN0IHBhcnQxID0gaW5wdXQgPT4gY291bnRVc2VkKHBhcnNlKGlucHV0KSk7XG5leHBvcnQgY29uc3QgcGFydDIgPSBpbnB1dCA9PiBjb3VudFJlZ2lvbnMocGFyc2UoaW5wdXQpKTtcbiJdfQ==