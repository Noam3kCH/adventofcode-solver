296d6eeeb9ffe34290f929f39e3187f5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;
const pattern = ['.#.', '..#', '###'];
const permutations2 = ['1234', '3412', '1324', '3142', '4321', '2143', '4231', '2413'];
const permutations3 = ['123456789', '789456123', '147258369', '741852963', '987654321', '321654987', '963852741', '369258174'];

function permute(str) {
  const permutations = str.length === 4 ? permutations2 : permutations3;
  return permutations.map(x => {
    const result = [];

    for (let i = 0; i < x.length; i++) {
      result[x[i]] = str[i];
    }

    return result.join('');
  });
}

function parse(input) {
  return input.split('\n').reduce((rules, line) => {
    const [from, to] = line.split(' => ');
    const keys = permute(from.replace(/\//g, ''));
    const value = to.split('/');
    return keys.reduce((rules, key) => ({ ...rules,
      [key]: value
    }), rules);
  }, {});
}

function divide(pattern, size) {
  const count = pattern.length / size;
  const result = [];

  for (let i = 0; i < count; i++) {
    const rows = pattern.slice(size * i, size * (i + 1));
    const row = [];

    for (let j = 0; j < count; j++) {
      const box = rows.map(x => x.slice(size * j, size * (j + 1)));
      row.push(box);
    }

    result.push(row);
  }

  return result;
}

function merge(divided) {
  return divided.reduce((result, boxes) => {
    const rows = [];

    for (let i = 0; i < boxes[0].length; i++) {
      rows.push(boxes.map(x => x[i]).join(''));
    }

    return result.concat(rows);
  }, []);
}

function mutate(pattern, rules) {
  const size = pattern.length % 2 === 0 ? 2 : 3;
  const divided = divide(pattern, size);
  return merge(divided.map(row => row.map(x => {
    return rules[x.join('')];
  })));
}

function part1(input, count = 5) {
  const rules = parse(input);
  let result = pattern;

  for (let i = 0; i < count; i++) {
    result = mutate(result, rules);
  }

  return result.join('').split('').filter(x => x === '#').length;
}

function part2(input) {
  return part1(input, 18);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTIxLmpzIl0sIm5hbWVzIjpbInBhdHRlcm4iLCJwZXJtdXRhdGlvbnMyIiwicGVybXV0YXRpb25zMyIsInBlcm11dGUiLCJzdHIiLCJwZXJtdXRhdGlvbnMiLCJsZW5ndGgiLCJtYXAiLCJ4IiwicmVzdWx0IiwiaSIsImpvaW4iLCJwYXJzZSIsImlucHV0Iiwic3BsaXQiLCJyZWR1Y2UiLCJydWxlcyIsImxpbmUiLCJmcm9tIiwidG8iLCJrZXlzIiwicmVwbGFjZSIsInZhbHVlIiwia2V5IiwiZGl2aWRlIiwic2l6ZSIsImNvdW50Iiwicm93cyIsInNsaWNlIiwicm93IiwiaiIsImJveCIsInB1c2giLCJtZXJnZSIsImRpdmlkZWQiLCJib3hlcyIsImNvbmNhdCIsIm11dGF0ZSIsInBhcnQxIiwiZmlsdGVyIiwicGFydDIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxNQUFNQSxPQUFPLEdBQUcsQ0FBQyxLQUFELEVBQVEsS0FBUixFQUFlLEtBQWYsQ0FBaEI7QUFDQSxNQUFNQyxhQUFhLEdBQUcsQ0FDcEIsTUFEb0IsRUFFcEIsTUFGb0IsRUFHcEIsTUFIb0IsRUFJcEIsTUFKb0IsRUFLcEIsTUFMb0IsRUFNcEIsTUFOb0IsRUFPcEIsTUFQb0IsRUFRcEIsTUFSb0IsQ0FBdEI7QUFVQSxNQUFNQyxhQUFhLEdBQUcsQ0FDcEIsV0FEb0IsRUFFcEIsV0FGb0IsRUFHcEIsV0FIb0IsRUFJcEIsV0FKb0IsRUFLcEIsV0FMb0IsRUFNcEIsV0FOb0IsRUFPcEIsV0FQb0IsRUFRcEIsV0FSb0IsQ0FBdEI7O0FBV0EsU0FBU0MsT0FBVCxDQUFpQkMsR0FBakIsRUFBc0I7QUFDcEIsUUFBTUMsWUFBWSxHQUFHRCxHQUFHLENBQUNFLE1BQUosS0FBZSxDQUFmLEdBQW1CTCxhQUFuQixHQUFtQ0MsYUFBeEQ7QUFDQSxTQUFPRyxZQUFZLENBQUNFLEdBQWIsQ0FBaUJDLENBQUMsSUFBSTtBQUMzQixVQUFNQyxNQUFNLEdBQUcsRUFBZjs7QUFDQSxTQUFLLElBQUlD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Y2VzQ29udGVudCI6WyJjb25zdCBwYXR0ZXJuID0gWycuIy4nLCAnLi4jJywgJyMjIyddO1xuY29uc3QgcGVybXV0YXRpb25zMiA9IFtcbiAgJzEyMzQnLFxuICAnMzQxMicsXG4gICcxMzI0JyxcbiAgJzMxNDInLFxuICAnNDMyMScsXG4gICcyMTQzJyxcbiAgJzQyMzEnLFxuICAnMjQxMycsXG5dO1xuY29uc3QgcGVybXV0YXRpb25zMyA9IFtcbiAgJzEyMzQ1Njc4OScsXG4gICc3ODk0NTYxMjMnLFxuICAnMTQ3MjU4MzY5JyxcbiAgJzc0MTg1Mjk2MycsXG4gICc5ODc2NTQzMjEnLFxuICAnMzIxNjU0OTg3JyxcbiAgJzk2Mzg1Mjc0MScsXG4gICczNjkyNTgxNzQnLFxuXTtcblxuZnVuY3Rpb24gcGVybXV0ZShzdHIpIHtcbiAgY29uc3QgcGVybXV0YXRpb25zID0gc3RyLmxlbmd0aCA9PT0gNCA/IHBlcm11dGF0aW9uczIgOiBwZXJtdXRhdGlvbnMzO1xuICByZXR1cm4gcGVybXV0YXRpb25zLm1hcCh4ID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHgubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFt4W2ldXSA9IHN0cltpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC5qb2luKCcnKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5zcGxpdCgnXFxuJykucmVkdWNlKChydWxlcywgbGluZSkgPT4ge1xuICAgIGNvbnN0IFtmcm9tLCB0b10gPSBsaW5lLnNwbGl0KCcgPT4gJyk7XG4gICAgY29uc3Qga2V5cyA9IHBlcm11dGUoZnJvbS5yZXBsYWNlKC9cXC8vZywgJycpKTtcbiAgICBjb25zdCB2YWx1ZSA9IHRvLnNwbGl0KCcvJyk7XG4gICAgcmV0dXJuIGtleXMucmVkdWNlKChydWxlcywga2V5KSA9PiAoeyAuLi5ydWxlcywgW2tleV06IHZhbHVlIH0pLCBydWxlcyk7XG4gIH0sIHt9KTtcbn1cblxuZnVuY3Rpb24gZGl2aWRlKHBhdHRlcm4sIHNpemUpIHtcbiAgY29uc3QgY291bnQgPSBwYXR0ZXJuLmxlbmd0aCAvIHNpemU7XG4gIGNvbnN0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICBjb25zdCByb3dzID0gcGF0dGVybi5zbGljZShzaXplICogaSwgc2l6ZSAqIChpICsgMSkpO1xuICAgIGNvbnN0IHJvdyA9IFtdO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY291bnQ7IGorKykge1xuICAgICAgY29uc3QgYm94ID0gcm93cy5tYXAoeCA9PiB4LnNsaWNlKHNpemUgKiBqLCBzaXplICogKGogKyAxKSkpO1xuICAgICAgcm93LnB1c2goYm94KTtcbiAgICB9XG4gICAgcmVzdWx0LnB1c2gocm93KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtZXJnZShkaXZpZGVkKSB7XG4gIHJldHVybiBkaXZpZGVkLnJlZHVjZSgocmVzdWx0LCBib3hlcykgPT4ge1xuICAgIGNvbnN0IHJvd3MgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJveGVzWzBdLmxlbmd0aDsgaSsrKSB7XG4gICAgICByb3dzLnB1c2goYm94ZXMubWFwKHggPT4geFtpXSkuam9pbignJykpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0LmNvbmNhdChyb3dzKTtcbiAgfSwgW10pO1xufVxuXG5mdW5jdGlvbiBtdXRhdGUocGF0dGVybiwgcnVsZXMpIHtcbiAgY29uc3Qgc2l6ZSA9IHBhdHRlcm4ubGVuZ3RoICUgMiA9PT0gMCA/IDIgOiAzO1xuICBjb25zdCBkaXZpZGVkID0gZGl2aWRlKHBhdHRlcm4sIHNpemUpO1xuICByZXR1cm4gbWVyZ2UoXG4gICAgZGl2aWRlZC5tYXAocm93ID0+XG4gICAgICByb3cubWFwKHggPT4ge1xuICAgICAgICByZXR1cm4gcnVsZXNbeC5qb2luKCcnKV07XG4gICAgICB9KSxcbiAgICApLFxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDEoaW5wdXQsIGNvdW50ID0gNSkge1xuICBjb25zdCBydWxlcyA9IHBhcnNlKGlucHV0KTtcbiAgbGV0IHJlc3VsdCA9IHBhdHRlcm47XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgIHJlc3VsdCA9IG11dGF0ZShyZXN1bHQsIHJ1bGVzKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0XG4gICAgLmpvaW4oJycpXG4gICAgLnNwbGl0KCcnKVxuICAgIC5maWx0ZXIoeCA9PiB4ID09PSAnIycpLmxlbmd0aDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnQyKGlucHV0KSB7XG4gIHJldHVybiBwYXJ0MShpbnB1dCwgMTgpO1xufVxuIl19