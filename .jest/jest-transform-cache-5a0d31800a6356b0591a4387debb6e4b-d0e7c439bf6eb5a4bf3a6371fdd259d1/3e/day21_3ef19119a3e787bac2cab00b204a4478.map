{"version":3,"sources":["day21.js"],"names":["pattern","permutations2","permutations3","permute","str","permutations","length","map","x","result","i","join","parse","input","split","reduce","rules","line","from","to","keys","replace","value","key","divide","size","count","rows","slice","row","j","box","push","merge","divided","boxes","concat","mutate","part1","filter","part2"],"mappings":"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","sourcesContent":["const pattern = ['.#.', '..#', '###'];\nconst permutations2 = [\n  '1234',\n  '3412',\n  '1324',\n  '3142',\n  '4321',\n  '2143',\n  '4231',\n  '2413',\n];\nconst permutations3 = [\n  '123456789',\n  '789456123',\n  '147258369',\n  '741852963',\n  '987654321',\n  '321654987',\n  '963852741',\n  '369258174',\n];\n\nfunction permute(str) {\n  const permutations = str.length === 4 ? permutations2 : permutations3;\n  return permutations.map(x => {\n    const result = [];\n    for (let i = 0; i < x.length; i++) {\n      result[x[i]] = str[i];\n    }\n    return result.join('');\n  });\n}\n\nfunction parse(input) {\n  return input.split('\\n').reduce((rules, line) => {\n    const [from, to] = line.split(' => ');\n    const keys = permute(from.replace(/\\//g, ''));\n    const value = to.split('/');\n    return keys.reduce((rules, key) => ({ ...rules, [key]: value }), rules);\n  }, {});\n}\n\nfunction divide(pattern, size) {\n  const count = pattern.length / size;\n  const result = [];\n  for (let i = 0; i < count; i++) {\n    const rows = pattern.slice(size * i, size * (i + 1));\n    const row = [];\n    for (let j = 0; j < count; j++) {\n      const box = rows.map(x => x.slice(size * j, size * (j + 1)));\n      row.push(box);\n    }\n    result.push(row);\n  }\n  return result;\n}\n\nfunction merge(divided) {\n  return divided.reduce((result, boxes) => {\n    const rows = [];\n    for (let i = 0; i < boxes[0].length; i++) {\n      rows.push(boxes.map(x => x[i]).join(''));\n    }\n    return result.concat(rows);\n  }, []);\n}\n\nfunction mutate(pattern, rules) {\n  const size = pattern.length % 2 === 0 ? 2 : 3;\n  const divided = divide(pattern, size);\n  return merge(\n    divided.map(row =>\n      row.map(x => {\n        return rules[x.join('')];\n      }),\n    ),\n  );\n}\n\nexport function part1(input, count = 5) {\n  const rules = parse(input);\n  let result = pattern;\n  for (let i = 0; i < count; i++) {\n    result = mutate(result, rules);\n  }\n  return result\n    .join('')\n    .split('')\n    .filter(x => x === '#').length;\n}\n\nexport function part2(input) {\n  return part1(input, 18);\n}\n"]}