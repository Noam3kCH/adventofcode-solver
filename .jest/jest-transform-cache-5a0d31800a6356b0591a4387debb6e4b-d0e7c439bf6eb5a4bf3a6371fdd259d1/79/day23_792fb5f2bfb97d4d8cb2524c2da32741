b51f60183ebdc817a32bbf01dcb4ff43
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;
const ops = {
  cpy: (src, register) => state => {
    if (state[register] !== undefined) {
      src = state[src] === undefined ? parseInt(src) : state[src];
      state[register] = src;
    }
  },
  inc: register => state => {
    if (state[register] !== undefined) {
      state[register]++;
    }
  },
  dec: register => state => {
    if (state[register] !== undefined) {
      state[register]--;
    }
  },
  jnz: (register, distance) => state => {
    if (state[register] !== undefined && state[register] !== 0 || state[register] === undefined && register !== '0') {
      distance = state[distance] === undefined ? parseInt(distance) : state[distance];
      state.index += distance - 1;
    }
  },
  tgl: distance => (state, commands) => {
    distance = state[distance] === undefined ? parseInt(distance) : state[distance];
    toggle(commands[state.index + distance]);
  }
};

function toggle(command) {
  const dic = {
    cpy: 'jnz',
    inc: 'dec',
    dec: 'inc',
    jnz: 'cpy',
    tgl: 'inc'
  };

  if (command) {
    command.name = dic[command.name];
  }
}

function toReducer(str) {
  const params = str.split(/\s+/);
  const cmd = {
    name: params.shift(),
    params
  };
  return cmd;
}

function run(commands, state) {
  while (commands.length > state.index) {
    if (state.index === 4 && commands.slice(4, 10).map(x => x.name).join(' ') === 'cpy inc dec jnz dec jnz') {
      state.a += state.b * state.d;
      state.c = 0;
      state.d = 0;
      state.index = 10;
    } else {
      const cmd = commands[state.index];
      ops[cmd.name](...cmd.params)(state, commands);
      state.index++;
    }
  }

  return state;
}

function part1(input, state = {
  a: 7,
  b: 0,
  c: 0,
  d: 0,
  index: 0
}) {
  const commands1 = input.split('\n').map(toReducer);
  return run(commands1, state).a;
}

function part2(input, state = {
  a: 12,
  b: 0,
  c: 0,
  d: 0,
  index: 0
}) {
  const commands2 = input.split('\n').map(toReducer);
  return run(commands2, state).a;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTIzLmpzIl0sIm5hbWVzIjpbIm9wcyIsImNweSIsInNyYyIsInJlZ2lzdGVyIiwic3RhdGUiLCJ1bmRlZmluZWQiLCJwYXJzZUludCIsImluYyIsImRlYyIsImpueiIsImRpc3RhbmNlIiwiaW5kZXgiLCJ0Z2wiLCJjb21tYW5kcyIsInRvZ2dsZSIsImNvbW1hbmQiLCJkaWMiLCJuYW1lIiwidG9SZWR1Y2VyIiwic3RyIiwicGFyYW1zIiwic3BsaXQiLCJjbWQiLCJzaGlmdCIsInJ1biIsImxlbmd0aCIsInNsaWNlIiwibWFwIiwieCIsImpvaW4iLCJhIiwiYiIsImQiLCJjIiwicGFydDEiLCJpbnB1dCIsImNvbW1hbmRzMSIsInBhcnQyIiwiY29tbWFuZHMyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTUEsR0FBRyxHQUFHO0FBQ1ZDLEVBQUFBLEdBQUcsRUFBRSxDQUFDQyxHQUFELEVBQU1DLFFBQU4sS0FBbUJDLEtBQUssSUFBSTtBQUMvQixRQUFJQSxLQUFLLENBQUNELFFBQUQsQ0FBTCxLQUFvQkUsU0FBeEIsRUFBbUM7QUFDakNILE1BQUFBLEdBQUcsR0FBR0UsS0FBSyxDQUFDRixHQUFELENBQUwsS0FBZUcsU0FBZixHQUEyQkMsUUFBUSxDQUFDSixHQUFELENBQW5DLEdBQTJDRSxLQUFLLENBQUNGLEdBQUQsQ0FBdEQ7QUFDQUUsTUFBQUEsS0FBSyxDQUFDRCxRQUFELENBQUwsR0FBa0JELEdBQWxCO0FBQ0Q7QUFDRixHQU5TO0FBT1ZLLEVBQUFBLEdBQUcsRUFBRUosUUFBUSxJQUFJQyxLQUFLLElBQUk7QUFDeEIsUUFBSUEsS0FBSyxDQUFDRCxRQUFELENBQUwsS0FBb0JFLFNBQXhCLEVBQW1DO0FBQ2pDRCxNQUFBQSxLQUFLLENBQUNELFFBQUQsQ0FBTDtBQUNEO0FBQ0YsR0FYUztBQVlWSyxFQUFBQSxHQUFHLEVBQUVMLFFBQVEsSUFBSUMsS0FBSyxJQUFJO0FBQ3hCLFFBQUlBLEtBQUssQ0FBQ0QsUUFBRCxDQUFMLEtBQW9C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QUwsQ0FBSCxDQUFjLEdBQUdLLEdBQUcsQ0FBQ0YsTUFBckIsRUFBNkJoQixLQUE3QixFQUFvQ1MsUUFBcEM7QUFDQVQsTUFBQUEsS0FBSyxDQUFDTyxLQUFOO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPUCxLQUFQO0FBQ0Q7O0FBRU0sU0FBUzhCLEtBQVQsQ0FBZUMsS0FBZixFQUFzQi9CLEtBQUssR0FBRztBQUFFMEIsRUFBQUEsQ0FBQyxFQUFFLENBQUw7QUFBUUMsRUFBQUEsQ0FBQyxFQUFFLENBQVg7QUFBY0UsRUFBQUEsQ0FBQyxFQUFFLENBQWpCO0FBQW9CRCxFQUFBQSxDQUFDLEVBQUUsQ0FBdkI7QUFBMEJyQixFQUFBQSxLQUFLLEVBQUU7QUFBakMsQ0FBOUIsRUFBb0U7QUFDekUsUUFBTXlCLFNBQVMsR0FBR0QsS0FBSyxDQUFDZCxLQUFOLENBQVksSUFBWixFQUFrQk0sR0FBbEIsQ0FBc0JULFNBQXRCLENBQWxCO0FBQ0EsU0FBT00sR0FBRyxDQUFDWSxTQUFELEVBQVloQyxLQUFaLENBQUgsQ0FBc0IwQixDQUE3QjtBQUNEOztBQUVNLFNBQVNPLEtBQVQsQ0FBZUYsS0FBZixFQUFzQi9CLEtBQUssR0FBRztBQUFFMEIsRUFBQUEsQ0FBQyxFQUFFLEVBQUw7QUFBU0MsRUFBQUEsQ0FBQyxFQUFFLENBQVo7QUFBZUUsRUFBQUEsQ0FBQyxFQUFFLENBQWxCO0FBQXFCRCxFQUFBQSxDQUFDLEVBQUUsQ0FBeEI7QUFBMkJyQixFQUFBQSxLQUFLLEVBQUU7QUFBbEMsQ0FBOUIsRUFBcUU7QUFDMUUsUUFBTTJCLFNBQVMsR0FBR0gsS0FBSyxDQUFDZCxLQUFOLENBQVksSUFBWixFQUFrQk0sR0FBbEIsQ0FBc0JULFNBQXRCLENBQWxCO0FBQ0EsU0FBT00sR0FBRyxDQUFDYyxTQUFELEVBQVlsQyxLQUFaLENBQUgsQ0FBc0IwQixDQUE3QjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgb3BzID0ge1xuICBjcHk6IChzcmMsIHJlZ2lzdGVyKSA9PiBzdGF0ZSA9PiB7XG4gICAgaWYgKHN0YXRlW3JlZ2lzdGVyXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzcmMgPSBzdGF0ZVtzcmNdID09PSB1bmRlZmluZWQgPyBwYXJzZUludChzcmMpIDogc3RhdGVbc3JjXTtcbiAgICAgIHN0YXRlW3JlZ2lzdGVyXSA9IHNyYztcbiAgICB9XG4gIH0sXG4gIGluYzogcmVnaXN0ZXIgPT4gc3RhdGUgPT4ge1xuICAgIGlmIChzdGF0ZVtyZWdpc3Rlcl0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgc3RhdGVbcmVnaXN0ZXJdKys7XG4gICAgfVxuICB9LFxuICBkZWM6IHJlZ2lzdGVyID0+IHN0YXRlID0+IHtcbiAgICBpZiAoc3RhdGVbcmVnaXN0ZXJdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN0YXRlW3JlZ2lzdGVyXS0tO1xuICAgIH1cbiAgfSxcbiAgam56OiAocmVnaXN0ZXIsIGRpc3RhbmNlKSA9PiBzdGF0ZSA9PiB7XG4gICAgaWYgKFxuICAgICAgKHN0YXRlW3JlZ2lzdGVyXSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlW3JlZ2lzdGVyXSAhPT0gMCkgfHxcbiAgICAgIChzdGF0ZVtyZWdpc3Rlcl0gPT09IHVuZGVmaW5lZCAmJiByZWdpc3RlciAhPT0gJzAnKVxuICAgICkge1xuICAgICAgZGlzdGFuY2UgPVxuICAgICAgICBzdGF0ZVtkaXN0YW5jZV0gPT09IHVuZGVmaW5lZCA/IHBhcnNlSW50KGRpc3RhbmNlKSA6IHN0YXRlW2Rpc3RhbmNlXTtcbiAgICAgIHN0YXRlLmluZGV4ICs9IGRpc3RhbmNlIC0gMTtcbiAgICB9XG4gIH0sXG4gIHRnbDogZGlzdGFuY2UgPT4gKHN0YXRlLCBjb21tYW5kcykgPT4ge1xuICAgIGRpc3RhbmNlID1cbiAgICAgIHN0YXRlW2Rpc3RhbmNlXSA9PT0gdW5kZWZpbmVkID8gcGFyc2VJbnQoZGlzdGFuY2UpIDogc3RhdGVbZGlzdGFuY2VdO1xuICAgIHRvZ2dsZShjb21tYW5kc1tzdGF0ZS5pbmRleCArIGRpc3RhbmNlXSk7XG4gIH0sXG59O1xuXG5mdW5jdGlvbiB0b2dnbGUoY29tbWFuZCkge1xuICBjb25zdCBkaWMgPSB7XG4gICAgY3B5OiAnam56JyxcbiAgICBpbmM6ICdkZWMnLFxuICAgIGRlYzogJ2luYycsXG4gICAgam56OiAnY3B5JyxcbiAgICB0Z2w6ICdpbmMnLFxuICB9O1xuICBpZiAoY29tbWFuZCkge1xuICAgIGNvbW1hbmQubmFtZSA9IGRpY1tjb21tYW5kLm5hbWVdO1xuICB9XG59XG5cbmZ1bmN0aW9uIHRvUmVkdWNlcihzdHIpIHtcbiAgY29uc3QgcGFyYW1zID0gc3RyLnNwbGl0KC9cXHMrLyk7XG4gIGNvbnN0IGNtZCA9IHsgbmFtZTogcGFyYW1zLnNoaWZ0KCksIHBhcmFtcyB9O1xuICByZXR1cm4gY21kO1xufVxuXG5mdW5jdGlvbiBydW4oY29tbWFuZHMsIHN0YXRlKSB7XG4gIHdoaWxlIChjb21tYW5kcy5sZW5ndGggPiBzdGF0ZS5pbmRleCkge1xuICAgIGlmIChcbiAgICAgIHN0YXRlLmluZGV4ID09PSA0ICYmXG4gICAgICBjb21tYW5kc1xuICAgICAgICAuc2xpY2UoNCwgMTApXG4gICAgICAgIC5tYXAoeCA9PiB4Lm5hbWUpXG4gICAgICAgIC5qb2luKCcgJykgPT09ICdjcHkgaW5jIGRlYyBqbnogZGVjIGpueidcbiAgICApIHtcbiAgICAgIHN0YXRlLmEgKz0gc3RhdGUuYiAqIHN0YXRlLmQ7XG4gICAgICBzdGF0ZS5jID0gMDtcbiAgICAgIHN0YXRlLmQgPSAwO1xuICAgICAgc3RhdGUuaW5kZXggPSAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY21kID0gY29tbWFuZHNbc3RhdGUuaW5kZXhdO1xuICAgICAgb3BzW2NtZC5uYW1lXSguLi5jbWQucGFyYW1zKShzdGF0ZSwgY29tbWFuZHMpO1xuICAgICAgc3RhdGUuaW5kZXgrKztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDEoaW5wdXQsIHN0YXRlID0geyBhOiA3LCBiOiAwLCBjOiAwLCBkOiAwLCBpbmRleDogMCB9KSB7XG4gIGNvbnN0IGNvbW1hbmRzMSA9IGlucHV0LnNwbGl0KCdcXG4nKS5tYXAodG9SZWR1Y2VyKTtcbiAgcmV0dXJuIHJ1bihjb21tYW5kczEsIHN0YXRlKS5hO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDIoaW5wdXQsIHN0YXRlID0geyBhOiAxMiwgYjogMCwgYzogMCwgZDogMCwgaW5kZXg6IDAgfSkge1xuICBjb25zdCBjb21tYW5kczIgPSBpbnB1dC5zcGxpdCgnXFxuJykubWFwKHRvUmVkdWNlcik7XG4gIHJldHVybiBydW4oY29tbWFuZHMyLCBzdGF0ZSkuYTtcbn1cbiJdfQ==