{"version":3,"sources":["day08.js"],"names":["init","width","height","Array","fill","map","rect","state","x","y","j","i","rotateRow","moved","splice","concat","flip","row","rotateColumn","flatten","screen","reduce","all","parseCommand","command","startsWith","match","parseInt","solve","input","split","fn","part1","final","filter","length","part2","join"],"mappings":"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","sourcesContent":["function init(width, height) {\n  return new Array(height).fill().map(() => new Array(width).fill(false));\n}\n\nfunction rect(state, x, y) {\n  for (let j = 0; j < y; j++) {\n    for (let i = 0; i < x; i++) {\n      state[j][i] = true;\n    }\n  }\n  return state;\n}\n\nfunction rotateRow(state, x, y) {\n  const moved = state[y].splice(-x, x);\n  state[y] = moved.concat(state[y]);\n  return state;\n}\n\nfunction flip(state) {\n  return state[0].map((x, i) => state.map(row => row[i]));\n}\n\nfunction rotateColumn(state, x, y) {\n  return flip(rotateRow(flip(state), y, x));\n}\n\nfunction flatten(screen) {\n  return screen.reduce((all, row) => all.concat(row), []);\n}\n\nfunction parseCommand(command) {\n  if (command.startsWith('rect')) {\n    const [, x, y] = command.match(/^rect (\\d+)x(\\d+)$/);\n    return state => rect(state, parseInt(x), parseInt(y));\n  } else if (command.startsWith('rotate row')) {\n    const [, y, x] = command.match(/^rotate row y=(\\d+) by (\\d+)$/);\n    return state => rotateRow(state, parseInt(x), parseInt(y));\n  } else if (command.startsWith('rotate column')) {\n    const [, x, y] = command.match(/^rotate column x=(\\d+) by (\\d+)$/);\n    return state => rotateColumn(state, parseInt(x), parseInt(y));\n  }\n}\n\nfunction solve(input, width, height) {\n  const screen = init(width, height);\n  return input\n    .split('\\n')\n    .map(parseCommand)\n    .reduce((state, fn) => fn(state), screen);\n}\n\nexport function part1(input, width = 50, height = 6) {\n  const final = solve(input, width, height);\n  return flatten(final).filter(x => x).length;\n}\n\nexport function part2(input, width = 50, height = 6) {\n  const final = solve(input, width, height);\n  return `\\n${final\n    .map(row => row.map(x => (x ? '#' : '.')).join(''))\n    .join('\\n')}`;\n}\n"]}