dd9f28fa3d5fe2c0084d15fda9643008
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function init(width, height) {
  return new Array(height).fill().map(() => new Array(width).fill(false));
}

function rect(state, x, y) {
  for (let j = 0; j < y; j++) {
    for (let i = 0; i < x; i++) {
      state[j][i] = true;
    }
  }

  return state;
}

function rotateRow(state, x, y) {
  const moved = state[y].splice(-x, x);
  state[y] = moved.concat(state[y]);
  return state;
}

function flip(state) {
  return state[0].map((x, i) => state.map(row => row[i]));
}

function rotateColumn(state, x, y) {
  return flip(rotateRow(flip(state), y, x));
}

function flatten(screen) {
  return screen.reduce((all, row) => all.concat(row), []);
}

function parseCommand(command) {
  if (command.startsWith('rect')) {
    const [, x, y] = command.match(/^rect (\d+)x(\d+)$/);
    return state => rect(state, parseInt(x), parseInt(y));
  } else if (command.startsWith('rotate row')) {
    const [, y, x] = command.match(/^rotate row y=(\d+) by (\d+)$/);
    return state => rotateRow(state, parseInt(x), parseInt(y));
  } else if (command.startsWith('rotate column')) {
    const [, x, y] = command.match(/^rotate column x=(\d+) by (\d+)$/);
    return state => rotateColumn(state, parseInt(x), parseInt(y));
  }
}

function solve(input, width, height) {
  const screen = init(width, height);
  return input.split('\n').map(parseCommand).reduce((state, fn) => fn(state), screen);
}

function part1(input, width = 50, height = 6) {
  const final = solve(input, width, height);
  return flatten(final).filter(x => x).length;
}

function part2(input, width = 50, height = 6) {
  const final = solve(input, width, height);
  return `\n${final.map(row => row.map(x => x ? '#' : '.').join('')).join('\n')}`;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTA4LmpzIl0sIm5hbWVzIjpbImluaXQiLCJ3aWR0aCIsImhlaWdodCIsIkFycmF5IiwiZmlsbCIsIm1hcCIsInJlY3QiLCJzdGF0ZSIsIngiLCJ5IiwiaiIsImkiLCJyb3RhdGVSb3ciLCJtb3ZlZCIsInNwbGljZSIsImNvbmNhdCIsImZsaXAiLCJyb3ciLCJyb3RhdGVDb2x1bW4iLCJmbGF0dGVuIiwic2NyZWVuIiwicmVkdWNlIiwiYWxsIiwicGFyc2VDb21tYW5kIiwiY29tbWFuZCIsInN0YXJ0c1dpdGgiLCJtYXRjaCIsInBhcnNlSW50Iiwic29sdmUiLCJpbnB1dCIsInNwbGl0IiwiZm4iLCJwYXJ0MSIsImZpbmFsIiwiZmlsdGVyIiwibGVuZ3RoIiwicGFydDIiLCJqb2luIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLFNBQVNBLElBQVQsQ0FBY0MsS0FBZCxFQUFxQkMsTUFBckIsRUFBNkI7QUFDM0IsU0FBTyxJQUFJQyxLQUFKLENBQVVELE1BQVYsRUFBa0JFLElBQWxCLEdBQXlCQyxHQUF6QixDQUE2QixNQUFNLElBQUlGLEtBQUosQ0FBVUYsS0FBVixFQUFpQkcsSUFBakIsQ0FBc0IsS0FBdEIsQ0FBbkMsQ0FBUDtBQUNEOztBQUVELFNBQVNFLElBQVQsQ0FBY0MsS0FBZCxFQUFxQkMsQ0FBckIsRUFBd0JDLENBQXhCLEVBQTJCO0FBQ3pCLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsQ0FBcEIsRUFBdUJDLENBQUMsRUFBeEIsRUFBNEI7QUFDMUIsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHSCxDQUFwQixFQUF1QkcsQ0FBQyxFQUF4QixFQUE0QjtBQUMxQkosTUFBQUEsS0FBSyxDQUFDRyxDQUFELENBQUwsQ0FBU0MsQ0FBVCxJQUFjLElBQWQ7QUFDRDtBQUNGOztBQUNELFNBQU9KLEtBQVA7QUFDRDs7QUFFRCxTQUFTSyxTQUFULENBQW1CTCxLQUFuQixFQUEwQkMs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LE1BQU0sR0FBRyxDQUEzQyxFQUE4QztBQUNuRCxRQUFNK0IsS0FBSyxHQUFHTCxLQUFLLENBQUNDLEtBQUQsRUFBUTVCLEtBQVIsRUFBZUMsTUFBZixDQUFuQjtBQUNBLFNBQU9pQixPQUFPLENBQUNjLEtBQUQsQ0FBUCxDQUFlQyxNQUFmLENBQXNCMUIsQ0FBQyxJQUFJQSxDQUEzQixFQUE4QjJCLE1BQXJDO0FBQ0Q7O0FBRU0sU0FBU0MsS0FBVCxDQUFlUCxLQUFmLEVBQXNCNUIsS0FBSyxHQUFHLEVBQTlCLEVBQWtDQyxNQUFNLEdBQUcsQ0FBM0MsRUFBOEM7QUFDbkQsUUFBTStCLEtBQUssR0FBR0wsS0FBSyxDQUFDQyxLQUFELEVBQVE1QixLQUFSLEVBQWVDLE1BQWYsQ0FBbkI7QUFDQSxTQUFRLEtBQUkrQixLQUFLLENBQ2Q1QixHQURTLENBQ0xZLEdBQUcsSUFBSUEsR0FBRyxDQUFDWixHQUFKLENBQVFHLENBQUMsSUFBS0EsQ0FBQyxHQUFHLEdBQUgsR0FBUyxHQUF4QixFQUE4QjZCLElBQTlCLENBQW1DLEVBQW5DLENBREYsRUFFVEEsSUFGUyxDQUVKLElBRkksQ0FFRSxFQUZkO0FBR0QiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbml0KHdpZHRoLCBoZWlnaHQpIHtcbiAgcmV0dXJuIG5ldyBBcnJheShoZWlnaHQpLmZpbGwoKS5tYXAoKCkgPT4gbmV3IEFycmF5KHdpZHRoKS5maWxsKGZhbHNlKSk7XG59XG5cbmZ1bmN0aW9uIHJlY3Qoc3RhdGUsIHgsIHkpIHtcbiAgZm9yIChsZXQgaiA9IDA7IGogPCB5OyBqKyspIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHg7IGkrKykge1xuICAgICAgc3RhdGVbal1baV0gPSB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RhdGU7XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZVJvdyhzdGF0ZSwgeCwgeSkge1xuICBjb25zdCBtb3ZlZCA9IHN0YXRlW3ldLnNwbGljZSgteCwgeCk7XG4gIHN0YXRlW3ldID0gbW92ZWQuY29uY2F0KHN0YXRlW3ldKTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5mdW5jdGlvbiBmbGlwKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZVswXS5tYXAoKHgsIGkpID0+IHN0YXRlLm1hcChyb3cgPT4gcm93W2ldKSk7XG59XG5cbmZ1bmN0aW9uIHJvdGF0ZUNvbHVtbihzdGF0ZSwgeCwgeSkge1xuICByZXR1cm4gZmxpcChyb3RhdGVSb3coZmxpcChzdGF0ZSksIHksIHgpKTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlbihzY3JlZW4pIHtcbiAgcmV0dXJuIHNjcmVlbi5yZWR1Y2UoKGFsbCwgcm93KSA9PiBhbGwuY29uY2F0KHJvdyksIFtdKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VDb21tYW5kKGNvbW1hbmQpIHtcbiAgaWYgKGNvbW1hbmQuc3RhcnRzV2l0aCgncmVjdCcpKSB7XG4gICAgY29uc3QgWywgeCwgeV0gPSBjb21tYW5kLm1hdGNoKC9ecmVjdCAoXFxkKyl4KFxcZCspJC8pO1xuICAgIHJldHVybiBzdGF0ZSA9PiByZWN0KHN0YXRlLCBwYXJzZUludCh4KSwgcGFyc2VJbnQoeSkpO1xuICB9IGVsc2UgaWYgKGNvbW1hbmQuc3RhcnRzV2l0aCgncm90YXRlIHJvdycpKSB7XG4gICAgY29uc3QgWywgeSwgeF0gPSBjb21tYW5kLm1hdGNoKC9ecm90YXRlIHJvdyB5PShcXGQrKSBieSAoXFxkKykkLyk7XG4gICAgcmV0dXJuIHN0YXRlID0+IHJvdGF0ZVJvdyhzdGF0ZSwgcGFyc2VJbnQoeCksIHBhcnNlSW50KHkpKTtcbiAgfSBlbHNlIGlmIChjb21tYW5kLnN0YXJ0c1dpdGgoJ3JvdGF0ZSBjb2x1bW4nKSkge1xuICAgIGNvbnN0IFssIHgsIHldID0gY29tbWFuZC5tYXRjaCgvXnJvdGF0ZSBjb2x1bW4geD0oXFxkKykgYnkgKFxcZCspJC8pO1xuICAgIHJldHVybiBzdGF0ZSA9PiByb3RhdGVDb2x1bW4oc3RhdGUsIHBhcnNlSW50KHgpLCBwYXJzZUludCh5KSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc29sdmUoaW5wdXQsIHdpZHRoLCBoZWlnaHQpIHtcbiAgY29uc3Qgc2NyZWVuID0gaW5pdCh3aWR0aCwgaGVpZ2h0KTtcbiAgcmV0dXJuIGlucHV0XG4gICAgLnNwbGl0KCdcXG4nKVxuICAgIC5tYXAocGFyc2VDb21tYW5kKVxuICAgIC5yZWR1Y2UoKHN0YXRlLCBmbikgPT4gZm4oc3RhdGUpLCBzY3JlZW4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDEoaW5wdXQsIHdpZHRoID0gNTAsIGhlaWdodCA9IDYpIHtcbiAgY29uc3QgZmluYWwgPSBzb2x2ZShpbnB1dCwgd2lkdGgsIGhlaWdodCk7XG4gIHJldHVybiBmbGF0dGVuKGZpbmFsKS5maWx0ZXIoeCA9PiB4KS5sZW5ndGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MihpbnB1dCwgd2lkdGggPSA1MCwgaGVpZ2h0ID0gNikge1xuICBjb25zdCBmaW5hbCA9IHNvbHZlKGlucHV0LCB3aWR0aCwgaGVpZ2h0KTtcbiAgcmV0dXJuIGBcXG4ke2ZpbmFsXG4gICAgLm1hcChyb3cgPT4gcm93Lm1hcCh4ID0+ICh4ID8gJyMnIDogJy4nKSkuam9pbignJykpXG4gICAgLmpvaW4oJ1xcbicpfWA7XG59XG4iXX0=