d3080330b58b08466a8c833bbb13810d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part2 = exports.part1 = void 0;

function countLights(input, operations) {
  return input.split('\n').map(x => x.match(/^(.*) (\d+),(\d+) through (\d+),(\d+)$/)).map(x => ({
    op: operations[x[1]],
    start: {
      x: parseInt(x[2]),
      y: parseInt(x[3])
    },
    end: {
      x: parseInt(x[4]),
      y: parseInt(x[5])
    }
  })).reduce((state, next) => {
    for (let x = next.start.x; x <= next.end.x; x++) {
      for (let y = next.start.y; y <= next.end.y; y++) {
        state[y][x] = next.op(state[y][x]);
      }
    }

    return state;
  }, new Array(1000).fill(undefined).map(() => new Array(1000).fill(0))).reduce((sum, row) => sum + row.reduce((sum, x) => sum + x), 0);
}

const part1 = input => countLights(input, {
  'turn on': () => 1,
  'turn off': () => 0,
  toggle: val => val === 0 ? 1 : 0
});

exports.part1 = part1;

const part2 = input => countLights(input, {
  'turn on': val => val + 1,
  'turn off': val => Math.max(val - 1, 0),
  toggle: val => val + 2
});

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTA2LmpzIl0sIm5hbWVzIjpbImNvdW50TGlnaHRzIiwiaW5wdXQiLCJvcGVyYXRpb25zIiwic3BsaXQiLCJtYXAiLCJ4IiwibWF0Y2giLCJvcCIsInN0YXJ0IiwicGFyc2VJbnQiLCJ5IiwiZW5kIiwicmVkdWNlIiwic3RhdGUiLCJuZXh0IiwiQXJyYXkiLCJmaWxsIiwidW5kZWZpbmVkIiwic3VtIiwicm93IiwicGFydDEiLCJ0b2dnbGUiLCJ2YWwiLCJwYXJ0MiIsIk1hdGgiLCJtYXgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFTQSxXQUFULENBQXFCQyxLQUFyQixFQUE0QkMsVUFBNUIsRUFBd0M7QUFDdEMsU0FBT0QsS0FBSyxDQUNURSxLQURJLENBQ0UsSUFERixFQUVKQyxHQUZJLENBRUFDLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxLQUFGLENBQVEsd0NBQVIsQ0FGTCxFQUdKRixHQUhJLENBR0FDLENBQUMsS0FBSztBQUNURSxJQUFBQSxFQUFFLEVBQUVMLFVBQVUsQ0FBQ0csQ0FBQyxDQUFDLENBQUQsQ0FBRixDQURMO0FBRVRHLElBQUFBLEtBQUssRUFBRTtBQUFFSCxNQUFBQSxDQUFDLEVBQUVJLFFBQVEsQ0FBQ0osQ0FBQyxDQUFDLENBQUQsQ0FBRixDQUFiO0FBQXFCSyxNQUFBQSxDQUFDLEVBQUVELFFBQVEsQ0FBQ0osQ0FBQyxDQUFDLENBQUQsQ0FBRjtBQUFoQyxLQUZFO0FBR1RNLElBQUFBLEdBQUcsRUFBRTtBQUFFTixNQUFBQSxDQUFDLEVBQUVJLFFBQVEsQ0FBQ0osQ0FBQyxDQUFDLENBQUQsQ0FBRixDQUFiO0FBQXFCSyxNQUFBQSxDQUFDLEVBQUVELFFBQVEsQ0FBQ0osQ0FBQyxDQUFDLENBQUQsQ0FBRjtBQUFoQztBQUhJLEdBQUwsQ0FIRCxFQVFKTyxNQVJJLENBU0gsQ0FBQ0MsS0FBRCxFQUFRQyxJQUFSLEtBQWlCO0FBQ2YsU0FBSyxJQUFJVCxDQUFDLEdBQUdTLElBQUksQ0FBQ04sS0FBTCxDQUFXSCxDQUF4QixFQUEyQkEsQ0FBQyxJQUFJUyxJQUFJLENBQUNILEdBQUwsQ0FBU04sQ0FBekMsRUFBNENBLENBQUMsRUFBN0MsRUFBaUQ7QUFDL0MsV0FBSyxJQUFJSyxDQUFDLEdBQUdJLElBQUksQ0FBQ04sS0FBTCxDQUFXRSxDQUF4QixFQUEyQkEsQ0FBQyxJQUFJSSxJQUFJLENBQUNILEdBQUwsQ0FBU0QsQ0FBekMsRUFBNENBLENBQUMsRUFBN0MsRUFBaUQ7QUFDL0NHLFFBQUFBLEtBQUssQ0FBQ0gsQ0FBRCxDQUFMLENBQVNMLENBQVQsSUFBY1MsSUFBSSxDQUFDUCxFQUFMLENBQVFNLEtBQUssQ0FBQ0gsQ0FBRCxDQUFMLENBQVNMLENBQVQsQ0FBUixDQUFkO0FBQ0Q7QUFDRjs7QUFDRCxXQUFPUSxLQUFQO0FBQ0QsR0FoQkUsRUFpQkgsSUFBSUUsS0FBSixDQUFVLElBQVYsRUFBZ0JDLElBQWhCLENBQXFCQyxTQUFyQixFQUFnQ2IsR0FBaEMsQ0FBb0MsTUFBTSxJQUFJVyxLQUFKLENBQVUsSUFBVixFQUFnQkMsSUFBaEIsQ0FBcUIsQ0FBckIsQ0FBMUMsQ0FqQkcsRUFtQkpKLE1BbkJJLENBbUJHLENBQUNNLEdBQUQsRUFBTUMsR0FBTixLQUFjRCxHQUFHLEdBQUdDLEdBQUcsQ0FBQ1AsTUFBSixDQUFXLENBQUNNLEdBQUQsRUFBTWIsQ0FBTixLQUFZYSxHQUFHLEdBQUdiLENBQTdCLENBbkJ2QixFQW1Cd0QsQ0FuQnhELENBQVA7QUFvQkQ7O0FBRU0sTUFBTWUsS0FBSyxHQUFHbkIsS0FBSyxJQUN4QkQsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsYUFBVyxNQUFNLENBREE7QUFFakIsY0FBWSxNQUFNLENBRkQ7QUFHakJvQixFQUFBQSxNQUFNLEVBQUVDLEdBQUcsSUFBS0EsR0FBRyxLQUFLLENBQVIsR0FBWSxDQUFaLEdBQWdCO0FBSGYsQ0FBUixDQUROOzs7O0FBT0EsTUFBTUMsS0FBSyxHQUFHdEIsS0FBSyxJQUN4QkQsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsYUFBV3FCLEdBQUcsSUFBSUEsR0FBRyxHQUFHLENBRFA7QUFFakIsY0FBWUEsR0FBRyxJQUFJRSxJQUFJLENBQUNDLEdBQUwsQ0FBU0gsR0FBRyxHQUFHLENBQWYsRUFBa0IsQ0FBbEIsQ0FGRjtBQUdqQkQsRUFBQUEsTUFBTSxFQUFFQyxHQUFHLElBQUlBLEdBQUcsR0FBRztBQUhKLENBQVIsQ0FETiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGNvdW50TGlnaHRzKGlucHV0LCBvcGVyYXRpb25zKSB7XG4gIHJldHVybiBpbnB1dFxuICAgIC5zcGxpdCgnXFxuJylcbiAgICAubWFwKHggPT4geC5tYXRjaCgvXiguKikgKFxcZCspLChcXGQrKSB0aHJvdWdoIChcXGQrKSwoXFxkKykkLykpXG4gICAgLm1hcCh4ID0+ICh7XG4gICAgICBvcDogb3BlcmF0aW9uc1t4WzFdXSxcbiAgICAgIHN0YXJ0OiB7IHg6IHBhcnNlSW50KHhbMl0pLCB5OiBwYXJzZUludCh4WzNdKSB9LFxuICAgICAgZW5kOiB7IHg6IHBhcnNlSW50KHhbNF0pLCB5OiBwYXJzZUludCh4WzVdKSB9LFxuICAgIH0pKVxuICAgIC5yZWR1Y2UoXG4gICAgICAoc3RhdGUsIG5leHQpID0+IHtcbiAgICAgICAgZm9yIChsZXQgeCA9IG5leHQuc3RhcnQueDsgeCA8PSBuZXh0LmVuZC54OyB4KyspIHtcbiAgICAgICAgICBmb3IgKGxldCB5ID0gbmV4dC5zdGFydC55OyB5IDw9IG5leHQuZW5kLnk7IHkrKykge1xuICAgICAgICAgICAgc3RhdGVbeV1beF0gPSBuZXh0Lm9wKHN0YXRlW3ldW3hdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfSxcbiAgICAgIG5ldyBBcnJheSgxMDAwKS5maWxsKHVuZGVmaW5lZCkubWFwKCgpID0+IG5ldyBBcnJheSgxMDAwKS5maWxsKDApKSxcbiAgICApXG4gICAgLnJlZHVjZSgoc3VtLCByb3cpID0+IHN1bSArIHJvdy5yZWR1Y2UoKHN1bSwgeCkgPT4gc3VtICsgeCksIDApO1xufVxuXG5leHBvcnQgY29uc3QgcGFydDEgPSBpbnB1dCA9PlxuICBjb3VudExpZ2h0cyhpbnB1dCwge1xuICAgICd0dXJuIG9uJzogKCkgPT4gMSxcbiAgICAndHVybiBvZmYnOiAoKSA9PiAwLFxuICAgIHRvZ2dsZTogdmFsID0+ICh2YWwgPT09IDAgPyAxIDogMCksXG4gIH0pO1xuXG5leHBvcnQgY29uc3QgcGFydDIgPSBpbnB1dCA9PlxuICBjb3VudExpZ2h0cyhpbnB1dCwge1xuICAgICd0dXJuIG9uJzogdmFsID0+IHZhbCArIDEsXG4gICAgJ3R1cm4gb2ZmJzogdmFsID0+IE1hdGgubWF4KHZhbCAtIDEsIDApLFxuICAgIHRvZ2dsZTogdmFsID0+IHZhbCArIDIsXG4gIH0pO1xuIl19