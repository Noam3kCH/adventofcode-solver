{"version":3,"sources":["day06.js"],"names":["countLights","input","operations","split","map","x","match","op","start","parseInt","y","end","reduce","state","next","Array","fill","undefined","sum","row","part1","toggle","val","part2","Math","max"],"mappings":";;;;;;;AAAA,SAASA,WAAT,CAAqBC,KAArB,EAA4BC,UAA5B,EAAwC;AACtC,SAAOD,KAAK,CACTE,KADI,CACE,IADF,EAEJC,GAFI,CAEAC,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQ,wCAAR,CAFL,EAGJF,GAHI,CAGAC,CAAC,KAAK;AACTE,IAAAA,EAAE,EAAEL,UAAU,CAACG,CAAC,CAAC,CAAD,CAAF,CADL;AAETG,IAAAA,KAAK,EAAE;AAAEH,MAAAA,CAAC,EAAEI,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,CAAb;AAAqBK,MAAAA,CAAC,EAAED,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF;AAAhC,KAFE;AAGTM,IAAAA,GAAG,EAAE;AAAEN,MAAAA,CAAC,EAAEI,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,CAAb;AAAqBK,MAAAA,CAAC,EAAED,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF;AAAhC;AAHI,GAAL,CAHD,EAQJO,MARI,CASH,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACf,SAAK,IAAIT,CAAC,GAAGS,IAAI,CAACN,KAAL,CAAWH,CAAxB,EAA2BA,CAAC,IAAIS,IAAI,CAACH,GAAL,CAASN,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAC/C,WAAK,IAAIK,CAAC,GAAGI,IAAI,CAACN,KAAL,CAAWE,CAAxB,EAA2BA,CAAC,IAAII,IAAI,CAACH,GAAL,CAASD,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAC/CG,QAAAA,KAAK,CAACH,CAAD,CAAL,CAASL,CAAT,IAAcS,IAAI,CAACP,EAAL,CAAQM,KAAK,CAACH,CAAD,CAAL,CAASL,CAAT,CAAR,CAAd;AACD;AACF;;AACD,WAAOQ,KAAP;AACD,GAhBE,EAiBH,IAAIE,KAAJ,CAAU,IAAV,EAAgBC,IAAhB,CAAqBC,SAArB,EAAgCb,GAAhC,CAAoC,MAAM,IAAIW,KAAJ,CAAU,IAAV,EAAgBC,IAAhB,CAAqB,CAArB,CAA1C,CAjBG,EAmBJJ,MAnBI,CAmBG,CAACM,GAAD,EAAMC,GAAN,KAAcD,GAAG,GAAGC,GAAG,CAACP,MAAJ,CAAW,CAACM,GAAD,EAAMb,CAAN,KAAYa,GAAG,GAAGb,CAA7B,CAnBvB,EAmBwD,CAnBxD,CAAP;AAoBD;;AAEM,MAAMe,KAAK,GAAGnB,KAAK,IACxBD,WAAW,CAACC,KAAD,EAAQ;AACjB,aAAW,MAAM,CADA;AAEjB,cAAY,MAAM,CAFD;AAGjBoB,EAAAA,MAAM,EAAEC,GAAG,IAAKA,GAAG,KAAK,CAAR,GAAY,CAAZ,GAAgB;AAHf,CAAR,CADN;;;;AAOA,MAAMC,KAAK,GAAGtB,KAAK,IACxBD,WAAW,CAACC,KAAD,EAAQ;AACjB,aAAWqB,GAAG,IAAIA,GAAG,GAAG,CADP;AAEjB,cAAYA,GAAG,IAAIE,IAAI,CAACC,GAAL,CAASH,GAAG,GAAG,CAAf,EAAkB,CAAlB,CAFF;AAGjBD,EAAAA,MAAM,EAAEC,GAAG,IAAIA,GAAG,GAAG;AAHJ,CAAR,CADN","sourcesContent":["function countLights(input, operations) {\n  return input\n    .split('\\n')\n    .map(x => x.match(/^(.*) (\\d+),(\\d+) through (\\d+),(\\d+)$/))\n    .map(x => ({\n      op: operations[x[1]],\n      start: { x: parseInt(x[2]), y: parseInt(x[3]) },\n      end: { x: parseInt(x[4]), y: parseInt(x[5]) },\n    }))\n    .reduce(\n      (state, next) => {\n        for (let x = next.start.x; x <= next.end.x; x++) {\n          for (let y = next.start.y; y <= next.end.y; y++) {\n            state[y][x] = next.op(state[y][x]);\n          }\n        }\n        return state;\n      },\n      new Array(1000).fill(undefined).map(() => new Array(1000).fill(0)),\n    )\n    .reduce((sum, row) => sum + row.reduce((sum, x) => sum + x), 0);\n}\n\nexport const part1 = input =>\n  countLights(input, {\n    'turn on': () => 1,\n    'turn off': () => 0,\n    toggle: val => (val === 0 ? 1 : 0),\n  });\n\nexport const part2 = input =>\n  countLights(input, {\n    'turn on': val => val + 1,\n    'turn off': val => Math.max(val - 1, 0),\n    toggle: val => val + 2,\n  });\n"]}