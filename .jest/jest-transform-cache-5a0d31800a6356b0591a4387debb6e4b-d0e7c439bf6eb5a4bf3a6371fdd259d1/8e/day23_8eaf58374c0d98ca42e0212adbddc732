df2f42ad3a65fa3075ca243e49f3710c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

var _child_process = require("child_process");

function parse(input) {
  return input.split('\n').map(x => x.match(/(-?\d+),(-?\d+),(-?\d+)>, r=(-?\d+)/).map(x => parseInt(x))).map(([, x, y, z, r]) => ({
    x,
    y,
    z,
    r
  }));
}

function distance(a, b = {
  x: 0,
  y: 0,
  z: 0
}) {
  return Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + Math.abs(a.z - b.z);
}

function part1(input) {
  const bots = parse(input);
  const strong = bots.sort((a, b) => b.r - a.r)[0];
  const inRange = bots.filter(a => distance(a, strong) <= strong.r);
  return inRange.length;
} // brew install z3


function part2(input) {
  const bots = parse(input);
  const smt = `
(declare-const x Int)
(declare-const y Int)
(declare-const z Int)
(declare-const distance Int)
(define-fun in_range ((nx Int) (ny Int) (nz Int) (nr Int)) Int
  (if (<= (+ (abs (- x nx)) (abs (- y ny)) (abs (- z nz))) nr) 1 0)
)
(assert (= distance (+ (abs x) (abs y) (abs z))))
(maximize (+
  ${bots.map(b => `(in_range ${b.x} ${b.y} ${b.z} ${b.r})`).join('\n  ')}
))
(minimize distance)
(check-sat)
(get-model)`;
  const output = (0, _child_process.execSync)('z3 -in', {
    input: smt
  }).toString();
  return parseInt(output.match(/\d+/g).pop(), 10);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTIzLmpzIl0sIm5hbWVzIjpbInBhcnNlIiwiaW5wdXQiLCJzcGxpdCIsIm1hcCIsIngiLCJtYXRjaCIsInBhcnNlSW50IiwieSIsInoiLCJyIiwiZGlzdGFuY2UiLCJhIiwiYiIsIk1hdGgiLCJhYnMiLCJwYXJ0MSIsImJvdHMiLCJzdHJvbmciLCJzb3J0IiwiaW5SYW5nZSIsImZpbHRlciIsImxlbmd0aCIsInBhcnQyIiwic210Iiwiam9pbiIsIm91dHB1dCIsInRvU3RyaW5nIiwicG9wIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOztBQUVBLFNBQVNBLEtBQVQsQ0FBZUMsS0FBZixFQUFzQjtBQUNwQixTQUFPQSxLQUFLLENBQ1RDLEtBREksQ0FDRSxJQURGLEVBRUpDLEdBRkksQ0FFQUMsQ0FBQyxJQUNKQSxDQUFDLENBQUNDLEtBQUYsQ0FBUSxxQ0FBUixFQUErQ0YsR0FBL0MsQ0FBbURDLENBQUMsSUFBSUUsUUFBUSxDQUFDRixDQUFELENBQWhFLENBSEcsRUFLSkQsR0FMSSxDQUtBLENBQUMsR0FBR0MsQ0FBSCxFQUFNRyxDQUFOLEVBQVNDLENBQVQsRUFBWUMsQ0FBWixDQUFELE1BQXFCO0FBQUVMLElBQUFBLENBQUY7QUFBS0csSUFBQUEsQ0FBTDtBQUFRQyxJQUFBQSxDQUFSO0FBQVdDLElBQUFBO0FBQVgsR0FBckIsQ0FMQSxDQUFQO0FBTUQ7O0FBRUQsU0FBU0MsUUFBVCxDQUFrQkMsQ0FBbEIsRUFBcUJDLENBQUMsR0FBRztBQUFFUixFQUFBQSxDQUFDLEVBQUUsQ0FBTDtBQUFRRyxFQUFBQSxDQUFDLEVBQUUsQ0FBWDtBQUFjQyxFQUFBQSxDQUFDLEVBQUU7QUFBakIsQ0FBekIsRUFBK0M7QUFDN0MsU0FBT0ssSUFBSSxDQUFDQyxHQUFMLENBQVNILENBQUMsQ0FBQ1AsQ0FBRixHQUFNUSxDQUFDLENBQUNSLENBQWpCLElBQXNCUyxJQUFJLENBQUNDLEdBQUwsQ0FBU0gsQ0FBQyxDQUFDSixDQUFGLEdBQU1LLENBQUMsQ0FBQ0wsQ0FBakIsQ0FBdEIsR0FBNENNLElBQUksQ0FBQ0MsR0FBTCxDQUFTSCxDQUFDLENBQUNILENBQUYsR0FBTUksQ0FBQyxDQUFDSixDQUFqQixDQUFuRDtBQUNEOztBQUVNLFNBQVNPLEtBQVQsQ0FBZWQsS0FBZixFQUFzQjtBQUMzQixRQUFNZSxJQUFJLEdBQUdoQixLQUFLLENBQUNDLEtBQUQsQ0FBbEI7QUFDQSxRQUFNZ0IsTUFBTSxHQUFHRCxJQUFJLENBQUNFLElBQUwsQ0FBVSxDQUFDUCxDQUFELEVBQUlDLENBQUosS0FBVUEsQ0FBQyxDQUFDSCxDQUFGLEdBQU1FLENBQUMsQ0FBQ0YsQ0FBNUIsRUFBK0IsQ0FBL0IsQ0FBZjtBQUNBLFFBQU1VLE9BQU8sR0FBR0gsSUFBSSxDQUFDSSxNQUFMLENBQVlULENBQUMsSUFBSUQsUUFBUSxDQUFDQyxDQUFELEVBQUlNLE1BQUosQ0FBUixJQUF1QkEsTUFBTSxDQUFDUixDQUEvQyxDQUFoQjtBQUNBLFNBQU9VLE9BQU8sQ0FBQ0UsTUFBZjtBQUNELEMsQ0FFRDs7O0FBQ08sU0FBU0MsS0FBVCxDQUFlckIsS0FBZixFQUFzQjtBQUMzQixRQUFNZSxJQUFJLEdBQUdoQixLQUFLLENBQUNDLEtBQUQsQ0FBbEI7QUFDQSxRQUFNc0IsR0FBRyxHQUFJOzs7Ozs7Ozs7O0lBVVhQLElBQUksQ0FBQ2IsR0FBTCxDQUFTUyxDQUFDLElBQUssYUFBWUEsQ0FBQyxDQUFDUixDQUFFLElBQUdRLENBQUMsQ0FBQ0wsQ0FBRSxJQUFHSyxDQUFDLENBQUNKLENBQUUsSUFBR0ksQ0FBQyxDQUFDSCxDQUFFLEdBQXBELEVBQXdEZSxJQUF4RCxDQUE2RCxNQUE3RCxDQUFxRTs7OztZQVZ2RTtBQWVBLFFBQU1DLE1BQU0sR0FBRyw2QkFBUyxRQUFULEVBQW1CO0FBQUV4QixJQUFBQSxLQUFLLEVBQUVzQjtBQUFULEdBQW5CLEVBQW1DRyxRQUFuQyxFQUFmO0FBQ0EsU0FBT3BCLFFBQVEsQ0FBQ21CLE1BQU0sQ0FBQ3BCLEtBQVAsQ0FBYSxNQUFiLEVBQXFCc0IsR0FBckIsRUFBRCxFQUE2QixFQUE3QixDQUFmO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBleGVjU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuXG5mdW5jdGlvbiBwYXJzZShpbnB1dCkge1xuICByZXR1cm4gaW5wdXRcbiAgICAuc3BsaXQoJ1xcbicpXG4gICAgLm1hcCh4ID0+XG4gICAgICB4Lm1hdGNoKC8oLT9cXGQrKSwoLT9cXGQrKSwoLT9cXGQrKT4sIHI9KC0/XFxkKykvKS5tYXAoeCA9PiBwYXJzZUludCh4KSksXG4gICAgKVxuICAgIC5tYXAoKFssIHgsIHksIHosIHJdKSA9PiAoeyB4LCB5LCB6LCByIH0pKTtcbn1cblxuZnVuY3Rpb24gZGlzdGFuY2UoYSwgYiA9IHsgeDogMCwgeTogMCwgejogMCB9KSB7XG4gIHJldHVybiBNYXRoLmFicyhhLnggLSBiLngpICsgTWF0aC5hYnMoYS55IC0gYi55KSArIE1hdGguYWJzKGEueiAtIGIueik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MShpbnB1dCkge1xuICBjb25zdCBib3RzID0gcGFyc2UoaW5wdXQpO1xuICBjb25zdCBzdHJvbmcgPSBib3RzLnNvcnQoKGEsIGIpID0+IGIuciAtIGEucilbMF07XG4gIGNvbnN0IGluUmFuZ2UgPSBib3RzLmZpbHRlcihhID0+IGRpc3RhbmNlKGEsIHN0cm9uZykgPD0gc3Ryb25nLnIpO1xuICByZXR1cm4gaW5SYW5nZS5sZW5ndGg7XG59XG5cbi8vIGJyZXcgaW5zdGFsbCB6M1xuZXhwb3J0IGZ1bmN0aW9uIHBhcnQyKGlucHV0KSB7XG4gIGNvbnN0IGJvdHMgPSBwYXJzZShpbnB1dCk7XG4gIGNvbnN0IHNtdCA9IGBcbihkZWNsYXJlLWNvbnN0IHggSW50KVxuKGRlY2xhcmUtY29uc3QgeSBJbnQpXG4oZGVjbGFyZS1jb25zdCB6IEludClcbihkZWNsYXJlLWNvbnN0IGRpc3RhbmNlIEludClcbihkZWZpbmUtZnVuIGluX3JhbmdlICgobnggSW50KSAobnkgSW50KSAobnogSW50KSAobnIgSW50KSkgSW50XG4gIChpZiAoPD0gKCsgKGFicyAoLSB4IG54KSkgKGFicyAoLSB5IG55KSkgKGFicyAoLSB6IG56KSkpIG5yKSAxIDApXG4pXG4oYXNzZXJ0ICg9IGRpc3RhbmNlICgrIChhYnMgeCkgKGFicyB5KSAoYWJzIHopKSkpXG4obWF4aW1pemUgKCtcbiAgJHtib3RzLm1hcChiID0+IGAoaW5fcmFuZ2UgJHtiLnh9ICR7Yi55fSAke2Iuen0gJHtiLnJ9KWApLmpvaW4oJ1xcbiAgJyl9XG4pKVxuKG1pbmltaXplIGRpc3RhbmNlKVxuKGNoZWNrLXNhdClcbihnZXQtbW9kZWwpYDtcbiAgY29uc3Qgb3V0cHV0ID0gZXhlY1N5bmMoJ3ozIC1pbicsIHsgaW5wdXQ6IHNtdCB9KS50b1N0cmluZygpO1xuICByZXR1cm4gcGFyc2VJbnQob3V0cHV0Lm1hdGNoKC9cXGQrL2cpLnBvcCgpLCAxMCk7XG59XG4iXX0=