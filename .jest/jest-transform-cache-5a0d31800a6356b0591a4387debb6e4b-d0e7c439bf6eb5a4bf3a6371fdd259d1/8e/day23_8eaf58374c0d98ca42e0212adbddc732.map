{"version":3,"sources":["day23.js"],"names":["parse","input","split","map","x","match","parseInt","y","z","r","distance","a","b","Math","abs","part1","bots","strong","sort","inRange","filter","length","part2","smt","join","output","toString","pop"],"mappings":";;;;;;;;AAAA;;AAEA,SAASA,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOA,KAAK,CACTC,KADI,CACE,IADF,EAEJC,GAFI,CAEAC,CAAC,IACJA,CAAC,CAACC,KAAF,CAAQ,qCAAR,EAA+CF,GAA/C,CAAmDC,CAAC,IAAIE,QAAQ,CAACF,CAAD,CAAhE,CAHG,EAKJD,GALI,CAKA,CAAC,GAAGC,CAAH,EAAMG,CAAN,EAASC,CAAT,EAAYC,CAAZ,CAAD,MAAqB;AAAEL,IAAAA,CAAF;AAAKG,IAAAA,CAAL;AAAQC,IAAAA,CAAR;AAAWC,IAAAA;AAAX,GAArB,CALA,CAAP;AAMD;;AAED,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,CAAC,GAAG;AAAER,EAAAA,CAAC,EAAE,CAAL;AAAQG,EAAAA,CAAC,EAAE,CAAX;AAAcC,EAAAA,CAAC,EAAE;AAAjB,CAAzB,EAA+C;AAC7C,SAAOK,IAAI,CAACC,GAAL,CAASH,CAAC,CAACP,CAAF,GAAMQ,CAAC,CAACR,CAAjB,IAAsBS,IAAI,CAACC,GAAL,CAASH,CAAC,CAACJ,CAAF,GAAMK,CAAC,CAACL,CAAjB,CAAtB,GAA4CM,IAAI,CAACC,GAAL,CAASH,CAAC,CAACH,CAAF,GAAMI,CAAC,CAACJ,CAAjB,CAAnD;AACD;;AAEM,SAASO,KAAT,CAAed,KAAf,EAAsB;AAC3B,QAAMe,IAAI,GAAGhB,KAAK,CAACC,KAAD,CAAlB;AACA,QAAMgB,MAAM,GAAGD,IAAI,CAACE,IAAL,CAAU,CAACP,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACH,CAAF,GAAME,CAAC,CAACF,CAA5B,EAA+B,CAA/B,CAAf;AACA,QAAMU,OAAO,GAAGH,IAAI,CAACI,MAAL,CAAYT,CAAC,IAAID,QAAQ,CAACC,CAAD,EAAIM,MAAJ,CAAR,IAAuBA,MAAM,CAACR,CAA/C,CAAhB;AACA,SAAOU,OAAO,CAACE,MAAf;AACD,C,CAED;;;AACO,SAASC,KAAT,CAAerB,KAAf,EAAsB;AAC3B,QAAMe,IAAI,GAAGhB,KAAK,CAACC,KAAD,CAAlB;AACA,QAAMsB,GAAG,GAAI;;;;;;;;;;IAUXP,IAAI,CAACb,GAAL,CAASS,CAAC,IAAK,aAAYA,CAAC,CAACR,CAAE,IAAGQ,CAAC,CAACL,CAAE,IAAGK,CAAC,CAACJ,CAAE,IAAGI,CAAC,CAACH,CAAE,GAApD,EAAwDe,IAAxD,CAA6D,MAA7D,CAAqE;;;;YAVvE;AAeA,QAAMC,MAAM,GAAG,6BAAS,QAAT,EAAmB;AAAExB,IAAAA,KAAK,EAAEsB;AAAT,GAAnB,EAAmCG,QAAnC,EAAf;AACA,SAAOpB,QAAQ,CAACmB,MAAM,CAACpB,KAAP,CAAa,MAAb,EAAqBsB,GAArB,EAAD,EAA6B,EAA7B,CAAf;AACD","sourcesContent":["import { execSync } from 'child_process';\n\nfunction parse(input) {\n  return input\n    .split('\\n')\n    .map(x =>\n      x.match(/(-?\\d+),(-?\\d+),(-?\\d+)>, r=(-?\\d+)/).map(x => parseInt(x)),\n    )\n    .map(([, x, y, z, r]) => ({ x, y, z, r }));\n}\n\nfunction distance(a, b = { x: 0, y: 0, z: 0 }) {\n  return Math.abs(a.x - b.x) + Math.abs(a.y - b.y) + Math.abs(a.z - b.z);\n}\n\nexport function part1(input) {\n  const bots = parse(input);\n  const strong = bots.sort((a, b) => b.r - a.r)[0];\n  const inRange = bots.filter(a => distance(a, strong) <= strong.r);\n  return inRange.length;\n}\n\n// brew install z3\nexport function part2(input) {\n  const bots = parse(input);\n  const smt = `\n(declare-const x Int)\n(declare-const y Int)\n(declare-const z Int)\n(declare-const distance Int)\n(define-fun in_range ((nx Int) (ny Int) (nz Int) (nr Int)) Int\n  (if (<= (+ (abs (- x nx)) (abs (- y ny)) (abs (- z nz))) nr) 1 0)\n)\n(assert (= distance (+ (abs x) (abs y) (abs z))))\n(maximize (+\n  ${bots.map(b => `(in_range ${b.x} ${b.y} ${b.z} ${b.r})`).join('\\n  ')}\n))\n(minimize distance)\n(check-sat)\n(get-model)`;\n  const output = execSync('z3 -in', { input: smt }).toString();\n  return parseInt(output.match(/\\d+/g).pop(), 10);\n}\n"]}