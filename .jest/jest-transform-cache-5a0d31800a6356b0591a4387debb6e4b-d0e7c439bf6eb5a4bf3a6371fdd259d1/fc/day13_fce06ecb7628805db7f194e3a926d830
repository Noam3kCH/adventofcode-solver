2dccdae969f938e388d3b6d43a8bcf7a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

const position = cart => `${cart.x},${cart.y}`;

const onSlash = {
  '>': '^',
  '<': 'v',
  '^': '>',
  v: '<'
};
const onBackSlash = {
  '>': 'v',
  '<': '^',
  '^': '<',
  v: '>'
};
const nextTurn = {
  left: 'straight',
  straight: 'right',
  right: 'left'
};
const onTurn = {
  left: {
    '>': '^',
    '<': 'v',
    '^': '<',
    v: '>'
  },
  right: {
    '>': 'v',
    '<': '^',
    '^': '>',
    v: '<'
  },
  straight: {
    '>': '>',
    '<': '<',
    '^': '^',
    v: 'v'
  }
};
const onMove = {
  '>': c => c.x++,
  '<': c => c.x--,
  '^': c => c.y--,
  v: c => c.y++
};

function tick(map, carts) {
  const collisions = [];
  carts.sort((a, b) => a.y - b.y || a.x - b.x);
  carts.forEach(cart => {
    onMove[cart.direction](cart);

    if (map[cart.y][cart.x] === '/') {
      cart.direction = onSlash[cart.direction];
    } else if (map[cart.y][cart.x] === '\\') {
      cart.direction = onBackSlash[cart.direction];
    } else if (map[cart.y][cart.x] === '+') {
      cart.direction = onTurn[cart.nextTurn][cart.direction];
      cart.nextTurn = nextTurn[cart.nextTurn];
    }

    const other = carts.find(x => x !== cart && position(x) === position(cart));

    if (other) {
      collisions.push(cart, other);
    }
  });
  return collisions;
}

function parse(input) {
  const carts = [];
  const map = input.replace(/[v^]/g, '|').replace(/[<>]/g, '-').split('\n');
  input.split('\n').forEach((row, y) => row.split('').forEach((cell, x) => {
    if ('v^<>'.includes(cell)) {
      carts.push({
        direction: cell,
        nextTurn: 'left',
        x,
        y
      });
    }
  }));
  return {
    map,
    carts
  };
}

function part1(input) {
  const {
    map,
    carts
  } = parse(input);
  let collisions = [];

  while (collisions.length === 0) {
    collisions = tick(map, carts);
  }

  return position(collisions[0]);
}

function part2(input) {
  const {
    map,
    carts
  } = parse(input);

  while (carts.length > 1) {
    const collisions = tick(map, carts);
    collisions.forEach(cart => carts.splice(carts.indexOf(cart), 1));
  }

  return position(carts[0]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTEzLmpzIl0sIm5hbWVzIjpbInBvc2l0aW9uIiwiY2FydCIsIngiLCJ5Iiwib25TbGFzaCIsInYiLCJvbkJhY2tTbGFzaCIsIm5leHRUdXJuIiwibGVmdCIsInN0cmFpZ2h0IiwicmlnaHQiLCJvblR1cm4iLCJvbk1vdmUiLCJjIiwidGljayIsIm1hcCIsImNhcnRzIiwiY29sbGlzaW9ucyIsInNvcnQiLCJhIiwiYiIsImZvckVhY2giLCJkaXJlY3Rpb24iLCJvdGhlciIsImZpbmQiLCJwdXNoIiwicGFyc2UiLCJpbnB1dCIsInJlcGxhY2UiLCJzcGxpdCIsInJvdyIsImNlbGwiLCJpbmNsdWRlcyIsInBhcnQxIiwibGVuZ3RoIiwicGFydDIiLCJzcGxpY2UiLCJpbmRleE9mIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLE1BQU1BLFFBQVEsR0FBR0MsSUFBSSxJQUFLLEdBQUVBLElBQUksQ0FBQ0MsQ0FBRSxJQUFHRCxJQUFJLENBQUNFLENBQUUsRUFBN0M7O0FBQ0EsTUFBTUMsT0FBTyxHQUFHO0FBQUUsT0FBSyxHQUFQO0FBQVksT0FBSyxHQUFqQjtBQUFzQixPQUFLLEdBQTNCO0FBQWdDQyxFQUFBQSxDQUFDLEVBQUU7QUFBbkMsQ0FBaEI7QUFDQSxNQUFNQyxXQUFXLEdBQUc7QUFBRSxPQUFLLEdBQVA7QUFBWSxPQUFLLEdBQWpCO0FBQXNCLE9BQUssR0FBM0I7QUFBZ0NELEVBQUFBLENBQUMsRUFBRTtBQUFuQyxDQUFwQjtBQUNBLE1BQU1FLFFBQVEsR0FBRztBQUFFQyxFQUFBQSxJQUFJLEVBQUUsVUFBUjtBQUFvQkMsRUFBQUEsUUFBUSxFQUFFLE9BQTlCO0FBQXVDQyxFQUFBQSxLQUFLLEVBQUU7QUFBOUMsQ0FBakI7QUFDQSxNQUFNQyxNQUFNLEdBQUc7QUFDYkgsRUFBQUEsSUFBSSxFQUFFO0FBQUUsU0FBSyxHQUFQO0FBQVksU0FBSyxHQUFqQjtBQUFzQixTQUFLLEdBQTNCO0FBQWdDSCxJQUFBQSxDQUFDLEVBQUU7QUFBbkMsR0FE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O0FBQ0FDLElBQUFBLFVBQVUsQ0FBQ0ksT0FBWCxDQUFtQnBCLElBQUksSUFBSWUsS0FBSyxDQUFDb0IsTUFBTixDQUFhcEIsS0FBSyxDQUFDcUIsT0FBTixDQUFjcEMsSUFBZCxDQUFiLEVBQWtDLENBQWxDLENBQTNCO0FBQ0Q7O0FBQ0QsU0FBT0QsUUFBUSxDQUFDZ0IsS0FBSyxDQUFDLENBQUQsQ0FBTixDQUFmO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBwb3NpdGlvbiA9IGNhcnQgPT4gYCR7Y2FydC54fSwke2NhcnQueX1gO1xuY29uc3Qgb25TbGFzaCA9IHsgJz4nOiAnXicsICc8JzogJ3YnLCAnXic6ICc+JywgdjogJzwnIH07XG5jb25zdCBvbkJhY2tTbGFzaCA9IHsgJz4nOiAndicsICc8JzogJ14nLCAnXic6ICc8JywgdjogJz4nIH07XG5jb25zdCBuZXh0VHVybiA9IHsgbGVmdDogJ3N0cmFpZ2h0Jywgc3RyYWlnaHQ6ICdyaWdodCcsIHJpZ2h0OiAnbGVmdCcgfTtcbmNvbnN0IG9uVHVybiA9IHtcbiAgbGVmdDogeyAnPic6ICdeJywgJzwnOiAndicsICdeJzogJzwnLCB2OiAnPicgfSxcbiAgcmlnaHQ6IHsgJz4nOiAndicsICc8JzogJ14nLCAnXic6ICc+JywgdjogJzwnIH0sXG4gIHN0cmFpZ2h0OiB7ICc+JzogJz4nLCAnPCc6ICc8JywgJ14nOiAnXicsIHY6ICd2JyB9LFxufTtcbmNvbnN0IG9uTW92ZSA9IHtcbiAgJz4nOiBjID0+IGMueCsrLFxuICAnPCc6IGMgPT4gYy54LS0sXG4gICdeJzogYyA9PiBjLnktLSxcbiAgdjogYyA9PiBjLnkrKyxcbn07XG5cbmZ1bmN0aW9uIHRpY2sobWFwLCBjYXJ0cykge1xuICBjb25zdCBjb2xsaXNpb25zID0gW107XG4gIGNhcnRzLnNvcnQoKGEsIGIpID0+IGEueSAtIGIueSB8fCBhLnggLSBiLngpO1xuICBjYXJ0cy5mb3JFYWNoKGNhcnQgPT4ge1xuICAgIG9uTW92ZVtjYXJ0LmRpcmVjdGlvbl0oY2FydCk7XG4gICAgaWYgKG1hcFtjYXJ0LnldW2NhcnQueF0gPT09ICcvJykge1xuICAgICAgY2FydC5kaXJlY3Rpb24gPSBvblNsYXNoW2NhcnQuZGlyZWN0aW9uXTtcbiAgICB9IGVsc2UgaWYgKG1hcFtjYXJ0LnldW2NhcnQueF0gPT09ICdcXFxcJykge1xuICAgICAgY2FydC5kaXJlY3Rpb24gPSBvbkJhY2tTbGFzaFtjYXJ0LmRpcmVjdGlvbl07XG4gICAgfSBlbHNlIGlmIChtYXBbY2FydC55XVtjYXJ0LnhdID09PSAnKycpIHtcbiAgICAgIGNhcnQuZGlyZWN0aW9uID0gb25UdXJuW2NhcnQubmV4dFR1cm5dW2NhcnQuZGlyZWN0aW9uXTtcbiAgICAgIGNhcnQubmV4dFR1cm4gPSBuZXh0VHVybltjYXJ0Lm5leHRUdXJuXTtcbiAgICB9XG4gICAgY29uc3Qgb3RoZXIgPSBjYXJ0cy5maW5kKHggPT4geCAhPT0gY2FydCAmJiBwb3NpdGlvbih4KSA9PT0gcG9zaXRpb24oY2FydCkpO1xuICAgIGlmIChvdGhlcikge1xuICAgICAgY29sbGlzaW9ucy5wdXNoKGNhcnQsIG90aGVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY29sbGlzaW9ucztcbn1cblxuZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgY29uc3QgY2FydHMgPSBbXTtcbiAgY29uc3QgbWFwID0gaW5wdXRcbiAgICAucmVwbGFjZSgvW3ZeXS9nLCAnfCcpXG4gICAgLnJlcGxhY2UoL1s8Pl0vZywgJy0nKVxuICAgIC5zcGxpdCgnXFxuJyk7XG4gIGlucHV0LnNwbGl0KCdcXG4nKS5mb3JFYWNoKChyb3csIHkpID0+XG4gICAgcm93LnNwbGl0KCcnKS5mb3JFYWNoKChjZWxsLCB4KSA9PiB7XG4gICAgICBpZiAoJ3ZePD4nLmluY2x1ZGVzKGNlbGwpKSB7XG4gICAgICAgIGNhcnRzLnB1c2goeyBkaXJlY3Rpb246IGNlbGwsIG5leHRUdXJuOiAnbGVmdCcsIHgsIHkgfSk7XG4gICAgICB9XG4gICAgfSksXG4gICk7XG4gIHJldHVybiB7IG1hcCwgY2FydHMgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnQxKGlucHV0KSB7XG4gIGNvbnN0IHsgbWFwLCBjYXJ0cyB9ID0gcGFyc2UoaW5wdXQpO1xuICBsZXQgY29sbGlzaW9ucyA9IFtdO1xuICB3aGlsZSAoY29sbGlzaW9ucy5sZW5ndGggPT09IDApIHtcbiAgICBjb2xsaXNpb25zID0gdGljayhtYXAsIGNhcnRzKTtcbiAgfVxuICByZXR1cm4gcG9zaXRpb24oY29sbGlzaW9uc1swXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MihpbnB1dCkge1xuICBjb25zdCB7IG1hcCwgY2FydHMgfSA9IHBhcnNlKGlucHV0KTtcbiAgd2hpbGUgKGNhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICBjb25zdCBjb2xsaXNpb25zID0gdGljayhtYXAsIGNhcnRzKTtcbiAgICBjb2xsaXNpb25zLmZvckVhY2goY2FydCA9PiBjYXJ0cy5zcGxpY2UoY2FydHMuaW5kZXhPZihjYXJ0KSwgMSkpO1xuICB9XG4gIHJldHVybiBwb3NpdGlvbihjYXJ0c1swXSk7XG59XG4iXX0=