{"version":3,"sources":["day07.js"],"names":["parse","input","split","reduce","programs","x","name","weight","children","match","parseInt","replace","rightWeight","childrenWeight","map","every","sum","unbalanced","findIndex","filter","y","length","balanced","diff","unbalancedName","Error","part1","Object","values","all","concat","find","includes","part2","e","message"],"mappings":"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","sourcesContent":["function parse(input) {\n  return input.split('\\n').reduce((programs, x) => {\n    const [, name, weight, children] = x.match(\n      /^([^\\s]+)\\s+\\((\\d+)\\)(?:\\s+->\\s+(.*))?$/,\n    );\n    return {\n      ...programs,\n      [name]: {\n        name,\n        weight: parseInt(weight),\n        children: children && children.replace(/\\s+/g, '').split(','),\n      },\n    };\n  }, {});\n}\n\nfunction rightWeight(programs, name) {\n  if (!programs[name].children) {\n    return programs[name].weight;\n  }\n  const childrenWeight = programs[name].children.map(x =>\n    rightWeight(programs, x),\n  );\n  if (childrenWeight.every(x => x === childrenWeight[0])) {\n    return (\n      childrenWeight.reduce((sum, x) => sum + x, 0) + programs[name].weight\n    );\n  } else {\n    const unbalanced = childrenWeight.findIndex(\n      x => childrenWeight.filter(y => x === y).length === 1,\n    );\n    const balanced = childrenWeight.findIndex(\n      x => x !== childrenWeight[unbalanced],\n    );\n    const diff = childrenWeight[balanced] - childrenWeight[unbalanced];\n    const unbalancedName = programs[name].children[unbalanced];\n    throw new Error(programs[unbalancedName].weight + diff);\n  }\n}\n\nexport function part1(input) {\n  const programs = parse(input);\n  const children = Object.values(programs)\n    .filter(x => x.children)\n    .reduce((all, x) => all.concat(x.children), []);\n  return Object.values(programs)\n    .filter(x => x.children)\n    .find(x => !children.includes(x.name)).name;\n}\n\nexport function part2(input) {\n  const programs = parse(input);\n  try {\n    rightWeight(programs, part1(input));\n  } catch (e) {\n    return parseInt(e.message);\n  }\n}\n"]}