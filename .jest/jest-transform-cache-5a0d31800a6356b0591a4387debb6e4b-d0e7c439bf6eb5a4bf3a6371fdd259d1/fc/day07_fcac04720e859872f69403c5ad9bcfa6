ea322631c0a4baf9ddc135b5cf6f8002
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function parse(input) {
  return input.split('\n').reduce((programs, x) => {
    const [, name, weight, children] = x.match(/^([^\s]+)\s+\((\d+)\)(?:\s+->\s+(.*))?$/);
    return { ...programs,
      [name]: {
        name,
        weight: parseInt(weight),
        children: children && children.replace(/\s+/g, '').split(',')
      }
    };
  }, {});
}

function rightWeight(programs, name) {
  if (!programs[name].children) {
    return programs[name].weight;
  }

  const childrenWeight = programs[name].children.map(x => rightWeight(programs, x));

  if (childrenWeight.every(x => x === childrenWeight[0])) {
    return childrenWeight.reduce((sum, x) => sum + x, 0) + programs[name].weight;
  } else {
    const unbalanced = childrenWeight.findIndex(x => childrenWeight.filter(y => x === y).length === 1);
    const balanced = childrenWeight.findIndex(x => x !== childrenWeight[unbalanced]);
    const diff = childrenWeight[balanced] - childrenWeight[unbalanced];
    const unbalancedName = programs[name].children[unbalanced];
    throw new Error(programs[unbalancedName].weight + diff);
  }
}

function part1(input) {
  const programs = parse(input);
  const children = Object.values(programs).filter(x => x.children).reduce((all, x) => all.concat(x.children), []);
  return Object.values(programs).filter(x => x.children).find(x => !children.includes(x.name)).name;
}

function part2(input) {
  const programs = parse(input);

  try {
    rightWeight(programs, part1(input));
  } catch (e) {
    return parseInt(e.message);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTA3LmpzIl0sIm5hbWVzIjpbInBhcnNlIiwiaW5wdXQiLCJzcGxpdCIsInJlZHVjZSIsInByb2dyYW1zIiwieCIsIm5hbWUiLCJ3ZWlnaHQiLCJjaGlsZHJlbiIsIm1hdGNoIiwicGFyc2VJbnQiLCJyZXBsYWNlIiwicmlnaHRXZWlnaHQiLCJjaGlsZHJlbldlaWdodCIsIm1hcCIsImV2ZXJ5Iiwic3VtIiwidW5iYWxhbmNlZCIsImZpbmRJbmRleCIsImZpbHRlciIsInkiLCJsZW5ndGgiLCJiYWxhbmNlZCIsImRpZmYiLCJ1bmJhbGFuY2VkTmFtZSIsIkVycm9yIiwicGFydDEiLCJPYmplY3QiLCJ2YWx1ZXMiLCJhbGwiLCJjb25jYXQiLCJmaW5kIiwiaW5jbHVkZXMiLCJwYXJ0MiIsImUiLCJtZXNzYWdlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLFNBQVNBLEtBQVQsQ0FBZUMsS0FBZixFQUFzQjtBQUNwQixTQUFPQSxLQUFLLENBQUNDLEtBQU4sQ0FBWSxJQUFaLEVBQWtCQyxNQUFsQixDQUF5QixDQUFDQyxRQUFELEVBQVdDLENBQVgsS0FBaUI7QUFDL0MsVUFBTSxHQUFHQyxJQUFILEVBQVNDLE1BQVQsRUFBaUJDLFFBQWpCLElBQTZCSCxDQUFDLENBQUNJLEtBQUYsQ0FDakMseUNBRGlDLENBQW5DO0FBR0EsV0FBTyxFQUNMLEdBQUdMLFFBREU7QUFFTCxPQUFDRSxJQUFELEdBQVE7QUFDTkEsUUFBQUEsSUFETTtBQUVOQyxRQUFBQSxNQUFNLEVBQUVHLFFBQVEsQ0FBQ0gsTUFBRCxDQUZWO0FBR05DLFFBQUFBLFFBQVEsRUFBRUEsUUFBUSxJQUFJQSxRQUFRLENBQUNHLE9BQVQsQ0FBaUIsTUFBakIsRUFBeUIsRUFBekIsRUFBNkJULEtBQTdCLENBQW1DLEdBQW5DO0FBSGhCO0FBRkgsS0FBUDtBQVFELEdBWk0sRUFZSixFQVpJLENBQVA7QUFhRDs7QUFFRCxTQUFTVSxXQUFULENBQXFCUixRQUFyQixFQUErQkUsSUFBL0IsRUFBcUM7QUFDbkMsTUFBSSxDQUFDRixRQUFRLENBQUNFLElBQUQsQ0FBUixDQUFlRSxRQUFwQixFQUE4QjtBQUM1QixXQUFPSixRQUFRLENBQUNFLElBQUQsQ0FBUixDQUFlQyxNQUF0QjtBQUNEOztBQUNELFFBQU1NLGNBQWMsR0FBR1QsUUFBUSxDQUFDRSxJQUFELENBQVIsQ0FBZUUsUUFBZixDQUF3Qk0sR0FBeEIsQ0FBNEJULENBQUMsSUFDbERPLFdBQVcsQ0FBQ1IsUUFBRCxFQUFXQyxDQUFYLENBRFUsQ0FBdkI7O0FBR0EsTUFBSVEsY0FBYyxDQUFDRSxLQUFmLENBQXFCVixDQUFDLElBQUlBLENBQUMsS0FBS1EsY0FBYyxDQUFDLENBQUQsQ0FBOUMsQ0FBSixFQUF3RDtBQUN0RCxXQUNFQSxjQUFjLENBQUNWLE1BQWYsQ0FBc0IsQ0FBQ2EsR0FBRCxFQUFNWCxDQUFOLEtBQVlXLEdBQUcsR0FBR1gsQ0FBeEMsRUFBMkMsQ0FBM0MsSUFBZ0RELFFBQVEsQ0FBQ0UsSUFBRCxDQUFSLENBQWVDLE1BRGpFO0FBR0QsR0FKRCxNQUlPO0FBQ0wsVUFBTVUsVUFBVSxHQUFHSixjQUFjLENBQUNLLFNBQWYsQ0FDakJiLENBQUMsSUFBSVEsY0FBYyxDQUFDTSxNQUFmLENBQXNCQyxDQUFDLElBQUlmLENBQUMsS0FBS2UsQ0FBakMsRUFBb0NDLE1BQXBDLEtBQStDLENBRG5DLENBQW5CO0FBR0EsVUFBTUMsUUFBUSxHQUFHVCxjQUFjLENBQUNLLFNBQWYsQ0FDZmIsQ0FBQyxJQUFJQSxDQUFDLEtBQUtRLGNBQWMsQ0FBQ0ksVUFBRCxDQURWLENBQWpCO0FBR0EsVUFBTU0sSUFBSSxHQUFHVixjQUFjLENBQUNTLFFBQUQsQ0FBZCxHQUEyQlQsY0FBYyxDQUFDSSxVQUFELENBQXREO0FBQ0EsVUFBTU8sY0FBYyxHQUFHcEIsUUFBUSxDQUFDRSxJQUFELENBQVIsQ0FBZUUsUUFBZixDQUF3QlMsVUFBeEIsQ0FBdkI7QUFDQSxVQUFNLElBQUlRLEtBQUosQ0FBVXJCLFFBQVEsQ0FBQ29CLGNBQUQsQ0FBUixDQUF5QmpCLE1BQXpCLEdBQWtDZ0IsSUFBNUMsQ0FBTjtBQUNEO0FBQ0Y7O0FBRU0sU0FBU0csS0FBVCxDQUFlekIsS0FBZixFQUFzQjtBQUMzQixRQUFNRyxRQUFRLEdBQUdKLEtBQUssQ0FBQ0MsS0FBRCxDQUF0QjtBQUNBLFFBQU1PLFFBQVEsR0FBR21CLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjeEIsUUFBZCxFQUNkZSxNQURjLENBQ1BkLENBQUMsSUFBSUEsQ0FBQyxDQUFDRyxRQURBLEVBRWRMLE1BRmMsQ0FFUCxDQUFDMEIsR0FBRCxFQUFNeEIsQ0FBTixLQUFZd0IsR0FBRyxDQUFDQyxNQUFKLENBQVd6QixDQUFDLENBQUNHLFFBQWIsQ0FGTCxFQUU2QixFQUY3QixDQUFqQjtBQUdBLFNBQU9tQixNQUFNLENBQUNDLE1BQVAsQ0FBY3hCLFFBQWQsRUFDSmUsTUFESSxDQUNHZCxDQUFDLElBQUlBLENBQUMsQ0FBQ0csUUFEVixFQUVKdUIsSUFGSSxDQUVDMUIsQ0FBQyxJQUFJLENBQUNHLFFBQVEsQ0FBQ3dCLFFBQVQsQ0FBa0IzQixDQUFDLENBQUNDLElBQXBCLENBRlAsRUFFa0NBLElBRnpDO0FBR0Q7O0FBRU0sU0FBUzJCLEtBQVQsQ0FBZWhDLEtBQWYsRUFBc0I7QUFDM0IsUUFBTUcsUUFBUSxHQUFHSixLQUFLLENBQUNDLEtBQUQsQ0FBdEI7O0FBQ0EsTUFBSTtBQUNGVyxJQUFBQSxXQUFXLENBQUNSLFFBQUQsRUFBV3NCLEtBQUssQ0FBQ3pCLEtBQUQsQ0FBaEIsQ0FBWDtBQUNELEdBRkQsQ0FFRSxPQUFPaUMsQ0FBUCxFQUFVO0FBQ1YsV0FBT3hCLFFBQVEsQ0FBQ3dCLENBQUMsQ0FBQ0MsT0FBSCxDQUFmO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5zcGxpdCgnXFxuJykucmVkdWNlKChwcm9ncmFtcywgeCkgPT4ge1xuICAgIGNvbnN0IFssIG5hbWUsIHdlaWdodCwgY2hpbGRyZW5dID0geC5tYXRjaChcbiAgICAgIC9eKFteXFxzXSspXFxzK1xcKChcXGQrKVxcKSg/OlxccystPlxccysoLiopKT8kLyxcbiAgICApO1xuICAgIHJldHVybiB7XG4gICAgICAuLi5wcm9ncmFtcyxcbiAgICAgIFtuYW1lXToge1xuICAgICAgICBuYW1lLFxuICAgICAgICB3ZWlnaHQ6IHBhcnNlSW50KHdlaWdodCksXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbiAmJiBjaGlsZHJlbi5yZXBsYWNlKC9cXHMrL2csICcnKS5zcGxpdCgnLCcpLFxuICAgICAgfSxcbiAgICB9O1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIHJpZ2h0V2VpZ2h0KHByb2dyYW1zLCBuYW1lKSB7XG4gIGlmICghcHJvZ3JhbXNbbmFtZV0uY2hpbGRyZW4pIHtcbiAgICByZXR1cm4gcHJvZ3JhbXNbbmFtZV0ud2VpZ2h0O1xuICB9XG4gIGNvbnN0IGNoaWxkcmVuV2VpZ2h0ID0gcHJvZ3JhbXNbbmFtZV0uY2hpbGRyZW4ubWFwKHggPT5cbiAgICByaWdodFdlaWdodChwcm9ncmFtcywgeCksXG4gICk7XG4gIGlmIChjaGlsZHJlbldlaWdodC5ldmVyeSh4ID0+IHggPT09IGNoaWxkcmVuV2VpZ2h0WzBdKSkge1xuICAgIHJldHVybiAoXG4gICAgICBjaGlsZHJlbldlaWdodC5yZWR1Y2UoKHN1bSwgeCkgPT4gc3VtICsgeCwgMCkgKyBwcm9ncmFtc1tuYW1lXS53ZWlnaHRcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHVuYmFsYW5jZWQgPSBjaGlsZHJlbldlaWdodC5maW5kSW5kZXgoXG4gICAgICB4ID0+IGNoaWxkcmVuV2VpZ2h0LmZpbHRlcih5ID0+IHggPT09IHkpLmxlbmd0aCA9PT0gMSxcbiAgICApO1xuICAgIGNvbnN0IGJhbGFuY2VkID0gY2hpbGRyZW5XZWlnaHQuZmluZEluZGV4KFxuICAgICAgeCA9PiB4ICE9PSBjaGlsZHJlbldlaWdodFt1bmJhbGFuY2VkXSxcbiAgICApO1xuICAgIGNvbnN0IGRpZmYgPSBjaGlsZHJlbldlaWdodFtiYWxhbmNlZF0gLSBjaGlsZHJlbldlaWdodFt1bmJhbGFuY2VkXTtcbiAgICBjb25zdCB1bmJhbGFuY2VkTmFtZSA9IHByb2dyYW1zW25hbWVdLmNoaWxkcmVuW3VuYmFsYW5jZWRdO1xuICAgIHRocm93IG5ldyBFcnJvcihwcm9ncmFtc1t1bmJhbGFuY2VkTmFtZV0ud2VpZ2h0ICsgZGlmZik7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnQxKGlucHV0KSB7XG4gIGNvbnN0IHByb2dyYW1zID0gcGFyc2UoaW5wdXQpO1xuICBjb25zdCBjaGlsZHJlbiA9IE9iamVjdC52YWx1ZXMocHJvZ3JhbXMpXG4gICAgLmZpbHRlcih4ID0+IHguY2hpbGRyZW4pXG4gICAgLnJlZHVjZSgoYWxsLCB4KSA9PiBhbGwuY29uY2F0KHguY2hpbGRyZW4pLCBbXSk7XG4gIHJldHVybiBPYmplY3QudmFsdWVzKHByb2dyYW1zKVxuICAgIC5maWx0ZXIoeCA9PiB4LmNoaWxkcmVuKVxuICAgIC5maW5kKHggPT4gIWNoaWxkcmVuLmluY2x1ZGVzKHgubmFtZSkpLm5hbWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MihpbnB1dCkge1xuICBjb25zdCBwcm9ncmFtcyA9IHBhcnNlKGlucHV0KTtcbiAgdHJ5IHtcbiAgICByaWdodFdlaWdodChwcm9ncmFtcywgcGFydDEoaW5wdXQpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBwYXJzZUludChlLm1lc3NhZ2UpO1xuICB9XG59XG4iXX0=