{"version":3,"sources":["day01.spec.js"],"names":["input","url","describe","it","expect","toEqual"],"mappings":";;AAAA;;AACA;;;;;;;AAEA,MAAMA,KAAK,GAAG,wBAAU,KAAYC,GAAtB,CAAd;AAEAC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BA,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CAAC,gBAAM,MAAN,CAAD,CAAN,CAAsBC,OAAtB,CAA8B,CAA9B;AACAD,MAAAA,MAAM,CAAC,gBAAM,MAAN,CAAD,CAAN,CAAsBC,OAAtB,CAA8B,CAA9B;AACAD,MAAAA,MAAM,CAAC,gBAAM,MAAN,CAAD,CAAN,CAAsBC,OAAtB,CAA8B,CAA9B;AACAD,MAAAA,MAAM,CAAC,gBAAM,UAAN,CAAD,CAAN,CAA0BC,OAA1B,CAAkC,CAAlC;AACD,KALC,CAAF;AAOAF,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBK,OAArB,CAA6B,IAA7B;AACD,KAFC,CAAF;AAGD,GAXO,CAAR;AAaAH,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CAAC,gBAAM,MAAN,CAAD,CAAN,CAAsBC,OAAtB,CAA8B,CAA9B;AACAD,MAAAA,MAAM,CAAC,gBAAM,MAAN,CAAD,CAAN,CAAsBC,OAAtB,CAA8B,CAA9B;AACAD,MAAAA,MAAM,CAAC,gBAAM,QAAN,CAAD,CAAN,CAAwBC,OAAxB,CAAgC,CAAhC;AACAD,MAAAA,MAAM,CAAC,gBAAM,QAAN,CAAD,CAAN,CAAwBC,OAAxB,CAAgC,EAAhC;AACAD,MAAAA,MAAM,CAAC,gBAAM,UAAN,CAAD,CAAN,CAA0BC,OAA1B,CAAkC,CAAlC;AACD,KANC,CAAF;AAQAF,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBK,OAArB,CAA6B,IAA7B;AACD,KAFC,CAAF;AAGD,GAZO,CAAR;AAaD,CA3BO,CAAR","sourcesContent":["import readInput from '../utils/read-input';\nimport { part1, part2 } from './day01.js';\n\nconst input = readInput(import.meta.url);\n\ndescribe('day01 2017', () => {\n  describe('part1', () => {\n    it('should work for part 1 examples', () => {\n      expect(part1('1122')).toEqual(3);\n      expect(part1('1111')).toEqual(4);\n      expect(part1('1234')).toEqual(0);\n      expect(part1('91212129')).toEqual(9);\n    });\n\n    it('should work for part 1 input', () => {\n      expect(part1(input)).toEqual(1136);\n    });\n  });\n\n  describe('part2', () => {\n    it('should work for part 2 examples', () => {\n      expect(part2('1212')).toEqual(6);\n      expect(part2('1221')).toEqual(0);\n      expect(part2('123425')).toEqual(4);\n      expect(part2('123123')).toEqual(12);\n      expect(part2('12131415')).toEqual(4);\n    });\n\n    it('should work for part 2 input', () => {\n      expect(part2(input)).toEqual(1092);\n    });\n  });\n});\n"]}