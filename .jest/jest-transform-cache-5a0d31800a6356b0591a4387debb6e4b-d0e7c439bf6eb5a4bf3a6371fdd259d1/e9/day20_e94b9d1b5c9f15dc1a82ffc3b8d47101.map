{"version":3,"sources":["day20.js"],"names":["walk","W","x","y","E","N","S","pos","unique","arr","reduce","all","p","concat","sort","a","b","filter","i","traverse","current","path","map","next","length","shift","set","depth","option","options","push","ends","end","slice","calc","input","start","Map","split","queue","distance","point","visited","Set","Object","keys","get","has","forEach","add","Array","from","values","part1","Math","max","part2"],"mappings":"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","sourcesContent":["const walk = {\n  W: ({ x, y }) => ({ x: x - 1, y: y + 0 }),\n  E: ({ x, y }) => ({ x: x + 1, y: y + 0 }),\n  N: ({ x, y }) => ({ x: x + 0, y: y - 1 }),\n  S: ({ x, y }) => ({ x: x + 0, y: y + 1 }),\n};\nconst pos = ({ x, y }) => `${x},${y}`;\nconst unique = arr =>\n  arr\n    .reduce((all, p) => all.concat(p), [])\n    .sort((a, b) => a.x - b.x || a.y - b.y)\n    .filter((p, i, a) => !a[i - 1] || pos(p) !== pos(a[i - 1]));\n\nfunction traverse(current, path, map) {\n  let next;\n  while (path.length > 0 && next !== '(') {\n    next = path.shift();\n    if (walk[next]) {\n      current = walk[next](current);\n      map.set(pos(current), '|');\n      current = walk[next](current);\n      map.set(pos(current), '.');\n    }\n  }\n  if (path.length > 0) {\n    let depth = 1;\n    let option = [];\n    const options = [];\n    while (next !== ')' || depth > 0) {\n      next = path.shift();\n      if (next === '(') {\n        depth++;\n      } else if (next === ')') {\n        depth--;\n      }\n      if ((depth === 1 && next === '|') || (depth === 0 && next === ')')) {\n        options.push(option);\n        option = [];\n      } else {\n        option.push(next);\n      }\n    }\n    const ends = unique(options.map(option => traverse(current, option, map)));\n    return unique(ends.map(end => traverse(end, path.slice(0), map)));\n  } else {\n    return [current];\n  }\n}\n\nfunction calc(input) {\n  const start = { x: 0, y: 0 };\n  const map = new Map([[pos(start), '.']]);\n  traverse(start, input.slice(1, input.length - 1).split(''), map);\n\n  const queue = [{ distance: 0, point: start }];\n  const visited = new Set([pos(start)]);\n  while (queue.length > 0) {\n    const { distance, point } = queue.shift();\n    map.set(pos(point), distance);\n    const options = Object.keys(walk)\n      .map(x => map.get(pos(walk[x](point))) === '|' && walk[x](walk[x](point)))\n      .filter(x => x && !visited.has(pos(x)));\n    options.forEach(option => {\n      visited.add(pos(option));\n      queue.push({ distance: distance + 1, point: option });\n    });\n  }\n  return Array.from(map.values()).filter(x => typeof x === 'number');\n}\n\nexport function part1(input) {\n  return Math.max(...calc(input).values());\n}\n\nexport function part2(input) {\n  return calc(input).filter(x => x >= 1000).length;\n}\n"]}