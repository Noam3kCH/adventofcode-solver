301e7c32160813f7aac8157396bda16a
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;
const walk = {
  W: ({
    x,
    y
  }) => ({
    x: x - 1,
    y: y + 0
  }),
  E: ({
    x,
    y
  }) => ({
    x: x + 1,
    y: y + 0
  }),
  N: ({
    x,
    y
  }) => ({
    x: x + 0,
    y: y - 1
  }),
  S: ({
    x,
    y
  }) => ({
    x: x + 0,
    y: y + 1
  })
};

const pos = ({
  x,
  y
}) => `${x},${y}`;

const unique = arr => arr.reduce((all, p) => all.concat(p), []).sort((a, b) => a.x - b.x || a.y - b.y).filter((p, i, a) => !a[i - 1] || pos(p) !== pos(a[i - 1]));

function traverse(current, path, map) {
  let next;

  while (path.length > 0 && next !== '(') {
    next = path.shift();

    if (walk[next]) {
      current = walk[next](current);
      map.set(pos(current), '|');
      current = walk[next](current);
      map.set(pos(current), '.');
    }
  }

  if (path.length > 0) {
    let depth = 1;
    let option = [];
    const options = [];

    while (next !== ')' || depth > 0) {
      next = path.shift();

      if (next === '(') {
        depth++;
      } else if (next === ')') {
        depth--;
      }

      if (depth === 1 && next === '|' || depth === 0 && next === ')') {
        options.push(option);
        option = [];
      } else {
        option.push(next);
      }
    }

    const ends = unique(options.map(option => traverse(current, option, map)));
    return unique(ends.map(end => traverse(end, path.slice(0), map)));
  } else {
    return [current];
  }
}

function calc(input) {
  const start = {
    x: 0,
    y: 0
  };
  const map = new Map([[pos(start), '.']]);
  traverse(start, input.slice(1, input.length - 1).split(''), map);
  const queue = [{
    distance: 0,
    point: start
  }];
  const visited = new Set([pos(start)]);

  while (queue.length > 0) {
    const {
      distance,
      point
    } = queue.shift();
    map.set(pos(point), distance);
    const options = Object.keys(walk).map(x => map.get(pos(walk[x](point))) === '|' && walk[x](walk[x](point))).filter(x => x && !visited.has(pos(x)));
    options.forEach(option => {
      visited.add(pos(option));
      queue.push({
        distance: distance + 1,
        point: option
      });
    });
  }

  return Array.from(map.values()).filter(x => typeof x === 'number');
}

function part1(input) {
  return Math.max(...calc(input).values());
}

function part2(input) {
  return calc(input).filter(x => x >= 1000).length;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,