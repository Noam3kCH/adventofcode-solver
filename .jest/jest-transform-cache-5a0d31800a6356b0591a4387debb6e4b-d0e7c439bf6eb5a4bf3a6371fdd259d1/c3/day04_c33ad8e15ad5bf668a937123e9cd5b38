abd98c3a64679c3e9ac7770118b33902
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function calcSleep(input) {
  const lines = input.split('\n').sort().map(x => {
    const regex = /^\[[\d-]+ \d+:([\d]+)\] .* (#|asleep|up)(\d+)?/;
    const [, time, verb, id] = x.match(regex);
    return {
      time: parseInt(time),
      verb,
      id
    };
  });
  const sleep = new Map();

  const initial = () => ({
    total: 0,
    mins: new Map()
  });

  let current, start;
  lines.forEach(line => {
    if (line.verb === '#') {
      current = line.id;
    } else if (line.verb === 'asleep') {
      start = line.time;
    } else {
      const guard = sleep.get(current) || initial();

      for (let i = start; i < line.time; i++) {
        guard.total++;
        guard.mins.set(i, (guard.mins.get(i) || 0) + 1);
      }

      sleep.set(current, guard);
    }
  });
  return sleep;
}

function sleepyMin(guard) {
  return Array.from(guard.mins.entries()).sort((a, b) => a[1] - b[1]).pop();
}

function sleepyGuard(sleep, fn) {
  return Array.from(sleep.entries()).sort((a, b) => fn(a[1], b[1])).pop();
}

function checksum(input, fn) {
  const sleep = calcSleep(input);
  const sleepy = sleepyGuard(sleep, fn);
  const min = sleepyMin(sleepy[1]);
  return min[0] * sleepy[0];
}

function part1(input) {
  return checksum(input, (a, b) => a.total - b.total);
}

function part2(input) {
  return checksum(input, (a, b) => sleepyMin(a)[1] - sleepyMin(b)[1]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTA0LmpzIl0sIm5hbWVzIjpbImNhbGNTbGVlcCIsImlucHV0IiwibGluZXMiLCJzcGxpdCIsInNvcnQiLCJtYXAiLCJ4IiwicmVnZXgiLCJ0aW1lIiwidmVyYiIsImlkIiwibWF0Y2giLCJwYXJzZUludCIsInNsZWVwIiwiTWFwIiwiaW5pdGlhbCIsInRvdGFsIiwibWlucyIsImN1cnJlbnQiLCJzdGFydCIsImZvckVhY2giLCJsaW5lIiwiZ3VhcmQiLCJnZXQiLCJpIiwic2V0Iiwic2xlZXB5TWluIiwiQXJyYXkiLCJmcm9tIiwiZW50cmllcyIsImEiLCJiIiwicG9wIiwic2xlZXB5R3VhcmQiLCJmbiIsImNoZWNrc3VtIiwic2xlZXB5IiwibWluIiwicGFydDEiLCJwYXJ0MiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxTQUFTQSxTQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUN4QixRQUFNQyxLQUFLLEdBQUdELEtBQUssQ0FDaEJFLEtBRFcsQ0FDTCxJQURLLEVBRVhDLElBRlcsR0FHWEMsR0FIVyxDQUdQQyxDQUFDLElBQUk7QUFDUixVQUFNQyxLQUFLLEdBQUcsZ0RBQWQ7QUFDQSxVQUFNLEdBQUdDLElBQUgsRUFBU0MsSUFBVCxFQUFlQyxFQUFmLElBQXFCSixDQUFDLENBQUNLLEtBQUYsQ0FBUUosS0FBUixDQUEzQjtBQUNBLFdBQU87QUFBRUMsTUFBQUEsSUFBSSxFQUFFSSxRQUFRLENBQUNKLElBQUQsQ0FBaEI7QUFBd0JDLE1BQUFBLElBQXhCO0FBQThCQyxNQUFBQTtBQUE5QixLQUFQO0FBQ0QsR0FQVyxDQUFkO0FBUUEsUUFBTUcsS0FBSyxHQUFHLElBQUlDLEdBQUosRUFBZDs7QUFDQSxRQUFNQyxPQUFPLEdBQUcsT0FBTztBQUFFQyxJQUFBQSxLQUFLLEVBQUUsQ0FBVDtBQUFZQyxJQUFBQSxJQUFJLEVBQUUsSUFBSUgsR0FBSjtBQUFsQixHQUFQLENBQWhCOztBQUNBLE1BQUlJLE9BQUosRUFBYUMsS0FBYjtBQUNBakIsRUFBQUEsS0FBSyxDQUFDa0IsT0FBTixDQUFjQyxJQUFJLElBQUk7QUFDcEIsUUFBSUEsSUFBSSxDQUFDWixJQUFMLEtBQWMsR0FBbEIsRUFBdUI7QUFDckJTLE1BQUFBLE9BQU8sR0FBR0csSUFBSSxDQUFDWCxFQUFmO0FBQ0QsS0FGRCxNQUVPLElBQUlXLElBQUksQ0FBQ1osSUFBTCxLQUFjLFFBQWxCLEVBQTRCO0FBQ2pDVSxNQUFBQSxLQUFLLEdBQUdFLElBQUksQ0FBQ2IsSUFBYjtBQUNELEtBRk0sTUFFQTtBQUNMLFlBQU1jLEtBQUssR0FBR1QsS0FBSyxDQUFDVSxHQUFOLENBQVVMLE9BQVYsS0FBc0JILE9BQU8sRUFBM0M7O0FBQ0EsV0FBSyxJQUFJUyxDQUFDLEdBQUdMLEtBQWIsRUFBb0JLLENBQUMsR0FBR0gsSUFBSSxDQUFDYixJQUE3QixFQUFtQ2dCLENBQUMsRUFBcEMsRUFBd0M7QUFDdENGLFFBQUFBLEtBQUssQ0FBQ04sS0FBTjtBQUNBTSxRQUFBQSxLQUFLLENBQUNMLElBQU4sQ0FBV1EsR0FBWCxDQUFlRCxDQUFmLEVBQWtCLENBQUNGLEtBQUssQ0FBQ0wsSUFBTixDQUFXTSxHQUFYLENBQWVDLENBQWYsS0FBcUIsQ0FBdEIsSUFBMkIsQ0FBN0M7QUFDRDs7QUFDRFgsTUFBQUEsS0FBSyxDQUFDWSxHQUFOLENBQVVQLE9BQVYsRUFBbUJJLEtBQW5CO0FBQ0Q7QUFDRixHQWJEO0FBY0EsU0FBT1QsS0FBUDtBQUNEOztBQUVELFNBQVNhLFNBQVQsQ0FBbUJKLEtBQW5CLEVBQTBCO0FBQ3hCLFNBQU9LLEtBQUssQ0FBQ0MsSUFBTixDQUFXTixLQUFLLENBQUNMLElBQU4sQ0FBV1ksT0FBWCxFQUFYLEVBQ0p6QixJQURJLENBQ0MsQ0FBQzBCLENBQUQsRUFBSUMsQ0FBSixLQUFVRCxDQUFDLENBQUMsQ0FBRCxDQUFELEdBQU9DLENBQUMsQ0FBQyxDQUFELENBRG5CLEVBRUpDLEdBRkksRUFBUDtBQUdEOztBQUVELFNBQVNDLFdBQVQsQ0FBcUJwQixLQUFyQixFQUE0QnFCLEVBQTVCLEVBQWdDO0FBQzlCLFNBQU9QLEtBQUssQ0FBQ0MsSUFBTixDQUFXZixLQUFLLENBQUNnQixPQUFOLEVBQVgsRUFDSnpCLElBREksQ0FDQyxDQUFDMEIsQ0FBRCxFQUFJQyxDQUFKLEtBQVVHLEVBQUUsQ0FBQ0osQ0FBQyxDQUFDLENBQUQsQ0FBRixFQUFPQyxDQUFDLENBQUMsQ0FBRCxDQUFSLENBRGIsRUFFSkMsR0FGSSxFQUFQO0FBR0Q7O0FBRUQsU0FBU0csUUFBVCxDQUFrQmxDLEtBQWxCLEVBQXlCaUMsRUFBekIsRUFBNkI7QUFDM0IsUUFBTXJCLEtBQUssR0FBR2IsU0FBUyxDQUFDQyxLQUFELENBQXZCO0FBQ0EsUUFBTW1DLE1BQU0sR0FBR0gsV0FBVyxDQUFDcEIsS0FBRCxFQUFRcUIsRUFBUixDQUExQjtBQUNBLFFBQU1HLEdBQUcsR0FBR1gsU0FBUyxDQUFDVSxNQUFNLENBQUMsQ0FBRCxDQUFQLENBQXJCO0FBQ0EsU0FBT0MsR0FBRyxDQUFDLENBQUQsQ0FBSCxHQUFTRCxNQUFNLENBQUMsQ0FBRCxDQUF0QjtBQUNEOztBQUVNLFNBQVNFLEtBQVQsQ0FBZXJDLEtBQWYsRUFBc0I7QUFDM0IsU0FBT2tDLFFBQVEsQ0FBQ2xDLEtBQUQsRUFBUSxDQUFDNkIsQ0FBRCxFQUFJQyxDQUFKLEtBQVVELENBQUMsQ0FBQ2QsS0FBRixHQUFVZSxDQUFDLENBQUNmLEtBQTlCLENBQWY7QUFDRDs7QUFFTSxTQUFTdUIsS0FBVCxDQUFldEMsS0FBZixFQUFzQjtBQUMzQixTQUFPa0MsUUFBUSxDQUFDbEMsS0FBRCxFQUFRLENBQUM2QixDQUFELEVBQUlDLENBQUosS0FBVUwsU0FBUyxDQUFDSSxDQUFELENBQVQsQ0FBYSxDQUFiLElBQWtCSixTQUFTLENBQUNLLENBQUQsQ0FBVCxDQUFhLENBQWIsQ0FBcEMsQ0FBZjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gY2FsY1NsZWVwKGlucHV0KSB7XG4gIGNvbnN0IGxpbmVzID0gaW5wdXRcbiAgICAuc3BsaXQoJ1xcbicpXG4gICAgLnNvcnQoKVxuICAgIC5tYXAoeCA9PiB7XG4gICAgICBjb25zdCByZWdleCA9IC9eXFxbW1xcZC1dKyBcXGQrOihbXFxkXSspXFxdIC4qICgjfGFzbGVlcHx1cCkoXFxkKyk/LztcbiAgICAgIGNvbnN0IFssIHRpbWUsIHZlcmIsIGlkXSA9IHgubWF0Y2gocmVnZXgpO1xuICAgICAgcmV0dXJuIHsgdGltZTogcGFyc2VJbnQodGltZSksIHZlcmIsIGlkIH07XG4gICAgfSk7XG4gIGNvbnN0IHNsZWVwID0gbmV3IE1hcCgpO1xuICBjb25zdCBpbml0aWFsID0gKCkgPT4gKHsgdG90YWw6IDAsIG1pbnM6IG5ldyBNYXAoKSB9KTtcbiAgbGV0IGN1cnJlbnQsIHN0YXJ0O1xuICBsaW5lcy5mb3JFYWNoKGxpbmUgPT4ge1xuICAgIGlmIChsaW5lLnZlcmIgPT09ICcjJykge1xuICAgICAgY3VycmVudCA9IGxpbmUuaWQ7XG4gICAgfSBlbHNlIGlmIChsaW5lLnZlcmIgPT09ICdhc2xlZXAnKSB7XG4gICAgICBzdGFydCA9IGxpbmUudGltZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZ3VhcmQgPSBzbGVlcC5nZXQoY3VycmVudCkgfHwgaW5pdGlhbCgpO1xuICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgbGluZS50aW1lOyBpKyspIHtcbiAgICAgICAgZ3VhcmQudG90YWwrKztcbiAgICAgICAgZ3VhcmQubWlucy5zZXQoaSwgKGd1YXJkLm1pbnMuZ2V0KGkpIHx8IDApICsgMSk7XG4gICAgICB9XG4gICAgICBzbGVlcC5zZXQoY3VycmVudCwgZ3VhcmQpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzbGVlcDtcbn1cblxuZnVuY3Rpb24gc2xlZXB5TWluKGd1YXJkKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKGd1YXJkLm1pbnMuZW50cmllcygpKVxuICAgIC5zb3J0KChhLCBiKSA9PiBhWzFdIC0gYlsxXSlcbiAgICAucG9wKCk7XG59XG5cbmZ1bmN0aW9uIHNsZWVweUd1YXJkKHNsZWVwLCBmbikge1xuICByZXR1cm4gQXJyYXkuZnJvbShzbGVlcC5lbnRyaWVzKCkpXG4gICAgLnNvcnQoKGEsIGIpID0+IGZuKGFbMV0sIGJbMV0pKVxuICAgIC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tzdW0oaW5wdXQsIGZuKSB7XG4gIGNvbnN0IHNsZWVwID0gY2FsY1NsZWVwKGlucHV0KTtcbiAgY29uc3Qgc2xlZXB5ID0gc2xlZXB5R3VhcmQoc2xlZXAsIGZuKTtcbiAgY29uc3QgbWluID0gc2xlZXB5TWluKHNsZWVweVsxXSk7XG4gIHJldHVybiBtaW5bMF0gKiBzbGVlcHlbMF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MShpbnB1dCkge1xuICByZXR1cm4gY2hlY2tzdW0oaW5wdXQsIChhLCBiKSA9PiBhLnRvdGFsIC0gYi50b3RhbCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MihpbnB1dCkge1xuICByZXR1cm4gY2hlY2tzdW0oaW5wdXQsIChhLCBiKSA9PiBzbGVlcHlNaW4oYSlbMV0gLSBzbGVlcHlNaW4oYilbMV0pO1xufVxuIl19