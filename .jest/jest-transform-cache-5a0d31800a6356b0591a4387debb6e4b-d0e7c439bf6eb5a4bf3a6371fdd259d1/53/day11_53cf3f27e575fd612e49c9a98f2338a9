89348e9d3980f9cc72ad935d730bdea9
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part2 = exports.part1 = void 0;

function step({
  x,
  y
}, direction) {
  switch (direction) {
    case 's':
      return {
        x: x + 0,
        y: y - 2
      };

    case 'n':
      return {
        x: x + 0,
        y: y + 2
      };

    case 'w':
      return {
        x: x - 2,
        y: y + 0
      };

    case 'e':
      return {
        x: x + 2,
        y: y + 0
      };

    case 'sw':
      return {
        x: x - 1,
        y: y - 1
      };

    case 'se':
      return {
        x: x + 1,
        y: y - 1
      };

    case 'nw':
      return {
        x: x - 1,
        y: y + 1
      };

    case 'ne':
      return {
        x: x + 1,
        y: y + 1
      };

    default:
  }
}

function parse(input) {
  return input.split(',').reduce(step, {
    x: 0,
    y: 0
  });
}

function parse2(input) {
  return input.split(',').reduce(({
    furthest,
    point
  }, direction) => {
    return {
      furthest: Math.max(furthest, distance(step(point, direction))),
      point: step(point, direction)
    };
  }, {
    furthest: 0,
    point: {
      x: 0,
      y: 0
    }
  });
}

function distance({
  x,
  y
}) {
  const diagonal = Math.min(Math.abs(x), Math.abs(y));
  const straight = (Math.max(Math.abs(x), Math.abs(y)) - diagonal) / 2;
  return diagonal + straight;
}

const part1 = input => distance(parse(input));

exports.part1 = part1;

const part2 = input => parse2(input).furthest;

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTExLmpzIl0sIm5hbWVzIjpbInN0ZXAiLCJ4IiwieSIsImRpcmVjdGlvbiIsInBhcnNlIiwiaW5wdXQiLCJzcGxpdCIsInJlZHVjZSIsInBhcnNlMiIsImZ1cnRoZXN0IiwicG9pbnQiLCJNYXRoIiwibWF4IiwiZGlzdGFuY2UiLCJkaWFnb25hbCIsIm1pbiIsImFicyIsInN0cmFpZ2h0IiwicGFydDEiLCJwYXJ0MiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLFNBQVNBLElBQVQsQ0FBYztBQUFFQyxFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsQ0FBZCxFQUF3QkMsU0FBeEIsRUFBbUM7QUFDakMsVUFBUUEsU0FBUjtBQUNFLFNBQUssR0FBTDtBQUNFLGFBQU87QUFBRUYsUUFBQUEsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBVDtBQUFZQyxRQUFBQSxDQUFDLEVBQUVBLENBQUMsR0FBRztBQUFuQixPQUFQOztBQUNGLFNBQUssR0FBTDtBQUNFLGFBQU87QUFBRUQsUUFBQUEsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBVDtBQUFZQyxRQUFBQSxDQUFDLEVBQUVBLENBQUMsR0FBRztBQUFuQixPQUFQOztBQUNGLFNBQUssR0FBTDtBQUNFLGFBQU87QUFBRUQsUUFBQUEsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBVDtBQUFZQyxRQUFBQSxDQUFDLEVBQUVBLENBQUMsR0FBRztBQUFuQixPQUFQOztBQUNGLFNBQUssR0FBTDtBQUNFLGFBQU87QUFBRUQsUUFBQUEsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBVDtBQUFZQyxRQUFBQSxDQUFDLEVBQUVBLENBQUMsR0FBRztBQUFuQixPQUFQOztBQUNGLFNBQUssSUFBTDtBQUNFLGFBQU87QUFBRUQsUUFBQUEsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBVDtBQUFZQyxRQUFBQSxDQUFDLEVBQUVBLENBQUMsR0FBRztBQUFuQixPQUFQOztBQUNGLFNBQUssSUFBTDtBQUNFLGFBQU87QUFBRUQsUUFBQUEsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBVDtBQUFZQyxRQUFBQSxDQUFDLEVBQUVBLENBQUMsR0FBRztBQUFuQixPQUFQOztBQUNGLFNBQUssSUFBTDtBQUNFLGFBQU87QUFBRUQsUUFBQUEsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBVDtBQUFZQyxRQUFBQSxDQUFDLEVBQUVBLENBQUMsR0FBRztBQUFuQixPQUFQOztBQUNGLFNBQUssSUFBTDtBQUNFLGFBQU87QUFBRUQsUUFBQUEsQ0FBQyxFQUFFQSxDQUFDLEdBQUcsQ0FBVDtBQUFZQyxRQUFBQSxDQUFDLEVBQUVBLENBQUMsR0FBRztBQUFuQixPQUFQOztBQUNGO0FBakJGO0FBbUJEOztBQUVELFNBQVNFLEtBQVQsQ0FBZUMsS0FBZixFQUFzQjtBQUNwQixTQUFPQSxLQUFLLENBQUNDLEtBQU4sQ0FBWSxHQUFaLEVBQWlCQyxNQUFqQixDQUF3QlAsSUFBeEIsRUFBOEI7QUFBRUMsSUFBQUEsQ0FBQyxFQUFFLENBQUw7QUFBUUMsSUFBQUEsQ0FBQyxFQUFFO0FBQVgsR0FBOUIsQ0FBUDtBQUNEOztBQUVELFNBQVNNLE1BQVQsQ0FBZ0JILEtBQWhCLEVBQXVCO0FBQ3JCLFNBQU9BLEtBQUssQ0FBQ0MsS0FBTixDQUFZLEdBQVosRUFBaUJDLE1BQWpCLENBQ0wsQ0FBQztBQUFFRSxJQUFBQSxRQUFGO0FBQVlDLElBQUFBO0FBQVosR0FBRCxFQUFzQlAsU0FBdEIsS0FBb0M7QUFDbEMsV0FBTztBQUNMTSxNQUFBQSxRQUFRLEVBQUVFLElBQUksQ0FBQ0MsR0FBTCxDQUFTSCxRQUFULEVBQW1CSSxRQUFRLENBQUNiLElBQUksQ0FBQ1UsS0FBRCxFQUFRUCxTQUFSLENBQUwsQ0FBM0IsQ0FETDtBQUVMTyxNQUFBQSxLQUFLLEVBQUVWLElBQUksQ0FBQ1UsS0FBRCxFQUFRUCxTQUFSO0FBRk4sS0FBUDtBQUlELEdBTkksRUFPTDtBQUFFTSxJQUFBQSxRQUFRLEVBQUUsQ0FBWjtBQUFlQyxJQUFBQSxLQUFLLEVBQUU7QUFBRVQsTUFBQUEsQ0FBQyxFQUFFLENBQUw7QUFBUUMsTUFBQUEsQ0FBQyxFQUFFO0FBQVg7QUFBdEIsR0FQSyxDQUFQO0FBU0Q7O0FBRUQsU0FBU1csUUFBVCxDQUFrQjtBQUFFWixFQUFBQSxDQUFGO0FBQUtDLEVBQUFBO0FBQUwsQ0FBbEIsRUFBNEI7QUFDMUIsUUFBTVksUUFBUSxHQUFHSCxJQUFJLENBQUNJLEdBQUwsQ0FBU0osSUFBSSxDQUFDSyxHQUFMLENBQVNmLENBQVQsQ0FBVCxFQUFzQlUsSUFBSSxDQUFDSyxHQUFMLENBQVNkLENBQVQsQ0FBdEIsQ0FBakI7QUFDQSxRQUFNZSxRQUFRLEdBQUcsQ0FBQ04sSUFBSSxDQUFDQyxHQUFMLENBQVNELElBQUksQ0FBQ0ssR0FBTCxDQUFTZixDQUFULENBQVQsRUFBc0JVLElBQUksQ0FBQ0ssR0FBTCxDQUFTZCxDQUFULENBQXRCLElBQXFDWSxRQUF0QyxJQUFrRCxDQUFuRTtBQUNBLFNBQU9BLFFBQVEsR0FBR0csUUFBbEI7QUFDRDs7QUFFTSxNQUFNQyxLQUFLLEdBQUdiLEtBQUssSUFBSVEsUUFBUSxDQUFDVCxLQUFLLENBQUNDLEtBQUQsQ0FBTixDQUEvQjs7OztBQUNBLE1BQU1jLEtBQUssR0FBR2QsS0FBSyxJQUFJRyxNQUFNLENBQUNILEtBQUQsQ0FBTixDQUFjSSxRQUFyQyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHN0ZXAoeyB4LCB5IH0sIGRpcmVjdGlvbikge1xuICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIHsgeDogeCArIDAsIHk6IHkgLSAyIH07XG4gICAgY2FzZSAnbic6XG4gICAgICByZXR1cm4geyB4OiB4ICsgMCwgeTogeSArIDIgfTtcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiB7IHg6IHggLSAyLCB5OiB5ICsgMCB9O1xuICAgIGNhc2UgJ2UnOlxuICAgICAgcmV0dXJuIHsgeDogeCArIDIsIHk6IHkgKyAwIH07XG4gICAgY2FzZSAnc3cnOlxuICAgICAgcmV0dXJuIHsgeDogeCAtIDEsIHk6IHkgLSAxIH07XG4gICAgY2FzZSAnc2UnOlxuICAgICAgcmV0dXJuIHsgeDogeCArIDEsIHk6IHkgLSAxIH07XG4gICAgY2FzZSAnbncnOlxuICAgICAgcmV0dXJuIHsgeDogeCAtIDEsIHk6IHkgKyAxIH07XG4gICAgY2FzZSAnbmUnOlxuICAgICAgcmV0dXJuIHsgeDogeCArIDEsIHk6IHkgKyAxIH07XG4gICAgZGVmYXVsdDpcbiAgfVxufVxuXG5mdW5jdGlvbiBwYXJzZShpbnB1dCkge1xuICByZXR1cm4gaW5wdXQuc3BsaXQoJywnKS5yZWR1Y2Uoc3RlcCwgeyB4OiAwLCB5OiAwIH0pO1xufVxuXG5mdW5jdGlvbiBwYXJzZTIoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnNwbGl0KCcsJykucmVkdWNlKFxuICAgICh7IGZ1cnRoZXN0LCBwb2ludCB9LCBkaXJlY3Rpb24pID0+IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZ1cnRoZXN0OiBNYXRoLm1heChmdXJ0aGVzdCwgZGlzdGFuY2Uoc3RlcChwb2ludCwgZGlyZWN0aW9uKSkpLFxuICAgICAgICBwb2ludDogc3RlcChwb2ludCwgZGlyZWN0aW9uKSxcbiAgICAgIH07XG4gICAgfSxcbiAgICB7IGZ1cnRoZXN0OiAwLCBwb2ludDogeyB4OiAwLCB5OiAwIH0gfSxcbiAgKTtcbn1cblxuZnVuY3Rpb24gZGlzdGFuY2UoeyB4LCB5IH0pIHtcbiAgY29uc3QgZGlhZ29uYWwgPSBNYXRoLm1pbihNYXRoLmFicyh4KSwgTWF0aC5hYnMoeSkpO1xuICBjb25zdCBzdHJhaWdodCA9IChNYXRoLm1heChNYXRoLmFicyh4KSwgTWF0aC5hYnMoeSkpIC0gZGlhZ29uYWwpIC8gMjtcbiAgcmV0dXJuIGRpYWdvbmFsICsgc3RyYWlnaHQ7XG59XG5cbmV4cG9ydCBjb25zdCBwYXJ0MSA9IGlucHV0ID0+IGRpc3RhbmNlKHBhcnNlKGlucHV0KSk7XG5leHBvcnQgY29uc3QgcGFydDIgPSBpbnB1dCA9PiBwYXJzZTIoaW5wdXQpLmZ1cnRoZXN0O1xuIl19