96e055235b79138ada43690374df7509
"use strict";

var _day = require("./day19.js");

var _readInput = _interopRequireDefault(require("../utils/read-input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const meta = Object.freeze({
  url: require('url').pathToFileURL(__filename)
});
const input = (0, _readInput.default)(meta.url);
describe('day19 2018', () => {
  describe('part1', () => {
    it('should work for part 1 examples', () => {
      expect((0, _day.part1)(['#ip 0', 'seti 5 0 1', 'seti 6 0 2', 'addi 0 1 0', 'addr 1 2 3', 'setr 1 0 0', 'seti 8 0 4', 'seti 9 0 5'].join('\n'))).toEqual(7);
    });
    it('should work for part 1 input', () => {
      expect((0, _day.part1)(input)).toEqual(2072);
    });
  });
  describe('part2', () => {
    it('should work for part 2 examples', () => {// expect(part2('1')).toEqual(0);
    });
    it('should work for part 2 input', () => {
      expect((0, _day.part2)(input)).toEqual(27578880);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE5LnNwZWMuanMiXSwibmFtZXMiOlsiaW5wdXQiLCJ1cmwiLCJkZXNjcmliZSIsIml0IiwiZXhwZWN0Iiwiam9pbiIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7Ozs7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUcsd0JBQVUsS0FBWUMsR0FBdEIsQ0FBZDtBQUVBQyxRQUFRLENBQUMsWUFBRCxFQUFlLE1BQU07QUFDM0JBLEVBQUFBLFFBQVEsQ0FBQyxPQUFELEVBQVUsTUFBTTtBQUN0QkMsSUFBQUEsRUFBRSxDQUFDLGlDQUFELEVBQW9DLE1BQU07QUFDMUNDLE1BQUFBLE1BQU0sQ0FDSixnQkFDRSxDQUNFLE9BREYsRUFFRSxZQUZGLEVBR0UsWUFIRixFQUlFLFlBSkYsRUFLRSxZQUxGLEVBTUUsWUFORixFQU9FLFlBUEYsRUFRRSxZQVJGLEVBU0VDLElBVEYsQ0FTTyxJQVRQLENBREYsQ0FESSxDQUFOLENBYUVDLE9BYkYsQ0FhVSxDQWJWO0FBY0QsS0FmQyxDQUFGO0FBaUJBSCxJQUFBQSxFQUFFLENBQUMsOEJBQUQsRUFBaUMsTUFBTTtBQUN2Q0MsTUFBQUEsTUFBTSxDQUFDLGdCQUFNSixLQUFOLENBQUQsQ0FBTixDQUFxQk0sT0FBckIsQ0FBNkIsSUFBN0I7QUFDRCxLQUZDLENBQUY7QUFHRCxHQXJCTyxDQUFSO0FBdUJBSixFQUFBQSxRQUFRLENBQUMsT0FBRCxFQUFVLE1BQU07QUFDdEJDLElBQUFBLEVBQUUsQ0FBQyxpQ0FBRCxFQUFvQyxNQUFNLENBQzFDO0FBQ0QsS0FGQyxDQUFGO0FBSUFBLElBQUFBLEVBQUUsQ0FBQyw4QkFBRCxFQUFpQyxNQUFNO0FBQ3ZDQyxNQUFBQSxNQUFNLENBQUMsZ0JBQU1KLEtBQU4sQ0FBRCxDQUFOLENBQXFCTSxPQUFyQixDQUE2QixRQUE3QjtBQUNELEtBRkMsQ0FBRjtBQUdELEdBUk8sQ0FBUjtBQVNELENBakNPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJ0MSwgcGFydDIgfSBmcm9tICcuL2RheTE5LmpzJztcbmltcG9ydCByZWFkSW5wdXQgZnJvbSAnLi4vdXRpbHMvcmVhZC1pbnB1dCc7XG5cbmNvbnN0IGlucHV0ID0gcmVhZElucHV0KGltcG9ydC5tZXRhLnVybCk7XG5cbmRlc2NyaWJlKCdkYXkxOSAyMDE4JywgKCkgPT4ge1xuICBkZXNjcmliZSgncGFydDEnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB3b3JrIGZvciBwYXJ0IDEgZXhhbXBsZXMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoXG4gICAgICAgIHBhcnQxKFxuICAgICAgICAgIFtcbiAgICAgICAgICAgICcjaXAgMCcsXG4gICAgICAgICAgICAnc2V0aSA1IDAgMScsXG4gICAgICAgICAgICAnc2V0aSA2IDAgMicsXG4gICAgICAgICAgICAnYWRkaSAwIDEgMCcsXG4gICAgICAgICAgICAnYWRkciAxIDIgMycsXG4gICAgICAgICAgICAnc2V0ciAxIDAgMCcsXG4gICAgICAgICAgICAnc2V0aSA4IDAgNCcsXG4gICAgICAgICAgICAnc2V0aSA5IDAgNScsXG4gICAgICAgICAgXS5qb2luKCdcXG4nKSxcbiAgICAgICAgKSxcbiAgICAgICkudG9FcXVhbCg3KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgd29yayBmb3IgcGFydCAxIGlucHV0JywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHBhcnQxKGlucHV0KSkudG9FcXVhbCgyMDcyKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3BhcnQyJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgd29yayBmb3IgcGFydCAyIGV4YW1wbGVzJywgKCkgPT4ge1xuICAgICAgLy8gZXhwZWN0KHBhcnQyKCcxJykpLnRvRXF1YWwoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHdvcmsgZm9yIHBhcnQgMiBpbnB1dCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChwYXJ0MihpbnB1dCkpLnRvRXF1YWwoMjc1Nzg4ODApO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19