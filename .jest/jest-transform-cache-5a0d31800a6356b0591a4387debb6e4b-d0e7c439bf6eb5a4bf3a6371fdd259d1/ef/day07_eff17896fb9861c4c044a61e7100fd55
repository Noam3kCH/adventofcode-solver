9f56f7ebbc71104b1668c4ce60c4a214
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part2 = exports.part1 = void 0;

/* eslint no-bitwise: "off" */
const ops = {
  AND: (p1, p2) => (Math.pow(2, 16) + (p1 & p2)) % Math.pow(2, 16),
  OR: (p1, p2) => (Math.pow(2, 16) + (p1 | p2)) % Math.pow(2, 16),
  NOT: (p1, p2) => (Math.pow(2, 16) + ~p2) % Math.pow(2, 16),
  LSHIFT: (p1, p2) => (Math.pow(2, 16) + (p1 << p2)) % Math.pow(2, 16),
  RSHIFT: (p1, p2) => (Math.pow(2, 16) + (p1 >> p2)) % Math.pow(2, 16),
  undefined: p1 => (Math.pow(2, 16) + p1) % Math.pow(2, 16)
};

function getter(id) {
  return id && id.match(/^[a-z]+$/) ? circuit => circuit[id]() : () => parseInt(id);
}

function makeCircuit(input) {
  return input.map(x => x.match(/^(?:(\w+) )?(?:(AND|OR|NOT|LSHIFT|RSHIFT) (\w+) )?-> (\w+)$/)).map(x => ({
    op: ops[x[2] + ''],
    p1: getter(x[1]),
    p2: getter(x[3]),
    result: x[4]
  })).reduce((circuit, gate) => {
    circuit[gate.result] = () => {
      const memo = gate.op(gate.p1(circuit), gate.p2(circuit));

      circuit[gate.result] = () => memo;

      return memo;
    };

    return circuit;
  }, {});
}

const part1 = input => makeCircuit(input.split('\n')).a();

exports.part1 = part1;

const part2 = input => makeCircuit(input.split('\n').concat(`${part1(input)} -> b`)).a();

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTA3LmpzIl0sIm5hbWVzIjpbIm9wcyIsIkFORCIsInAxIiwicDIiLCJNYXRoIiwicG93IiwiT1IiLCJOT1QiLCJMU0hJRlQiLCJSU0hJRlQiLCJ1bmRlZmluZWQiLCJnZXR0ZXIiLCJpZCIsIm1hdGNoIiwiY2lyY3VpdCIsInBhcnNlSW50IiwibWFrZUNpcmN1aXQiLCJpbnB1dCIsIm1hcCIsIngiLCJvcCIsInJlc3VsdCIsInJlZHVjZSIsImdhdGUiLCJtZW1vIiwicGFydDEiLCJzcGxpdCIsImEiLCJwYXJ0MiIsImNvbmNhdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0EsTUFBTUEsR0FBRyxHQUFHO0FBQ1ZDLEVBQUFBLEdBQUcsRUFBRSxDQUFDQyxFQUFELEVBQUtDLEVBQUwsS0FBWSxDQUFDQyxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFULEVBQVksRUFBWixLQUFtQkgsRUFBRSxHQUFHQyxFQUF4QixDQUFELElBQWdDQyxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFULEVBQVksRUFBWixDQUR2QztBQUVWQyxFQUFBQSxFQUFFLEVBQUUsQ0FBQ0osRUFBRCxFQUFLQyxFQUFMLEtBQVksQ0FBQ0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZLEVBQVosS0FBbUJILEVBQUUsR0FBR0MsRUFBeEIsQ0FBRCxJQUFnQ0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZLEVBQVosQ0FGdEM7QUFHVkUsRUFBQUEsR0FBRyxFQUFFLENBQUNMLEVBQUQsRUFBS0MsRUFBTCxLQUFZLENBQUNDLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWSxFQUFaLElBQWtCLENBQUNGLEVBQXBCLElBQTBCQyxJQUFJLENBQUNDLEdBQUwsQ0FBUyxDQUFULEVBQVksRUFBWixDQUhqQztBQUlWRyxFQUFBQSxNQUFNLEVBQUUsQ0FBQ04sRUFBRCxFQUFLQyxFQUFMLEtBQVksQ0FBQ0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZLEVBQVosS0FBbUJILEVBQUUsSUFBSUMsRUFBekIsQ0FBRCxJQUFpQ0MsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZLEVBQVosQ0FKM0M7QUFLVkksRUFBQUEsTUFBTSxFQUFFLENBQUNQLEVBQUQsRUFBS0MsRUFBTCxLQUFZLENBQUNDLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWSxFQUFaLEtBQW1CSCxFQUFFLElBQUlDLEVBQXpCLENBQUQsSUFBaUNDLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWSxFQUFaLENBTDNDO0FBTVZLLEVBQUFBLFNBQVMsRUFBRVIsRUFBRSxJQUFJLENBQUNFLElBQUksQ0FBQ0MsR0FBTCxDQUFTLENBQVQsRUFBWSxFQUFaLElBQWtCSCxFQUFuQixJQUF5QkUsSUFBSSxDQUFDQyxHQUFMLENBQVMsQ0FBVCxFQUFZLEVBQVo7QUFOaEMsQ0FBWjs7QUFTQSxTQUFTTSxNQUFULENBQWdCQyxFQUFoQixFQUFvQjtBQUNsQixTQUFPQSxFQUFFLElBQUlBLEVBQUUsQ0FBQ0MsS0FBSCxDQUFTLFVBQVQsQ0FBTixHQUNIQyxPQUFPLElBQUlBLE9BQU8sQ0FBQ0YsRUFBRCxDQUFQLEVBRFIsR0FFSCxNQUFNRyxRQUFRLENBQUNILEVBQUQsQ0FGbEI7QUFHRDs7QUFFRCxTQUFTSSxXQUFULENBQXFCQyxLQUFyQixFQUE0QjtBQUMxQixTQUFPQSxLQUFLLENBQ1RDLEdBREksQ0FDQUMsQ0FBQyxJQUNKQSxDQUFDLENBQUNOLEtBQUYsQ0FBUSw2REFBUixDQUZHLEVBSUpLLEdBSkksQ0FJQUMsQ0FBQyxLQUFLO0FBQ1RDLElBQUFBLEVBQUUsRUFBRXBCLEdBQUcsQ0FBQ21CLENBQUMsQ0FBQyxDQUFELENBQUQsR0FBTyxFQUFSLENBREU7QUFFVGpCLElBQUFBLEVBQUUsRUFBRVMsTUFBTSxDQUFDUSxDQUFDLENBQUMsQ0FBRCxDQUFGLENBRkQ7QUFHVGhCLElBQUFBLEVBQUUsRUFBRVEsTUFBTSxDQUFDUSxDQUFDLENBQUMsQ0FBRCxDQUFGLENBSEQ7QUFJVEUsSUFBQUEsTUFBTSxFQUFFRixDQUFDLENBQUMsQ0FBRDtBQUpBLEdBQUwsQ0FKRCxFQVVKRyxNQVZJLENBVUcsQ0FBQ1IsT0FBRCxFQUFVUyxJQUFWLEtBQW1CO0FBQ3pCVCxJQUFBQSxPQUFPLENBQUNTLElBQUksQ0FBQ0YsTUFBTixDQUFQLEdBQXVCLE1BQU07QUFDM0IsWUFBTUcsSUFBSSxHQUFHRCxJQUFJLENBQUNILEVBQUwsQ0FBUUcsSUFBSSxDQUFDckIsRUFBTCxDQUFRWSxPQUFSLENBQVIsRUFBMEJTLElBQUksQ0FBQ3BCLEVBQUwsQ0FBUVcsT0FBUixDQUExQixDQUFiOztBQUNBQSxNQUFBQSxPQUFPLENBQUNTLElBQUksQ0FBQ0YsTUFBTixDQUFQLEdBQXVCLE1BQU1HLElBQTdCOztBQUNBLGFBQU9BLElBQVA7QUFDRCxLQUpEOztBQUtBLFdBQU9WLE9BQVA7QUFDRCxHQWpCSSxFQWlCRixFQWpCRSxDQUFQO0FBa0JEOztBQUVNLE1BQU1XLEtBQUssR0FBR1IsS0FBSyxJQUFJRCxXQUFXLENBQUNDLEtBQUssQ0FBQ1MsS0FBTixDQUFZLElBQVosQ0FBRCxDQUFYLENBQStCQyxDQUEvQixFQUF2Qjs7OztBQUNBLE1BQU1DLEtBQUssR0FBR1gsS0FBSyxJQUN4QkQsV0FBVyxDQUFDQyxLQUFLLENBQUNTLEtBQU4sQ0FBWSxJQUFaLEVBQWtCRyxNQUFsQixDQUEwQixHQUFFSixLQUFLLENBQUNSLEtBQUQsQ0FBUSxPQUF6QyxDQUFELENBQVgsQ0FBOERVLENBQTlELEVBREsiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tYml0d2lzZTogXCJvZmZcIiAqL1xuY29uc3Qgb3BzID0ge1xuICBBTkQ6IChwMSwgcDIpID0+IChNYXRoLnBvdygyLCAxNikgKyAocDEgJiBwMikpICUgTWF0aC5wb3coMiwgMTYpLFxuICBPUjogKHAxLCBwMikgPT4gKE1hdGgucG93KDIsIDE2KSArIChwMSB8IHAyKSkgJSBNYXRoLnBvdygyLCAxNiksXG4gIE5PVDogKHAxLCBwMikgPT4gKE1hdGgucG93KDIsIDE2KSArIH5wMikgJSBNYXRoLnBvdygyLCAxNiksXG4gIExTSElGVDogKHAxLCBwMikgPT4gKE1hdGgucG93KDIsIDE2KSArIChwMSA8PCBwMikpICUgTWF0aC5wb3coMiwgMTYpLFxuICBSU0hJRlQ6IChwMSwgcDIpID0+IChNYXRoLnBvdygyLCAxNikgKyAocDEgPj4gcDIpKSAlIE1hdGgucG93KDIsIDE2KSxcbiAgdW5kZWZpbmVkOiBwMSA9PiAoTWF0aC5wb3coMiwgMTYpICsgcDEpICUgTWF0aC5wb3coMiwgMTYpLFxufTtcblxuZnVuY3Rpb24gZ2V0dGVyKGlkKSB7XG4gIHJldHVybiBpZCAmJiBpZC5tYXRjaCgvXlthLXpdKyQvKVxuICAgID8gY2lyY3VpdCA9PiBjaXJjdWl0W2lkXSgpXG4gICAgOiAoKSA9PiBwYXJzZUludChpZCk7XG59XG5cbmZ1bmN0aW9uIG1ha2VDaXJjdWl0KGlucHV0KSB7XG4gIHJldHVybiBpbnB1dFxuICAgIC5tYXAoeCA9PlxuICAgICAgeC5tYXRjaCgvXig/OihcXHcrKSApPyg/OihBTkR8T1J8Tk9UfExTSElGVHxSU0hJRlQpIChcXHcrKSApPy0+IChcXHcrKSQvKSxcbiAgICApXG4gICAgLm1hcCh4ID0+ICh7XG4gICAgICBvcDogb3BzW3hbMl0gKyAnJ10sXG4gICAgICBwMTogZ2V0dGVyKHhbMV0pLFxuICAgICAgcDI6IGdldHRlcih4WzNdKSxcbiAgICAgIHJlc3VsdDogeFs0XSxcbiAgICB9KSlcbiAgICAucmVkdWNlKChjaXJjdWl0LCBnYXRlKSA9PiB7XG4gICAgICBjaXJjdWl0W2dhdGUucmVzdWx0XSA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgbWVtbyA9IGdhdGUub3AoZ2F0ZS5wMShjaXJjdWl0KSwgZ2F0ZS5wMihjaXJjdWl0KSk7XG4gICAgICAgIGNpcmN1aXRbZ2F0ZS5yZXN1bHRdID0gKCkgPT4gbWVtbztcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9O1xuICAgICAgcmV0dXJuIGNpcmN1aXQ7XG4gICAgfSwge30pO1xufVxuXG5leHBvcnQgY29uc3QgcGFydDEgPSBpbnB1dCA9PiBtYWtlQ2lyY3VpdChpbnB1dC5zcGxpdCgnXFxuJykpLmEoKTtcbmV4cG9ydCBjb25zdCBwYXJ0MiA9IGlucHV0ID0+XG4gIG1ha2VDaXJjdWl0KGlucHV0LnNwbGl0KCdcXG4nKS5jb25jYXQoYCR7cGFydDEoaW5wdXQpfSAtPiBiYCkpLmEoKTtcbiJdfQ==