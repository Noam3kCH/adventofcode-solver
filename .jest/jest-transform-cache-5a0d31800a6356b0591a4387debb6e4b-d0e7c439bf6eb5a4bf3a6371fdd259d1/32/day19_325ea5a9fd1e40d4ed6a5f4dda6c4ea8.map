{"version":3,"sources":["day19.js"],"names":["ops","addr","r","i1","i2","o","addi","mulr","muli","banr","bani","borr","bori","setr","seti","gtir","gtri","gtrr","eqir","eqri","eqrr","numbers","arr","map","x","parseInt","part1","input","reg0","lines","split","ip","shift","pop","commands","op","params","Math","max","divisors","result","sqrt","i","push","part2","reduce","sum"],"mappings":"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","sourcesContent":["const ops = {\n  addr: (r, i1, i2, o) => (r[o] = r[i1] + r[i2]),\n  addi: (r, i1, i2, o) => (r[o] = r[i1] + i2),\n  mulr: (r, i1, i2, o) => (r[o] = r[i1] * r[i2]),\n  muli: (r, i1, i2, o) => (r[o] = r[i1] * i2),\n  banr: (r, i1, i2, o) => (r[o] = r[i1] & r[i2]),\n  bani: (r, i1, i2, o) => (r[o] = r[i1] & i2),\n  borr: (r, i1, i2, o) => (r[o] = r[i1] | r[i2]),\n  bori: (r, i1, i2, o) => (r[o] = r[i1] | i2),\n  setr: (r, i1, i2, o) => (r[o] = r[i1]),\n  seti: (r, i1, i2, o) => (r[o] = i1),\n  gtir: (r, i1, i2, o) => (r[o] = i1 > r[i2] ? 1 : 0),\n  gtri: (r, i1, i2, o) => (r[o] = r[i1] > i2 ? 1 : 0),\n  gtrr: (r, i1, i2, o) => (r[o] = r[i1] > r[i2] ? 1 : 0),\n  eqir: (r, i1, i2, o) => (r[o] = i1 === r[i2] ? 1 : 0),\n  eqri: (r, i1, i2, o) => (r[o] = r[i1] === i2 ? 1 : 0),\n  eqrr: (r, i1, i2, o) => (r[o] = r[i1] === r[i2] ? 1 : 0),\n};\nconst numbers = arr => arr.map(x => parseInt(x));\n\nexport function part1(input, reg0 = 0) {\n  const lines = input.split('\\n');\n  const ip = parseInt(\n    lines\n      .shift()\n      .split(' ')\n      .pop(),\n  );\n  const commands = lines.map(x => {\n    const [op, ...params] = x.split(' ');\n    return { op, params: numbers(params) };\n  });\n  const r = [reg0, 0, 0, 0, 0, 0];\n  while (commands[r[ip]]) {\n    if (reg0 === 1 && r[ip] === 2) {\n      return Math.max(...r);\n    }\n    ops[commands[r[ip]].op](r, ...commands[r[ip]].params);\n    r[ip]++;\n  }\n  return r[0];\n}\n\nfunction divisors(x) {\n  const result = [];\n  const sqrt = Math.sqrt(x);\n  for (let i = 1; i <= sqrt; i++) {\n    if (x % i === 0) {\n      result.push(i);\n      if (i !== sqrt) {\n        result.push(x / i);\n      }\n    }\n  }\n  return result;\n}\n\nexport function part2(input) {\n  return divisors(part1(input, 1)).reduce((sum, x) => sum + x, 0);\n}\n"]}