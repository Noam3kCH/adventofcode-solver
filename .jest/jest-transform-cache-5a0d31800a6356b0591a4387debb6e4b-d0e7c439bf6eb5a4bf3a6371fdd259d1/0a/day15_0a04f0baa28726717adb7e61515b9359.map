{"version":3,"sources":["day15.js"],"names":["pos","x","y","count","units","type","filter","u","length","attackIfPossible","map","unit","inRange","Math","abs","attack","sort","a","b","hit","shift","splice","indexOf","neighbors","next","forbidden","result","p","has","move","forEach","n","add","moveIfPossible","solutionLength","Infinity","solutions","queue","Set","find","push","Object","assign","turn","i","fight","input","elfBoost","replace","split","row","cell","part1","reduce","sum","part2","elfCount","match"],"mappings":"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","sourcesContent":["const pos = ({ x, y }) => `${x},${y}`;\nconst count = (units, type) => units.filter(u => u.type === type).length;\n\nfunction attackIfPossible(map, units, unit) {\n  const inRange = u => Math.abs(u.x - unit.x) + Math.abs(u.y - unit.y) === 1;\n  const attack = units\n    .filter(u => u.type !== unit.type && inRange(u))\n    .sort((a, b) => a.hit - b.hit || a.y - b.y || a.x - b.x)\n    .shift();\n  if (attack) {\n    attack.hit -= unit.attack;\n    if (attack.hit <= 0) {\n      units.splice(units.indexOf(attack), 1);\n    }\n  }\n  return !!attack;\n}\n\nfunction neighbors(map, units, next, type, forbidden) {\n  const result = [\n    { x: next.x, y: next.y - 1 },\n    { x: next.x - 1, y: next.y },\n    { x: next.x + 1, y: next.y },\n    { x: next.x, y: next.y + 1 },\n  ]\n    .filter(p => map[p.y] && map[p.y][p.x] === '.' && !forbidden.has(pos(p)))\n    .map(p => ({ ...p, move: next.move || p, length: next.length + 1 }));\n  result.forEach(n => forbidden.add(pos(n)));\n  return result;\n}\n\nfunction moveIfPossible(map, units, unit) {\n  let solutionLength = Infinity;\n  const solutions = [];\n  const queue = [{ x: unit.x, y: unit.y, length: 0 }];\n  const forbidden = new Set(units.filter(u => u.type === unit.type).map(pos));\n  while (queue.length > 0 && queue[0].length <= solutionLength) {\n    const next = queue.shift();\n    if (units.find(u => pos(u) === pos(next) && u.type !== unit.type)) {\n      solutions.push(next);\n      solutionLength = next.length;\n    }\n    queue.push(...neighbors(map, units, next, unit.type, forbidden));\n  }\n  if (solutions.length > 0) {\n    solutions.sort((a, b) => a.y - b.y || a.x - b.x);\n    Object.assign(unit, solutions.shift().move);\n  }\n}\n\nfunction turn(map, units) {\n  units.sort((a, b) => a.y - b.y || a.x - b.x);\n  for (let i = 0; i < units.length; i++) {\n    if (count(units, 'E') === 0 || count(units, 'G') === 0) {\n      return false;\n    }\n    const unit = units[i];\n    if (!attackIfPossible(map, units, unit)) {\n      moveIfPossible(map, units, unit);\n      attackIfPossible(map, units, unit);\n    }\n    i = units.indexOf(unit); //in case something was removed\n  }\n  return true;\n}\n\nfunction fight(input, elfBoost = 0) {\n  let i = 0;\n  const units = [];\n  const map = input.replace(/[EG]/g, '.').split('\\n');\n  input.split('\\n').forEach((row, y) =>\n    row.split('').forEach((cell, x) => {\n      if (cell === 'E') {\n        units.push({ type: 'E', hit: 200, attack: 3 + elfBoost, x, y });\n      } else if (cell === 'G') {\n        units.push({ type: 'G', hit: 200, attack: 3, x, y });\n      }\n    }),\n  );\n  while (turn(map, units)) {\n    i++;\n  }\n  return { i, units };\n}\n\nexport function part1(input) {\n  const { i, units } = fight(input);\n  return i * units.reduce((sum, u) => (sum += u.hit), 0);\n}\n\nexport function part2(input) {\n  const elfCount = input.match(/E/g).length;\n  let elfBoost = 1;\n  let i, units;\n  do {\n    ({ i, units } = fight(input, elfBoost));\n    elfBoost++;\n  } while (elfCount !== count(units, 'E'));\n  return i * units.reduce((sum, u) => (sum += u.hit), 0);\n}\n"]}