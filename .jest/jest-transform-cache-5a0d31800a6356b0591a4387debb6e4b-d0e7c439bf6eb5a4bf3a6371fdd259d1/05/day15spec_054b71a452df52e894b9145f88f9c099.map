{"version":3,"sources":["day15.spec.js"],"names":["input","url","describe","it","expect","join","toEqual"],"mappings":"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","sourcesContent":["import { part1, part2 } from './day15.js';\nimport readInput from '../utils/read-input';\n\nconst input = readInput(import.meta.url);\n\ndescribe('day15 2018', () => {\n  describe('part1', () => {\n    it('should work for part 1 examples 1', () => {\n      expect(\n        part1(\n          [\n            '#######',\n            '#.G...#',\n            '#...EG#',\n            '#.#.#G#',\n            '#..G#E#',\n            '#.....#',\n            '#######',\n          ].join('\\n'),\n        ),\n      ).toEqual(27730);\n    });\n\n    it('should work for part 1 examples 2', () => {\n      expect(\n        part1(\n          [\n            '#######',\n            '#G..#E#',\n            '#E#E.E#',\n            '#G.##.#',\n            '#...#E#',\n            '#...E.#',\n            '#######',\n          ].join('\\n'),\n        ),\n      ).toEqual(36334);\n    });\n\n    it('should work for part 1 examples 3', () => {\n      expect(\n        part1(\n          [\n            '#######',\n            '#E.G#.#',\n            '#.#G..#',\n            '#G.#.G#',\n            '#G..#.#',\n            '#...E.#',\n            '#######',\n          ].join('\\n'),\n        ),\n      ).toEqual(27755);\n    });\n\n    it('should work for part 1 examples 4', () => {\n      expect(\n        part1(\n          [\n            '#######',\n            '#.E...#',\n            '#.#..G#',\n            '#.###.#',\n            '#E#G#G#',\n            '#...#G#',\n            '#######',\n          ].join('\\n'),\n        ),\n      ).toEqual(28944);\n    });\n\n    it('should work for part 1 examples 5', () => {\n      expect(\n        part1(\n          [\n            '#########',\n            '#G......#',\n            '#.E.#...#',\n            '#..##..G#',\n            '#...##..#',\n            '#...#...#',\n            '#.G...G.#',\n            '#.....G.#',\n            '#########',\n          ].join('\\n'),\n        ),\n      ).toEqual(18740);\n    });\n\n    it('should work for part 1 input', () => {\n      expect(part1(input)).toEqual(189000);\n    });\n  });\n\n  describe('part2', () => {\n    it('should work for part 2 examples 1', () => {\n      expect(\n        part2(\n          [\n            '#######',\n            '#.G...#',\n            '#...EG#',\n            '#.#.#G#',\n            '#..G#E#',\n            '#.....#',\n            '#######',\n          ].join('\\n'),\n        ),\n      ).toEqual(4988);\n    });\n\n    it('should work for part 2 examples 2', () => {\n      expect(\n        part2(\n          [\n            '#######',\n            '#E..EG#',\n            '#.#G.E#',\n            '#E.##E#',\n            '#G..#.#',\n            '#..E#.#',\n            '#######',\n          ].join('\\n'),\n        ),\n      ).toEqual(31284);\n    });\n\n    it('should work for part 2 examples 3', () => {\n      expect(\n        part2(\n          [\n            '#######',\n            '#E.G#.#',\n            '#.#G..#',\n            '#G.#.G#',\n            '#G..#.#',\n            '#...E.#',\n            '#######',\n          ].join('\\n'),\n        ),\n      ).toEqual(3478);\n    });\n\n    it('should work for part 2 examples 4', () => {\n      expect(\n        part2(\n          [\n            '#######',\n            '#.E...#',\n            '#.#..G#',\n            '#.###.#',\n            '#E#G#G#',\n            '#...#G#',\n            '#######',\n          ].join('\\n'),\n        ),\n      ).toEqual(6474);\n    });\n\n    it('should work for part 2 examples 5', () => {\n      expect(\n        part2(\n          [\n            '#########',\n            '#G......#',\n            '#.E.#...#',\n            '#..##..G#',\n            '#...##..#',\n            '#...#...#',\n            '#.G...G.#',\n            '#.....G.#',\n            '#########',\n          ].join('\\n'),\n        ),\n      ).toEqual(1140);\n    });\n\n    it('should work for part 2 input', () => {\n      expect(part2(input)).toEqual(38512);\n    });\n  });\n});\n"]}