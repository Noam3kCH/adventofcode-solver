{"version":3,"sources":["day24.js"],"names":["parse","input","groups","army","split","forEach","line","length","units","hit","properties","attack","type","initiative","match","group","parseInt","immune","weak","property","kinds","push","effectiveSort","a","b","damage","attacking","defending","includes","battle","some","sort","options","slice","fight","selected","filter","option","map","shift","splice","indexOf","totalKilled","killed","Math","floor","undefined","part1","reduce","sum","attempt","i","boost","g","result","binarySearch","cb","start","increment","pow","end","part2"],"mappings":"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","sourcesContent":["function parse(input) {\n  const groups = [];\n  let army;\n  input.split('\\n').forEach(line => {\n    if (line === 'Immune System:') {\n      army = 'Immune System';\n    } else if (line === 'Infection:') {\n      army = 'Infection';\n    } else if (line.length > 0) {\n      const [, units, hit, properties, attack, type, initiative] = line.match(\n        /^(\\d+) units each with (\\d+) hit points(?: \\(([^)]+)\\))? with an attack that does (\\d+) ([^\\s]+) damage at initiative (\\d+)$/,\n      );\n      const group = {\n        army,\n        units: parseInt(units),\n        hit: parseInt(hit),\n        immune: [],\n        weak: [],\n        attack: parseInt(attack),\n        type,\n        initiative: parseInt(initiative),\n      };\n      if (properties) {\n        properties.split('; ').forEach(property => {\n          const [type, kinds] = property.split(' to ');\n          group[type].push(...kinds.split(', '));\n        });\n      }\n      groups.push(group);\n    }\n  });\n  return groups;\n}\n\nfunction effectiveSort(a, b) {\n  return b.units * b.attack - a.units * a.attack || b.initiative - a.initiative;\n}\n\nfunction damage(attacking, defending) {\n  if (defending.immune.includes(attacking.type)) {\n    return 0;\n  } else if (defending.weak.includes(attacking.type)) {\n    return attacking.units * attacking.attack * 2;\n  } else {\n    return attacking.units * attacking.attack;\n  }\n}\n\nfunction battle(groups) {\n  while (groups.some(group => group.army !== groups[0].army)) {\n    groups.sort(effectiveSort);\n    const options = groups.slice(0);\n    const fight = [];\n    groups.forEach(attacking => {\n      const selected = options\n        .filter(option => option.army !== attacking.army)\n        .map(option => ({ option, damage: damage(attacking, option) }))\n        .sort(\n          (a, b) => b.damage - a.damage || effectiveSort(a.option, b.option),\n        )\n        .shift();\n      if (selected && selected.damage > 0) {\n        const defending = selected.option;\n        options.splice(options.indexOf(defending), 1);\n        fight.push({ attacking, defending });\n      }\n    });\n    fight.sort((a, b) => b.attacking.initiative - a.attacking.initiative);\n    let totalKilled = 0;\n    fight.forEach(({ attacking, defending }) => {\n      if (attacking.units > 0) {\n        const killed = Math.floor(damage(attacking, defending) / defending.hit);\n        defending.units -= killed;\n        totalKilled += killed;\n        if (defending.units <= 0) {\n          groups.splice(groups.indexOf(defending), 1);\n        }\n      }\n    });\n    if (totalKilled === 0) {\n      return undefined;\n    }\n  }\n  return groups;\n}\n\nexport function part1(input) {\n  const groups = parse(input);\n  return battle(groups).reduce((sum, group) => sum + group.units, 0);\n}\n\nfunction attempt(input, i) {\n  const groups = parse(input);\n  const boost = groups.map(g => {\n    if (g.army === 'Immune System') {\n      g.attack += i;\n    }\n    return g;\n  });\n  const result = battle(boost);\n  return (\n    result &&\n    result[0].army === 'Immune System' &&\n    result.reduce((sum, group) => sum + group.units, 0)\n  );\n}\n\nfunction binarySearch(cb) {\n  let start = 0;\n  let increment = Math.pow(2, 10);\n  while (increment > 4) {\n    while (!cb(start)) {\n      start += increment;\n    }\n    start -= increment;\n    increment /= 2;\n  }\n  const end = start + increment * 2;\n  for (let i = start; i <= end; i++) {\n    if (cb(i)) {\n      return cb(i);\n    }\n  }\n}\n\nexport function part2(input) {\n  return binarySearch(i => attempt(input, i));\n}\n"]}