{"version":3,"sources":["day12.js"],"names":["trim","next","prefix","state","match","pop","length","start","replace","remember","current","memo","i","visit","recall","loop","size","diff","transform","transformations","slice","part1","input","generations","lines","split","initialState","shift","map","x","reduce","obj","from","to","Math","floor","sum","part2"],"mappings":"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","sourcesContent":["function trim(next) {\n  const prefix = next.state.match(/^\\.*/).pop().length;\n  next.start += prefix;\n  next.state = next.state.replace(/^\\.*/, '').replace(/\\.*$/, '');\n  return next;\n}\n\nfunction remember(next, current, memo, i) {\n  memo[current.state] = {\n    state: next.state,\n    start: next.start - current.start,\n    visit: { start: current.start, i },\n  };\n  return next;\n}\n\nfunction recall(current, memo, i) {\n  return {\n    state: memo[current.state].state,\n    start: current.start + memo[current.state].start,\n    loop: {\n      size: i - memo[current.state].visit.i,\n      diff: current.start - memo[current.state].visit.start,\n    },\n  };\n}\n\nfunction transform(current, transformations, memo, i) {\n  current = trim(current);\n  if (memo[current.state]) {\n    return recall(current, memo, i);\n  }\n  current.start -= 5;\n  current.state = '.....' + current.state + '.....';\n  const next = { start: current.start, state: '..' };\n  for (let i = 0; i < current.state.length - 5; i++) {\n    if (transformations[current.state.slice(i, i + 5)] === '#') {\n      next.state += '#';\n    } else {\n      next.state += '.';\n    }\n  }\n  return remember(trim(next), trim(current), memo, i);\n}\n\nexport function part1(input, generations = 20) {\n  const lines = input.split('\\n');\n  const [, initialState] = lines.shift().match(/([#.]+)/);\n  const transformations = lines\n    .slice(1)\n    .map(x => x.split(' => '))\n    .reduce((obj, [from, to]) => ({ ...obj, [from]: to }), {});\n\n  const memo = {};\n  let next = { start: 0, state: initialState };\n  for (let i = 0; i < generations; i++) {\n    next = transform(next, transformations, memo, i);\n    if (next.loop) {\n      const { diff, size } = next.loop;\n      next.start += diff * Math.floor((generations - i - 1) / size);\n      i += Math.floor((generations - i - 1) / size) * size;\n    }\n  }\n\n  return next.state\n    .split('')\n    .map((x, i) => (x === '#' ? next.start + i : 0))\n    .reduce((sum, x) => sum + x, 0);\n}\n\nexport function part2(input) {\n  return part1(input, 50000000000);\n}\n"]}