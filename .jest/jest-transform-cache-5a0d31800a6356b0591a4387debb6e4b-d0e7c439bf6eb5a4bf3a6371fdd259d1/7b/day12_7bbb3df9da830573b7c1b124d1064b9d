bacfb64da16ebd5a0679f92a7323276c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function trim(next) {
  const prefix = next.state.match(/^\.*/).pop().length;
  next.start += prefix;
  next.state = next.state.replace(/^\.*/, '').replace(/\.*$/, '');
  return next;
}

function remember(next, current, memo, i) {
  memo[current.state] = {
    state: next.state,
    start: next.start - current.start,
    visit: {
      start: current.start,
      i
    }
  };
  return next;
}

function recall(current, memo, i) {
  return {
    state: memo[current.state].state,
    start: current.start + memo[current.state].start,
    loop: {
      size: i - memo[current.state].visit.i,
      diff: current.start - memo[current.state].visit.start
    }
  };
}

function transform(current, transformations, memo, i) {
  current = trim(current);

  if (memo[current.state]) {
    return recall(current, memo, i);
  }

  current.start -= 5;
  current.state = '.....' + current.state + '.....';
  const next = {
    start: current.start,
    state: '..'
  };

  for (let i = 0; i < current.state.length - 5; i++) {
    if (transformations[current.state.slice(i, i + 5)] === '#') {
      next.state += '#';
    } else {
      next.state += '.';
    }
  }

  return remember(trim(next), trim(current), memo, i);
}

function part1(input, generations = 20) {
  const lines = input.split('\n');
  const [, initialState] = lines.shift().match(/([#.]+)/);
  const transformations = lines.slice(1).map(x => x.split(' => ')).reduce((obj, [from, to]) => ({ ...obj,
    [from]: to
  }), {});
  const memo = {};
  let next = {
    start: 0,
    state: initialState
  };

  for (let i = 0; i < generations; i++) {
    next = transform(next, transformations, memo, i);

    if (next.loop) {
      const {
        diff,
        size
      } = next.loop;
      next.start += diff * Math.floor((generations - i - 1) / size);
      i += Math.floor((generations - i - 1) / size) * size;
    }
  }

  return next.state.split('').map((x, i) => x === '#' ? next.start + i : 0).reduce((sum, x) => sum + x, 0);
}

function part2(input) {
  return part1(input, 50000000000);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTEyLmpzIl0sIm5hbWVzIjpbInRyaW0iLCJuZXh0IiwicHJlZml4Iiwic3RhdGUiLCJtYXRjaCIsInBvcCIsImxlbmd0aCIsInN0YXJ0IiwicmVwbGFjZSIsInJlbWVtYmVyIiwiY3VycmVudCIsIm1lbW8iLCJpIiwidmlzaXQiLCJyZWNhbGwiLCJsb29wIiwic2l6ZSIsImRpZmYiLCJ0cmFuc2Zvcm0iLCJ0cmFuc2Zvcm1hdGlvbnMiLCJzbGljZSIsInBhcnQxIiwiaW5wdXQiLCJnZW5lcmF0aW9ucyIsImxpbmVzIiwic3BsaXQiLCJpbml0aWFsU3RhdGUiLCJzaGlmdCIsIm1hcCIsIngiLCJyZWR1Y2UiLCJvYmoiLCJmcm9tIiwidG8iLCJNYXRoIiwiZmxvb3IiLCJzdW0iLCJwYXJ0MiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxTQUFTQSxJQUFULENBQWNDLElBQWQsRUFBb0I7QUFDbEIsUUFBTUMsTUFBTSxHQUFHRCxJQUFJLENBQUNFLEtBQUwsQ0FBV0MsS0FBWCxDQUFpQixNQUFqQixFQUF5QkMsR0FBekIsR0FBK0JDLE1BQTlDO0FBQ0FMLEVBQUFBLElBQUksQ0FBQ00sS0FBTCxJQUFjTCxNQUFkO0FBQ0FELEVBQUFBLElBQUksQ0FBQ0UsS0FBTCxHQUFhRixJQUFJLENBQUNFLEtBQUwsQ0FBV0ssT0FBWCxDQUFtQixNQUFuQixFQUEyQixFQUEzQixFQUErQkEsT0FBL0IsQ0FBdUMsTUFBdkMsRUFBK0MsRUFBL0MsQ0FBYjtBQUNBLFNBQU9QLElBQVA7QUFDRDs7QUFFRCxTQUFTUSxRQUFULENBQWtCUixJQUFsQixFQUF3QlMsT0FBeEIsRUFBaUNDLElBQWpDLEVBQXVDQyxDQUF2QyxFQUEwQztBQUN4Q0QsRUFBQUEsSUFBSSxDQUFDRCxPQUFPLENBQUNQLEtBQVQsQ0FBSixHQUFzQjtBQUNwQkEsSUFBQUEsS0FBSyxFQUFFRixJQUFJLENBQUNFLEtBRFE7QUFFcEJJLElBQUFBLEtBQUssRUFBRU4sSUFBSSxDQUFDTSxLQUFMLEdBQWFH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LEdBQUQsRUFBTVAsQ0FBTixLQUFZTyxHQUFHLEdBQUdQLENBSHJCLEVBR3dCLENBSHhCLENBQVA7QUFJRDs7QUFFTSxTQUFTUSxLQUFULENBQWVmLEtBQWYsRUFBc0I7QUFDM0IsU0FBT0QsS0FBSyxDQUFDQyxLQUFELEVBQVEsV0FBUixDQUFaO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiB0cmltKG5leHQpIHtcbiAgY29uc3QgcHJlZml4ID0gbmV4dC5zdGF0ZS5tYXRjaCgvXlxcLiovKS5wb3AoKS5sZW5ndGg7XG4gIG5leHQuc3RhcnQgKz0gcHJlZml4O1xuICBuZXh0LnN0YXRlID0gbmV4dC5zdGF0ZS5yZXBsYWNlKC9eXFwuKi8sICcnKS5yZXBsYWNlKC9cXC4qJC8sICcnKTtcbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIHJlbWVtYmVyKG5leHQsIGN1cnJlbnQsIG1lbW8sIGkpIHtcbiAgbWVtb1tjdXJyZW50LnN0YXRlXSA9IHtcbiAgICBzdGF0ZTogbmV4dC5zdGF0ZSxcbiAgICBzdGFydDogbmV4dC5zdGFydCAtIGN1cnJlbnQuc3RhcnQsXG4gICAgdmlzaXQ6IHsgc3RhcnQ6IGN1cnJlbnQuc3RhcnQsIGkgfSxcbiAgfTtcbiAgcmV0dXJuIG5leHQ7XG59XG5cbmZ1bmN0aW9uIHJlY2FsbChjdXJyZW50LCBtZW1vLCBpKSB7XG4gIHJldHVybiB7XG4gICAgc3RhdGU6IG1lbW9bY3VycmVudC5zdGF0ZV0uc3RhdGUsXG4gICAgc3RhcnQ6IGN1cnJlbnQuc3RhcnQgKyBtZW1vW2N1cnJlbnQuc3RhdGVdLnN0YXJ0LFxuICAgIGxvb3A6IHtcbiAgICAgIHNpemU6IGkgLSBtZW1vW2N1cnJlbnQuc3RhdGVdLnZpc2l0LmksXG4gICAgICBkaWZmOiBjdXJyZW50LnN0YXJ0IC0gbWVtb1tjdXJyZW50LnN0YXRlXS52aXNpdC5zdGFydCxcbiAgICB9LFxuICB9O1xufVxuXG5mdW5jdGlvbiB0cmFuc2Zvcm0oY3VycmVudCwgdHJhbnNmb3JtYXRpb25zLCBtZW1vLCBpKSB7XG4gIGN1cnJlbnQgPSB0cmltKGN1cnJlbnQpO1xuICBpZiAobWVtb1tjdXJyZW50LnN0YXRlXSkge1xuICAgIHJldHVybiByZWNhbGwoY3VycmVudCwgbWVtbywgaSk7XG4gIH1cbiAgY3VycmVudC5zdGFydCAtPSA1O1xuICBjdXJyZW50LnN0YXRlID0gJy4uLi4uJyArIGN1cnJlbnQuc3RhdGUgKyAnLi4uLi4nO1xuICBjb25zdCBuZXh0ID0geyBzdGFydDogY3VycmVudC5zdGFydCwgc3RhdGU6ICcuLicgfTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50LnN0YXRlLmxlbmd0aCAtIDU7IGkrKykge1xuICAgIGlmICh0cmFuc2Zvcm1hdGlvbnNbY3VycmVudC5zdGF0ZS5zbGljZShpLCBpICsgNSldID09PSAnIycpIHtcbiAgICAgIG5leHQuc3RhdGUgKz0gJyMnO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0LnN0YXRlICs9ICcuJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbWVtYmVyKHRyaW0obmV4dCksIHRyaW0oY3VycmVudCksIG1lbW8sIGkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDEoaW5wdXQsIGdlbmVyYXRpb25zID0gMjApIHtcbiAgY29uc3QgbGluZXMgPSBpbnB1dC5zcGxpdCgnXFxuJyk7XG4gIGNvbnN0IFssIGluaXRpYWxTdGF0ZV0gPSBsaW5lcy5zaGlmdCgpLm1hdGNoKC8oWyMuXSspLyk7XG4gIGNvbnN0IHRyYW5zZm9ybWF0aW9ucyA9IGxpbmVzXG4gICAgLnNsaWNlKDEpXG4gICAgLm1hcCh4ID0+IHguc3BsaXQoJyA9PiAnKSlcbiAgICAucmVkdWNlKChvYmosIFtmcm9tLCB0b10pID0+ICh7IC4uLm9iaiwgW2Zyb21dOiB0byB9KSwge30pO1xuXG4gIGNvbnN0IG1lbW8gPSB7fTtcbiAgbGV0IG5leHQgPSB7IHN0YXJ0OiAwLCBzdGF0ZTogaW5pdGlhbFN0YXRlIH07XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZ2VuZXJhdGlvbnM7IGkrKykge1xuICAgIG5leHQgPSB0cmFuc2Zvcm0obmV4dCwgdHJhbnNmb3JtYXRpb25zLCBtZW1vLCBpKTtcbiAgICBpZiAobmV4dC5sb29wKSB7XG4gICAgICBjb25zdCB7IGRpZmYsIHNpemUgfSA9IG5leHQubG9vcDtcbiAgICAgIG5leHQuc3RhcnQgKz0gZGlmZiAqIE1hdGguZmxvb3IoKGdlbmVyYXRpb25zIC0gaSAtIDEpIC8gc2l6ZSk7XG4gICAgICBpICs9IE1hdGguZmxvb3IoKGdlbmVyYXRpb25zIC0gaSAtIDEpIC8gc2l6ZSkgKiBzaXplO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXh0LnN0YXRlXG4gICAgLnNwbGl0KCcnKVxuICAgIC5tYXAoKHgsIGkpID0+ICh4ID09PSAnIycgPyBuZXh0LnN0YXJ0ICsgaSA6IDApKVxuICAgIC5yZWR1Y2UoKHN1bSwgeCkgPT4gc3VtICsgeCwgMCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MihpbnB1dCkge1xuICByZXR1cm4gcGFydDEoaW5wdXQsIDUwMDAwMDAwMDAwKTtcbn1cbiJdfQ==