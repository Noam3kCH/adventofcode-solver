{"version":3,"sources":["day14.js"],"names":["cook","check","elf1","elf2","board","length","newRecipes","String","split","push","map","x","parseInt","part1","input","count","slice","join","part2","suffix","includes","indexOf"],"mappings":";;;;;;;;AAAA,SAASA,IAAT,CAAcC,KAAd,EAAqB;AACnB,MAAI,CAACC,IAAD,EAAOC,IAAP,IAAe,CAAC,CAAD,EAAI,CAAJ,CAAnB;AACA,QAAMC,KAAK,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAd;;AACA,SAAOH,KAAK,CAACG,KAAD,CAAZ,EAAqB;AACnBF,IAAAA,IAAI,GAAG,CAACA,IAAI,GAAGE,KAAK,CAACF,IAAD,CAAZ,GAAqB,CAAtB,IAA2BE,KAAK,CAACC,MAAxC;AACAF,IAAAA,IAAI,GAAG,CAACA,IAAI,GAAGC,KAAK,CAACD,IAAD,CAAZ,GAAqB,CAAtB,IAA2BC,KAAK,CAACC,MAAxC;AACA,UAAMC,UAAU,GAAGC,MAAM,CAACH,KAAK,CAACF,IAAD,CAAL,GAAcE,KAAK,CAACD,IAAD,CAApB,CAAN,CAAkCK,KAAlC,CAAwC,EAAxC,CAAnB;AACAJ,IAAAA,KAAK,CAACK,IAAN,CAAW,GAAGH,UAAU,CAACI,GAAX,CAAeC,CAAC,IAAIC,QAAQ,CAACD,CAAD,CAA5B,CAAd;AACD;;AACD,SAAOP,KAAP;AACD;;AAEM,SAASS,KAAT,CAAeC,KAAf,EAAsB;AAC3B,QAAMC,KAAK,GAAGH,QAAQ,CAACE,KAAD,CAAtB;AACA,QAAMV,KAAK,GAAGJ,IAAI,CAACI,KAAK,IAAIA,KAAK,CAACC,MAAN,GAAeU,KAAK,GAAG,EAAjC,CAAlB;AACA,SAAOX,KAAK,CAACY,KAAN,CAAYD,KAAZ,EAAmBA,KAAK,GAAG,EAA3B,EAA+BE,IAA/B,CAAoC,EAApC,CAAP;AACD;;AAEM,SAASC,KAAT,CAAeJ,KAAf,EAAsB;AAC3B,MAAIK,MAAM,GAAG,EAAb;AACA,QAAMf,KAAK,GAAGJ,IAAI,CAACI,KAAK,IAAI;AAC1Be,IAAAA,MAAM,GAAGf,KAAK,CAACY,KAAN,CAAY,CAAC,CAAD,GAAKF,KAAK,CAACT,MAAX,GAAoB,CAAhC,EAAmCY,IAAnC,CAAwC,EAAxC,CAAT;AACA,WAAO,CAACE,MAAM,CAACC,QAAP,CAAgBN,KAAhB,CAAR;AACD,GAHiB,CAAlB;AAIA,SAAOV,KAAK,CAACC,MAAN,GAAeS,KAAK,CAACT,MAArB,GAA8Bc,MAAM,CAACE,OAAP,CAAeP,KAAf,CAA9B,GAAsD,CAA7D;AACD","sourcesContent":["function cook(check) {\n  let [elf1, elf2] = [0, 1];\n  const board = [3, 7, 1, 0];\n  while (check(board)) {\n    elf1 = (elf1 + board[elf1] + 1) % board.length;\n    elf2 = (elf2 + board[elf2] + 1) % board.length;\n    const newRecipes = String(board[elf1] + board[elf2]).split('');\n    board.push(...newRecipes.map(x => parseInt(x)));\n  }\n  return board;\n}\n\nexport function part1(input) {\n  const count = parseInt(input);\n  const board = cook(board => board.length < count + 10);\n  return board.slice(count, count + 10).join('');\n}\n\nexport function part2(input) {\n  let suffix = '';\n  const board = cook(board => {\n    suffix = board.slice(-1 * input.length - 1).join('');\n    return !suffix.includes(input);\n  });\n  return board.length - input.length + suffix.indexOf(input) - 1;\n}\n"]}