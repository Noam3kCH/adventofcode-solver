{"version":3,"sources":["day03.js"],"names":["solve1","destination","radius","multiplier","bottomRight","bottomLeft","topLeft","topRight","fromCorner","Math","min","abs","toKey","x","y","next","position","direction","calc","map","reduce","sum","solve2","state","current","part1","input","parseInt","part2"],"mappings":"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","sourcesContent":["function solve1(destination) {\n  let radius = 0;\n  let multiplier = 0;\n  while (8 * multiplier + 1 < destination) {\n    radius++;\n    multiplier += radius;\n  }\n  const bottomRight = 8 * multiplier + 1;\n  const bottomLeft = bottomRight - radius * 2;\n  const topLeft = bottomLeft - radius * 2;\n  const topRight = topLeft - radius * 2;\n  const fromCorner = Math.min(\n    Math.abs(topRight - destination),\n    Math.abs(bottomLeft - destination),\n  );\n  return radius * 2 - Math.min(fromCorner, radius * 2 - fromCorner);\n}\n\nfunction toKey({ x, y }) {\n  return `${x}-${y}`;\n}\n\nfunction next({ position, direction }) {\n  const { x, y } = position;\n  switch (direction) {\n    case 'R':\n      return { x: x + 1, y };\n    case 'L':\n      return { x: x - 1, y };\n    case 'U':\n      return { x, y: y - 1 };\n    case 'D':\n      return { x, y: y + 1 };\n    default:\n  }\n}\n\nfunction calc({ position, map }) {\n  const { x, y } = position;\n  return [\n    map[toKey({ x: x - 1, y: y - 1 })] || 0,\n    map[toKey({ x: x + 0, y: y - 1 })] || 0,\n    map[toKey({ x: x + 1, y: y - 1 })] || 0,\n    map[toKey({ x: x - 1, y: y + 0 })] || 0,\n    map[toKey({ x: x + 1, y: y + 0 })] || 0,\n    map[toKey({ x: x - 1, y: y + 1 })] || 0,\n    map[toKey({ x: x + 0, y: y + 1 })] || 0,\n    map[toKey({ x: x + 1, y: y + 1 })] || 0,\n  ].reduce((sum, x) => sum + x);\n}\n\nfunction direction({ position, direction, map }) {\n  switch (direction) {\n    case 'R':\n      return map[toKey(next({ position, direction: 'U' }))] ? direction : 'U';\n    case 'L':\n      return map[toKey(next({ position, direction: 'D' }))] ? direction : 'D';\n    case 'U':\n      return map[toKey(next({ position, direction: 'L' }))] ? direction : 'L';\n    case 'D':\n      return map[toKey(next({ position, direction: 'R' }))] ? direction : 'R';\n    default:\n  }\n}\n\nfunction solve2(destination) {\n  const state = {\n    position: { x: 0, y: 0 },\n    direction: 'R',\n    map: { [toKey({ x: 0, y: 0 })]: 1 },\n  };\n  let current = 1;\n  while (current <= destination) {\n    state.position = next(state);\n    current = state.map[toKey(state.position)] = calc(state);\n    state.direction = direction(state);\n  }\n  return current;\n}\n\nexport const part1 = input => solve1(parseInt(input));\nexport const part2 = input => solve2(parseInt(input));\n"]}