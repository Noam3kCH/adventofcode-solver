{"version":3,"sources":["day02.js"],"names":["part1","input","ids","split","counts","double","triple","forEach","id","s","sort","join","match","replace","part2","memory","Set","arr","i","length","without","map","x","index","has","add"],"mappings":";;;;;;;;AAAO,SAASA,KAAT,CAAeC,KAAf,EAAsB;AAC3B,QAAMC,GAAG,GAAGD,KAAK,CAACE,KAAN,CAAY,IAAZ,CAAZ;AACA,QAAMC,MAAM,GAAG;AAAEC,IAAAA,MAAM,EAAE,CAAV;AAAaC,IAAAA,MAAM,EAAE;AAArB,GAAf;AACAJ,EAAAA,GAAG,CAACK,OAAJ,CAAYC,EAAE,IAAI;AAChB,QAAIC,CAAC,GAAGD,EAAE,CACPL,KADK,CACC,EADD,EAELO,IAFK,GAGLC,IAHK,CAGA,EAHA,CAAR;;AAIA,QAAIF,CAAC,CAACG,KAAF,CAAQ,cAAR,CAAJ,EAA6B;AAC3BR,MAAAA,MAAM,CAACE,MAAP;AACAG,MAAAA,CAAC,GAAGA,CAAC,CAACI,OAAF,CAAU,eAAV,EAA2B,EAA3B,CAAJ;AACD;;AACD,QAAIJ,CAAC,CAACG,KAAF,CAAQ,WAAR,CAAJ,EAA0B;AACxBR,MAAAA,MAAM,CAACC,MAAP;AACD;AACF,GAZD;AAaA,SAAOD,MAAM,CAACE,MAAP,GAAgBF,MAAM,CAACC,MAA9B;AACD;;AAEM,SAASS,KAAT,CAAeb,KAAf,EAAsB;AAC3B,QAAMC,GAAG,GAAGD,KAAK,CAACE,KAAN,CAAY,IAAZ,CAAZ;AACA,QAAMY,MAAM,GAAG,IAAIC,GAAJ,EAAf;;AACA,OAAK,MAAMR,EAAX,IAAiBN,GAAjB,EAAsB;AACpB,UAAMe,GAAG,GAAGT,EAAE,CAACL,KAAH,CAAS,EAAT,CAAZ;;AACA,SAAK,IAAIe,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACE,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,YAAME,OAAO,GAAGH,GAAG,CAACI,GAAJ,CAAQ,CAACC,CAAD,EAAIC,KAAJ,KAAeA,KAAK,KAAKL,CAAV,GAAc,GAAd,GAAoBI,CAA3C,EAA+CX,IAA/C,CAAoD,EAApD,CAAhB;;AACA,UAAII,MAAM,CAACS,GAAP,CAAWJ,OAAX,CAAJ,EAAyB;AACvB,eAAOA,OAAO,CAACP,OAAR,CAAgB,GAAhB,EAAqB,EAArB,CAAP;AACD,OAFD,MAEO;AACLE,QAAAA,MAAM,CAACU,GAAP,CAAWL,OAAX;AACD;AACF;AACF;AACF","sourcesContent":["export function part1(input) {\n  const ids = input.split('\\n');\n  const counts = { double: 0, triple: 0 };\n  ids.forEach(id => {\n    let s = id\n      .split('')\n      .sort()\n      .join('');\n    if (s.match(/([a-z])\\1\\1+/)) {\n      counts.triple++;\n      s = s.replace(/([a-z])\\1\\1+/g, '');\n    }\n    if (s.match(/([a-z])\\1/)) {\n      counts.double++;\n    }\n  });\n  return counts.triple * counts.double;\n}\n\nexport function part2(input) {\n  const ids = input.split('\\n');\n  const memory = new Set();\n  for (const id of ids) {\n    const arr = id.split('');\n    for (let i = 0; i < arr.length; i++) {\n      const without = arr.map((x, index) => (index === i ? '*' : x)).join('');\n      if (memory.has(without)) {\n        return without.replace('*', '');\n      } else {\n        memory.add(without);\n      }\n    }\n  }\n}\n"]}