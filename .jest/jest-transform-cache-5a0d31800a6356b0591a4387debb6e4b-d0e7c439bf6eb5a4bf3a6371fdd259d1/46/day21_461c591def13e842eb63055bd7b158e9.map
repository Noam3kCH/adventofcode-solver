{"version":3,"sources":["day21.js"],"names":["parse","input","fn","regexp","ops","a","b","str","parseInt","sort","arr","match","RegExp","slice","join","indexOf","length","reverse","Array","fill","map","x","i","rotate","filter","pop","split","moved","splice","replace","cmd","undo","part1","password","reduce","f","part2","encoded"],"mappings":"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","sourcesContent":["function parse(input, fn) {\n  const regexp = /^(swap position|swap letter|rotate based|rotate|reverse positions|move position) ([^\\s]+)\\s.*\\s([^\\s]+)$/;\n  const ops = {\n    'swap position': (a, b) => str => {\n      [a, b] = [parseInt(a), parseInt(b)].sort((a, b) => a - b);\n      const arr = str\n        .match(new RegExp(`^(.{${a}})(.)(.{${b - a - 1}})(.)(.*)$`))\n        .slice(1);\n      return [arr[0], arr[3], arr[2], arr[1], arr[4]].join('');\n    },\n    'swap letter': (a, b) => str => {\n      [a, b] = [str.indexOf(a), str.indexOf(b)].sort((a, b) => a - b);\n      const arr = str\n        .match(new RegExp(`^(.{${a}})(.)(.{${b - a - 1}})(.)(.*)$`))\n        .slice(1);\n      return [arr[0], arr[3], arr[2], arr[1], arr[4]].join('');\n    },\n    'rotate based': (a, b) => str => {\n      b = (str.indexOf(b) + 1 + (str.indexOf(b) >= 4 ? 1 : 0)) % str.length;\n      return str\n        .match(new RegExp(`^(.*)(.{${b}})$`))\n        .slice(1)\n        .reverse()\n        .join('');\n    },\n    'un rotate based': (a, b) => str => {\n      return new Array(str.length)\n        .fill()\n        .map((x, i) => {\n          const rotate = (i + 1 + (i >= 4 ? 1 : 0)) % str.length;\n          return str\n            .match(new RegExp(`^(.{${rotate}})(.*)$`))\n            .slice(1)\n            .reverse()\n            .join('');\n        })\n        .filter((x, i) => x.indexOf(b) === i)\n        .pop();\n    },\n    rotate: (a, b) => str => {\n      b = parseInt(b) % str.length;\n      const regexp = a === 'left' ? `^(.{${b}})(.*)$` : `^(.*)(.{${b}})$`;\n      return str\n        .match(new RegExp(regexp))\n        .slice(1)\n        .reverse()\n        .join('');\n    },\n    'reverse positions': (a, b) => str => {\n      [a, b] = [parseInt(a), parseInt(b)].sort((a, b) => a - b);\n      const arr = str\n        .match(new RegExp(`^(.{${a}})(.)(.{${b - a - 1}})(.)(.*)$`))\n        .slice(1);\n      return [\n        arr[0],\n        arr[3],\n        ...arr[2].split('').reverse(),\n        arr[1],\n        arr[4],\n      ].join('');\n    },\n    'move position': (a, b) => str => {\n      const arr = str.split('');\n      const moved = arr.splice(parseInt(a), 1).pop();\n      arr.splice(parseInt(b), 0, moved);\n      return arr.join('');\n    },\n  };\n  return input\n    .split('\\n')\n    .map(x =>\n      fn(\n        x\n          .replace(/ (\\d+) (steps?)$/, ' $2 $1')\n          .match(regexp)\n          .slice(1),\n      ),\n    )\n    .map(cmd => ops[cmd[0]](cmd[1], cmd[2]));\n}\n\nfunction undo(x) {\n  switch (x[0]) {\n    case 'rotate':\n      return [x[0], x[1] === 'left' ? 'right' : 'left', x[2]];\n    case 'move position':\n      return [x[0], x[2], x[1]];\n    case 'rotate based':\n      return ['un rotate based', x[1], x[2]];\n    default:\n      return x;\n  }\n}\n\nexport const part1 = (input, password = 'abcdefgh') =>\n  parse(input, x => x).reduce((x, f) => f(x), password);\nexport const part2 = (input, encoded = 'fbgdceah') =>\n  parse(input, undo)\n    .reverse()\n    .reduce((x, f) => f(x), encoded);\n"]}