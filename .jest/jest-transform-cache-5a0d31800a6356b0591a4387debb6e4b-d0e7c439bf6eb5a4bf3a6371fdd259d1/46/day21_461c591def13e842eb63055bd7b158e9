9d563dd1a35eb38189117ed886b1b7b1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part2 = exports.part1 = void 0;

function parse(input, fn) {
  const regexp = /^(swap position|swap letter|rotate based|rotate|reverse positions|move position) ([^\s]+)\s.*\s([^\s]+)$/;
  const ops = {
    'swap position': (a, b) => str => {
      [a, b] = [parseInt(a), parseInt(b)].sort((a, b) => a - b);
      const arr = str.match(new RegExp(`^(.{${a}})(.)(.{${b - a - 1}})(.)(.*)$`)).slice(1);
      return [arr[0], arr[3], arr[2], arr[1], arr[4]].join('');
    },
    'swap letter': (a, b) => str => {
      [a, b] = [str.indexOf(a), str.indexOf(b)].sort((a, b) => a - b);
      const arr = str.match(new RegExp(`^(.{${a}})(.)(.{${b - a - 1}})(.)(.*)$`)).slice(1);
      return [arr[0], arr[3], arr[2], arr[1], arr[4]].join('');
    },
    'rotate based': (a, b) => str => {
      b = (str.indexOf(b) + 1 + (str.indexOf(b) >= 4 ? 1 : 0)) % str.length;
      return str.match(new RegExp(`^(.*)(.{${b}})$`)).slice(1).reverse().join('');
    },
    'un rotate based': (a, b) => str => {
      return new Array(str.length).fill().map((x, i) => {
        const rotate = (i + 1 + (i >= 4 ? 1 : 0)) % str.length;
        return str.match(new RegExp(`^(.{${rotate}})(.*)$`)).slice(1).reverse().join('');
      }).filter((x, i) => x.indexOf(b) === i).pop();
    },
    rotate: (a, b) => str => {
      b = parseInt(b) % str.length;
      const regexp = a === 'left' ? `^(.{${b}})(.*)$` : `^(.*)(.{${b}})$`;
      return str.match(new RegExp(regexp)).slice(1).reverse().join('');
    },
    'reverse positions': (a, b) => str => {
      [a, b] = [parseInt(a), parseInt(b)].sort((a, b) => a - b);
      const arr = str.match(new RegExp(`^(.{${a}})(.)(.{${b - a - 1}})(.)(.*)$`)).slice(1);
      return [arr[0], arr[3], ...arr[2].split('').reverse(), arr[1], arr[4]].join('');
    },
    'move position': (a, b) => str => {
      const arr = str.split('');
      const moved = arr.splice(parseInt(a), 1).pop();
      arr.splice(parseInt(b), 0, moved);
      return arr.join('');
    }
  };
  return input.split('\n').map(x => fn(x.replace(/ (\d+) (steps?)$/, ' $2 $1').match(regexp).slice(1))).map(cmd => ops[cmd[0]](cmd[1], cmd[2]));
}

function undo(x) {
  switch (x[0]) {
    case 'rotate':
      return [x[0], x[1] === 'left' ? 'right' : 'left', x[2]];

    case 'move position':
      return [x[0], x[2], x[1]];

    case 'rotate based':
      return ['un rotate based', x[1], x[2]];

    default:
      return x;
  }
}

const part1 = (input, password = 'abcdefgh') => parse(input, x => x).reduce((x, f) => f(x), password);

exports.part1 = part1;

const part2 = (input, encoded = 'fbgdceah') => parse(input, undo).reverse().reduce((x, f) => f(x), encoded);

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTIxLmpzIl0sIm5hbWVzIjpbInBhcnNlIiwiaW5wdXQiLCJmbiIsInJlZ2V4cCIsIm9wcyIsImEiLCJiIiwic3RyIiwicGFyc2VJbnQiLCJzb3J0IiwiYXJyIiwibWF0Y2giLCJSZWdFeHAiLCJzbGljZSIsImpvaW4iLCJpbmRleE9mIiwibGVuZ3RoIiwicmV2ZXJzZSIsIkFycmF5IiwiZmlsbCIsIm1hcCIsIngiLCJpIiwicm90YXRlIiwiZmlsdGVyIiwicG9wIiwic3BsaXQiLCJtb3ZlZCIsInNwbGljZSIsInJlcGxhY2UiLCJjbWQiLCJ1bmRvIiwicGFydDEiLCJwYXNzd29yZCIsInJlZHVjZSIsImYiLCJwYXJ0MiIsImVuY29kZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFTQSxLQUFULENBQWVDLEtBQWYsRUFBc0JDLEVBQXRCLEVBQTBCO0FBQ3hCLFFBQU1DLE1BQU0sR0FBRywwR0FBZjtBQUNBLFFBQU1DLEdBQUcsR0FBRztBQUNWLHFCQUFpQixDQUFDQyxDQUFELEVBQUlDLENBQUosS0FBVUMsR0FBRyxJQUFJO0FBQ2hDLE9BQUNGLENBQUQsRUFBSUMsQ0FBSixJQUFTLENBQUNFLFFBQVEsQ0FBQ0gsQ0FBRCxDQUFULEVBQWNHLFFBQVEsQ0FBQ0YsQ0FBRCxDQUF0QixFQUEyQkcsSUFBM0IsQ0FBZ0MsQ0FBQ0osQ0FBRCxFQUFJQyxDQUFKLEtBQVVELENBQUMsR0FBR0MsQ0FBOUMsQ0FBVDtBQUNBLFlBQU1JLEdBQUcsR0FBR0gsR0FBRyxDQUNaSSxLQURTLENBQ0gsSUFBSUMsTUFBSixDQUFZLE9BQU1QLENBQUUsV0FBVUMsQ0FBQyxHQUFHRCxDQUFKLEdBQVEsQ0FBRSxZQUF4QyxDQURHLEVBRVRRLEtBRlMsQ0FFSCxDQUZHLENBQVo7QUFHQSxhQUFPLENBQUNILEdBQUcsQ0FBQyxDQUFELENBQUosRUFBU0EsR0FBRyxDQUFDLENBQUQsQ0FBWixFQUFpQkEsR0FBRyxDQUFDLENBQUQsQ0FBcEIsRUFBeUJBLEdBQUcsQ0FBQyxD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b0IsQ0FBQyxJQUFJQSxDQUFiLENBQUwsQ0FBcUJhLE1BQXJCLENBQTRCLENBQUNiLENBQUQsRUFBSWMsQ0FBSixLQUFVQSxDQUFDLENBQUNkLENBQUQsQ0FBdkMsRUFBNENZLFFBQTVDLENBREs7Ozs7QUFFQSxNQUFNRyxLQUFLLEdBQUcsQ0FBQ25DLEtBQUQsRUFBUW9DLE9BQU8sR0FBRyxVQUFsQixLQUNuQnJDLEtBQUssQ0FBQ0MsS0FBRCxFQUFROEIsSUFBUixDQUFMLENBQ0dkLE9BREgsR0FFR2lCLE1BRkgsQ0FFVSxDQUFDYixDQUFELEVBQUljLENBQUosS0FBVUEsQ0FBQyxDQUFDZCxDQUFELENBRnJCLEVBRTBCZ0IsT0FGMUIsQ0FESyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHBhcnNlKGlucHV0LCBmbikge1xuICBjb25zdCByZWdleHAgPSAvXihzd2FwIHBvc2l0aW9ufHN3YXAgbGV0dGVyfHJvdGF0ZSBiYXNlZHxyb3RhdGV8cmV2ZXJzZSBwb3NpdGlvbnN8bW92ZSBwb3NpdGlvbikgKFteXFxzXSspXFxzLipcXHMoW15cXHNdKykkLztcbiAgY29uc3Qgb3BzID0ge1xuICAgICdzd2FwIHBvc2l0aW9uJzogKGEsIGIpID0+IHN0ciA9PiB7XG4gICAgICBbYSwgYl0gPSBbcGFyc2VJbnQoYSksIHBhcnNlSW50KGIpXS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgICBjb25zdCBhcnIgPSBzdHJcbiAgICAgICAgLm1hdGNoKG5ldyBSZWdFeHAoYF4oLnske2F9fSkoLikoLnske2IgLSBhIC0gMX19KSguKSguKikkYCkpXG4gICAgICAgIC5zbGljZSgxKTtcbiAgICAgIHJldHVybiBbYXJyWzBdLCBhcnJbM10sIGFyclsyXSwgYXJyWzFdLCBhcnJbNF1dLmpvaW4oJycpO1xuICAgIH0sXG4gICAgJ3N3YXAgbGV0dGVyJzogKGEsIGIpID0+IHN0ciA9PiB7XG4gICAgICBbYSwgYl0gPSBbc3RyLmluZGV4T2YoYSksIHN0ci5pbmRleE9mKGIpXS5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgICBjb25zdCBhcnIgPSBzdHJcbiAgICAgICAgLm1hdGNoKG5ldyBSZWdFeHAoYF4oLnske2F9fSkoLikoLnske2IgLSBhIC0gMX19KSguKSguKikkYCkpXG4gICAgICAgIC5zbGljZSgxKTtcbiAgICAgIHJldHVybiBbYXJyWzBdLCBhcnJbM10sIGFyclsyXSwgYXJyWzFdLCBhcnJbNF1dLmpvaW4oJycpO1xuICAgIH0sXG4gICAgJ3JvdGF0ZSBiYXNlZCc6IChhLCBiKSA9PiBzdHIgPT4ge1xuICAgICAgYiA9IChzdHIuaW5kZXhPZihiKSArIDEgKyAoc3RyLmluZGV4T2YoYikgPj0gNCA/IDEgOiAwKSkgJSBzdHIubGVuZ3RoO1xuICAgICAgcmV0dXJuIHN0clxuICAgICAgICAubWF0Y2gobmV3IFJlZ0V4cChgXiguKikoLnske2J9fSkkYCkpXG4gICAgICAgIC5zbGljZSgxKVxuICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgIC5qb2luKCcnKTtcbiAgICB9LFxuICAgICd1biByb3RhdGUgYmFzZWQnOiAoYSwgYikgPT4gc3RyID0+IHtcbiAgICAgIHJldHVybiBuZXcgQXJyYXkoc3RyLmxlbmd0aClcbiAgICAgICAgLmZpbGwoKVxuICAgICAgICAubWFwKCh4LCBpKSA9PiB7XG4gICAgICAgICAgY29uc3Qgcm90YXRlID0gKGkgKyAxICsgKGkgPj0gNCA/IDEgOiAwKSkgJSBzdHIubGVuZ3RoO1xuICAgICAgICAgIHJldHVybiBzdHJcbiAgICAgICAgICAgIC5tYXRjaChuZXcgUmVnRXhwKGBeKC57JHtyb3RhdGV9fSkoLiopJGApKVxuICAgICAgICAgICAgLnNsaWNlKDEpXG4gICAgICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgICAgICAuam9pbignJyk7XG4gICAgICAgIH0pXG4gICAgICAgIC5maWx0ZXIoKHgsIGkpID0+IHguaW5kZXhPZihiKSA9PT0gaSlcbiAgICAgICAgLnBvcCgpO1xuICAgIH0sXG4gICAgcm90YXRlOiAoYSwgYikgPT4gc3RyID0+IHtcbiAgICAgIGIgPSBwYXJzZUludChiKSAlIHN0ci5sZW5ndGg7XG4gICAgICBjb25zdCByZWdleHAgPSBhID09PSAnbGVmdCcgPyBgXigueyR7Yn19KSguKikkYCA6IGBeKC4qKSgueyR7Yn19KSRgO1xuICAgICAgcmV0dXJuIHN0clxuICAgICAgICAubWF0Y2gobmV3IFJlZ0V4cChyZWdleHApKVxuICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAuam9pbignJyk7XG4gICAgfSxcbiAgICAncmV2ZXJzZSBwb3NpdGlvbnMnOiAoYSwgYikgPT4gc3RyID0+IHtcbiAgICAgIFthLCBiXSA9IFtwYXJzZUludChhKSwgcGFyc2VJbnQoYildLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICAgIGNvbnN0IGFyciA9IHN0clxuICAgICAgICAubWF0Y2gobmV3IFJlZ0V4cChgXigueyR7YX19KSguKSgueyR7YiAtIGEgLSAxfX0pKC4pKC4qKSRgKSlcbiAgICAgICAgLnNsaWNlKDEpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgYXJyWzBdLFxuICAgICAgICBhcnJbM10sXG4gICAgICAgIC4uLmFyclsyXS5zcGxpdCgnJykucmV2ZXJzZSgpLFxuICAgICAgICBhcnJbMV0sXG4gICAgICAgIGFycls0XSxcbiAgICAgIF0uam9pbignJyk7XG4gICAgfSxcbiAgICAnbW92ZSBwb3NpdGlvbic6IChhLCBiKSA9PiBzdHIgPT4ge1xuICAgICAgY29uc3QgYXJyID0gc3RyLnNwbGl0KCcnKTtcbiAgICAgIGNvbnN0IG1vdmVkID0gYXJyLnNwbGljZShwYXJzZUludChhKSwgMSkucG9wKCk7XG4gICAgICBhcnIuc3BsaWNlKHBhcnNlSW50KGIpLCAwLCBtb3ZlZCk7XG4gICAgICByZXR1cm4gYXJyLmpvaW4oJycpO1xuICAgIH0sXG4gIH07XG4gIHJldHVybiBpbnB1dFxuICAgIC5zcGxpdCgnXFxuJylcbiAgICAubWFwKHggPT5cbiAgICAgIGZuKFxuICAgICAgICB4XG4gICAgICAgICAgLnJlcGxhY2UoLyAoXFxkKykgKHN0ZXBzPykkLywgJyAkMiAkMScpXG4gICAgICAgICAgLm1hdGNoKHJlZ2V4cClcbiAgICAgICAgICAuc2xpY2UoMSksXG4gICAgICApLFxuICAgIClcbiAgICAubWFwKGNtZCA9PiBvcHNbY21kWzBdXShjbWRbMV0sIGNtZFsyXSkpO1xufVxuXG5mdW5jdGlvbiB1bmRvKHgpIHtcbiAgc3dpdGNoICh4WzBdKSB7XG4gICAgY2FzZSAncm90YXRlJzpcbiAgICAgIHJldHVybiBbeFswXSwgeFsxXSA9PT0gJ2xlZnQnID8gJ3JpZ2h0JyA6ICdsZWZ0JywgeFsyXV07XG4gICAgY2FzZSAnbW92ZSBwb3NpdGlvbic6XG4gICAgICByZXR1cm4gW3hbMF0sIHhbMl0sIHhbMV1dO1xuICAgIGNhc2UgJ3JvdGF0ZSBiYXNlZCc6XG4gICAgICByZXR1cm4gWyd1biByb3RhdGUgYmFzZWQnLCB4WzFdLCB4WzJdXTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHg7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHBhcnQxID0gKGlucHV0LCBwYXNzd29yZCA9ICdhYmNkZWZnaCcpID0+XG4gIHBhcnNlKGlucHV0LCB4ID0+IHgpLnJlZHVjZSgoeCwgZikgPT4gZih4KSwgcGFzc3dvcmQpO1xuZXhwb3J0IGNvbnN0IHBhcnQyID0gKGlucHV0LCBlbmNvZGVkID0gJ2ZiZ2RjZWFoJykgPT5cbiAgcGFyc2UoaW5wdXQsIHVuZG8pXG4gICAgLnJldmVyc2UoKVxuICAgIC5yZWR1Y2UoKHgsIGYpID0+IGYoeCksIGVuY29kZWQpO1xuIl19