{"version":3,"sources":["day09.js"],"names":["parse","score","level","removed","mode","next","replace","process","input","split","reduce","part1","part2"],"mappings":";;;;;;;AAAA,SAASA,KAAT,CAAe;AAAEC,EAAAA,KAAF;AAASC,EAAAA,KAAT;AAAgBC,EAAAA,OAAhB;AAAyBC,EAAAA;AAAzB,CAAf,EAAgDC,IAAhD,EAAsD;AACpD,MAAID,IAAI,KAAK,MAAb,EAAqB;AACnB,YAAQC,IAAR;AACE,WAAK,GAAL;AACE,eAAO;AAAEH,UAAAA,KAAK,EAAEA,KAAK,GAAG,CAAjB;AAAoBD,UAAAA,KAAK,EAAEA,KAAK,GAAGC,KAAR,GAAgB,CAA3C;AAA8CC,UAAAA,OAA9C;AAAuDC,UAAAA;AAAvD,SAAP;;AACF,WAAK,GAAL;AACE,eAAO;AAAEF,UAAAA,KAAK,EAAEA,KAAK,GAAG,CAAjB;AAAoBD,UAAAA,KAApB;AAA2BE,UAAAA,OAA3B;AAAoCC,UAAAA;AAApC,SAAP;;AACF,WAAK,GAAL;AACE,eAAO;AAAEF,UAAAA,KAAF;AAASD,UAAAA,KAAT;AAAgBE,UAAAA,OAAhB;AAAyBC,UAAAA,IAAI,EAAE;AAA/B,SAAP;;AACF,WAAK,GAAL;AACE,eAAO;AAAEF,UAAAA,KAAF;AAASD,UAAAA,KAAT;AAAgBE,UAAAA,OAAhB;AAAyBC,UAAAA,IAAI,EAAE;AAA/B,SAAP;;AACF;AACE,eAAO;AAAEF,UAAAA,KAAF;AAASD,UAAAA,KAAT;AAAgBE,UAAAA,OAAhB;AAAyBC,UAAAA;AAAzB,SAAP;AAVJ;AAYD,GAbD,MAaO,IAAIA,IAAI,KAAK,SAAb,EAAwB;AAC7B,YAAQC,IAAR;AACE,WAAK,GAAL;AACE,eAAO;AAAEH,UAAAA,KAAF;AAASD,UAAAA,KAAT;AAAgBE,UAAAA,OAAhB;AAAyBC,UAAAA,IAAI,EAAE;AAA/B,SAAP;;AACF,WAAK,GAAL;AACE,eAAO;AAAEF,UAAAA,KAAF;AAASD,UAAAA,KAAT;AAAgBE,UAAAA,OAAhB;AAAyBC,UAAAA,IAAI,EAAE;AAA/B,SAAP;;AACF;AACE,eAAO;AAAEF,UAAAA,KAAF;AAASD,UAAAA,KAAT;AAAgBE,UAAAA,OAAO,EAAEA,OAAO,GAAG,CAAnC;AAAsCC,UAAAA;AAAtC,SAAP;AANJ;AAQD,GATM,MASA;AACL,WAAO;AAAEF,MAAAA,KAAF;AAASD,MAAAA,KAAT;AAAgBE,MAAAA,OAAhB;AAAyBC,MAAAA,IAAI,EAAEA,IAAI,CAACE,OAAL,CAAa,SAAb,EAAwB,EAAxB;AAA/B,KAAP;AACD;AACF;;AAED,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,SAAOA,KAAK,CACTC,KADI,CACE,EADF,EAEJC,MAFI,CAEGV,KAFH,EAEU;AAAEC,IAAAA,KAAK,EAAE,CAAT;AAAYC,IAAAA,KAAK,EAAE,CAAnB;AAAsBC,IAAAA,OAAO,EAAE,CAA/B;AAAkCC,IAAAA,IAAI,EAAE;AAAxC,GAFV,CAAP;AAGD;;AAEM,MAAMO,KAAK,GAAGH,KAAK,IAAID,OAAO,CAACC,KAAD,CAAP,CAAeP,KAAtC;;;;AACA,MAAMW,KAAK,GAAGJ,KAAK,IAAID,OAAO,CAACC,KAAD,CAAP,CAAeL,OAAtC","sourcesContent":["function parse({ score, level, removed, mode }, next) {\n  if (mode === 'read') {\n    switch (next) {\n      case '{':\n        return { level: level + 1, score: score + level + 1, removed, mode };\n      case '}':\n        return { level: level - 1, score, removed, mode };\n      case '<':\n        return { level, score, removed, mode: 'garbage' };\n      case '!':\n        return { level, score, removed, mode: 'ignore-read' };\n      default:\n        return { level, score, removed, mode };\n    }\n  } else if (mode === 'garbage') {\n    switch (next) {\n      case '>':\n        return { level, score, removed, mode: 'read' };\n      case '!':\n        return { level, score, removed, mode: 'ignore-garbage' };\n      default:\n        return { level, score, removed: removed + 1, mode };\n    }\n  } else {\n    return { level, score, removed, mode: mode.replace('ignore-', '') };\n  }\n}\n\nfunction process(input) {\n  return input\n    .split('')\n    .reduce(parse, { score: 0, level: 0, removed: 0, mode: 'read' });\n}\n\nexport const part1 = input => process(input).score;\nexport const part2 = input => process(input).removed;\n"]}