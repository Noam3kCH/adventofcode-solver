{"version":3,"sources":["day24.js"],"names":["f","boxes","total","part","rest","all","sub","filter","x","indexOf","product","reduce","p","i","length","options","Combinatorics","combination","a","s","good","sort","b","find","solve","input","split","map","parseInt","sum","part1","part2"],"mappings":";;;;;;;AAAA;;;;AAEA,SAASA,CAAT,CAAWC,KAAX,EAAkBC,KAAlB,EAAyBC,IAAzB,EAA+B;AAC7B,QAAMC,IAAI,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAcD,GAAG,CAACE,MAAJ,CAAWC,CAAC,IAAIF,GAAG,CAACG,OAAJ,CAAYD,CAAZ,MAAmB,CAAC,CAApC,CAA3B;;AACA,QAAME,OAAO,GAAGF,CAAC,IAAIA,CAAC,CAACG,MAAF,CAAS,CAACC,CAAD,EAAIJ,CAAJ,KAAUI,CAAC,GAAGJ,CAAvB,CAArB;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIZ,KAAK,CAACa,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAME,OAAO,GAAGC,yBAAcC,WAAd,CAA0BhB,KAA1B,EAAiCY,CAAjC,EAAoCN,MAApC,CACdW,CAAC,IAAIA,CAAC,CAACP,MAAF,CAAS,CAACQ,CAAD,EAAIX,CAAJ,KAAUW,CAAC,GAAGX,CAAvB,MAA8BN,KADrB,CAAhB;;AAGA,QAAIa,OAAO,CAACD,MAAZ,EAAoB;AAClB,UAAIX,IAAI,KAAK,CAAb,EAAgB;AACd,eAAO,IAAP;AACD,OAFD,MAEO;AACL,cAAMiB,IAAI,GAAGL,OAAO,CACjBM,IADU,CACL,CAACH,CAAD,EAAII,CAAJ,KAAUZ,OAAO,CAACQ,CAAD,CAAP,GAAaR,OAAO,CAACY,CAAD,CADzB,EAEVC,IAFU,CAELf,CAAC,IAAIR,CAAC,CAACI,IAAI,CAACH,KAAD,EAAQO,CAAR,CAAL,EAAiBN,KAAjB,EAAwBC,IAAI,GAAG,CAA/B,CAFD,CAAb;AAGA,eAAOO,OAAO,CAACU,IAAD,CAAd;AACD;AACF;AACF;AACF;;AAED,SAASI,KAAT,CAAeC,KAAf,EAAsBjB,CAAtB,EAAyB;AACvB,QAAMP,KAAK,GAAGwB,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBC,GAAlB,CAAsBnB,CAAC,IAAIoB,QAAQ,CAACpB,CAAD,CAAnC,CAAd;AACA,QAAMN,KAAK,GAAGD,KAAK,CAACU,MAAN,CAAa,CAACkB,GAAD,EAAMrB,CAAN,KAAYqB,GAAG,GAAGrB,CAA/B,CAAd;AACA,SAAOR,CAAC,CAACC,KAAD,EAAQC,KAAK,GAAGM,CAAhB,EAAmBA,CAAnB,CAAR;AACD;;AAEM,MAAMsB,KAAK,GAAGL,KAAK,IAAID,KAAK,CAACC,KAAD,EAAQ,CAAR,CAA5B;;;;AACA,MAAMM,KAAK,GAAGN,KAAK,IAAID,KAAK,CAACC,KAAD,EAAQ,CAAR,CAA5B","sourcesContent":["import Combinatorics from 'js-combinatorics';\n\nfunction f(boxes, total, part) {\n  const rest = (all, sub) => all.filter(x => sub.indexOf(x) === -1);\n  const product = x => x.reduce((p, x) => p * x);\n\n  for (let i = 1; i <= boxes.length; i++) {\n    const options = Combinatorics.combination(boxes, i).filter(\n      a => a.reduce((s, x) => s + x) === total,\n    );\n    if (options.length) {\n      if (part === 1) {\n        return true;\n      } else {\n        const good = options\n          .sort((a, b) => product(a) - product(b))\n          .find(x => f(rest(boxes, x), total, part - 1));\n        return product(good);\n      }\n    }\n  }\n}\n\nfunction solve(input, x) {\n  const boxes = input.split('\\n').map(x => parseInt(x));\n  const total = boxes.reduce((sum, x) => sum + x);\n  return f(boxes, total / x, x);\n}\n\nexport const part1 = input => solve(input, 3);\nexport const part2 = input => solve(input, 4);\n"]}