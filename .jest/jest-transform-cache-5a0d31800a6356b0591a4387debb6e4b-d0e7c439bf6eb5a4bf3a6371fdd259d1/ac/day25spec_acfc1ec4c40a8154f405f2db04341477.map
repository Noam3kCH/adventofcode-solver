{"version":3,"sources":["day25.spec.js"],"names":["input","url","describe","it","expect","join","toEqual","undefined"],"mappings":";;AAAA;;AACA;;;;;;;AAEA,MAAMA,KAAK,GAAG,wBAAU,KAAYC,GAAtB,CAAd;AAEAC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BA,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CACJ,gBACE,CACE,mBADF,EAEE,8CAFF,EAGE,EAHF,EAIE,aAJF,EAKE,8BALF,EAME,0BANF,EAOE,mCAPF,EAQE,8BARF,EASE,8BATF,EAUE,0BAVF,EAWE,kCAXF,EAYE,8BAZF,EAaE,EAbF,EAcE,aAdF,EAeE,8BAfF,EAgBE,0BAhBF,EAiBE,kCAjBF,EAkBE,8BAlBF,EAmBE,8BAnBF,EAoBE,0BApBF,EAqBE,mCArBF,EAsBE,8BAtBF,EAuBEC,IAvBF,CAuBO,IAvBP,CADF,CADI,CAAN,CA2BEC,OA3BF,CA2BU,CA3BV;AA4BD,KA7BC,CAAF;AA+BAH,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBM,OAArB,CAA6B,IAA7B;AACD,KAFC,CAAF;AAGD,GAnCO,CAAR;AAqCAJ,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBM,OAArB,CAA6BC,SAA7B;AACD,KAFC,CAAF;AAGD,GAJO,CAAR;AAKD,CA3CO,CAAR","sourcesContent":["import { part1, part2 } from './day25.js';\nimport readInput from '../utils/read-input';\n\nconst input = readInput(import.meta.url);\n\ndescribe('day25 2017', () => {\n  describe('part1', () => {\n    it('should work for part 1 examples', () => {\n      expect(\n        part1(\n          [\n            'Begin in state A.',\n            'Perform a diagnostic checksum after 6 steps.',\n            '',\n            'In state A:',\n            '  If the current value is 0:',\n            '    - Write the value 1.',\n            '    - Move one slot to the right.',\n            '    - Continue with state B.',\n            '  If the current value is 1:',\n            '    - Write the value 0.',\n            '    - Move one slot to the left.',\n            '    - Continue with state B.',\n            '',\n            'In state B:',\n            '  If the current value is 0:',\n            '    - Write the value 1.',\n            '    - Move one slot to the left.',\n            '    - Continue with state A.',\n            '  If the current value is 1:',\n            '    - Write the value 1.',\n            '    - Move one slot to the right.',\n            '    - Continue with state A.',\n          ].join('\\n'),\n        ),\n      ).toEqual(3);\n    });\n\n    it('should work for part 1 input', () => {\n      expect(part1(input)).toEqual(4225);\n    });\n  });\n\n  describe('part2', () => {\n    it('should work for part 2 input', () => {\n      expect(part2(input)).toEqual(undefined);\n    });\n  });\n});\n"]}