07fa65aecdcdcfbe54b1eee47c7523f0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;
const abc = ' ABCDEFGHIJKLMNOPQRSTUVWXYZ';

function next(prerequisites, done) {
  const options = [];

  for (const [step, prerequisite] of prerequisites) {
    if (!done.includes(step) && prerequisite.every(x => done.includes(x))) {
      options.push(step);
    }
  }

  done.push(options.sort().shift());
}

function next2(prerequisites, done, pending, workers, base) {
  let now = 0;

  if (pending.length) {
    done.push(pending.sort((a, b) => a.time - b.time).shift());
    now = done[done.length - 1].time;
  }

  let options = [];

  for (const [step, prerequisite] of prerequisites) {
    if (!done.find(x => x.step === step) && !pending.find(x => x.step === step) && prerequisite.every(step => done.find(x => x.step === step))) {
      options.push(step);
    }
  }

  options = options.sort().map(x => ({
    step: x,
    time: now + base + abc.indexOf(x)
  }));

  while (pending.length < workers && options.length) {
    pending.push(options.shift());
  }
}

function parse(input) {
  const prerequisites = new Map();
  input.split('\n').map(x => x.match(/([A-Z]) must be finished before step ([A-Z])/)).forEach(([, required, step]) => {
    prerequisites.set(step, (prerequisites.get(step) || []).concat(required));
    prerequisites.set(required, prerequisites.get(required) || []);
  });
  return prerequisites;
}

function part1(input) {
  const done = [];
  const prerequisites = parse(input);
  const steps = Array.from(prerequisites.keys()).length;

  while (done.length < steps) {
    next(prerequisites, done);
  }

  return done.join('');
}

function part2(input, workers = 5, base = 60) {
  const done = [];
  const pending = [];
  const prerequisites = parse(input);
  const steps = Array.from(prerequisites.keys()).length;

  while (done.length < steps) {
    next2(prerequisites, done, pending, workers, base);
  }

  return done.pop().time;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTA3LmpzIl0sIm5hbWVzIjpbImFiYyIsIm5leHQiLCJwcmVyZXF1aXNpdGVzIiwiZG9uZSIsIm9wdGlvbnMiLCJzdGVwIiwicHJlcmVxdWlzaXRlIiwiaW5jbHVkZXMiLCJldmVyeSIsIngiLCJwdXNoIiwic29ydCIsInNoaWZ0IiwibmV4dDIiLCJwZW5kaW5nIiwid29ya2VycyIsImJhc2UiLCJub3ciLCJsZW5ndGgiLCJhIiwiYiIsInRpbWUiLCJmaW5kIiwibWFwIiwiaW5kZXhPZiIsInBhcnNlIiwiaW5wdXQiLCJNYXAiLCJzcGxpdCIsIm1hdGNoIiwiZm9yRWFjaCIsInJlcXVpcmVkIiwic2V0IiwiZ2V0IiwiY29uY2F0IiwicGFydDEiLCJzdGVwcyIsIkFycmF5IiwiZnJvbSIsImtleXMiLCJqb2luIiwicGFydDIiLCJwb3AiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxNQUFNQSxHQUFHLEdBQUcsNkJBQVo7O0FBRUEsU0FBU0MsSUFBVCxDQUFjQyxhQUFkLEVBQTZCQyxJQUE3QixFQUFtQztBQUNqQyxRQUFNQyxPQUFPLEdBQUcsRUFBaEI7O0FBQ0EsT0FBSyxNQUFNLENBQUNDLElBQUQsRUFBT0MsWUFBUCxDQUFYLElBQW1DSixhQUFuQyxFQUFrRDtBQUNoRCxRQUFJLENBQUNDLElBQUksQ0FBQ0ksUUFBTCxDQUFjRixJQUFkLENBQUQsSUFBd0JDLFlBQVksQ0FBQ0UsS0FBYixDQUFtQkMsQ0FBQyxJQUFJTixJQUFJLENBQUNJLFFBQUwsQ0FBY0UsQ0FBZCxDQUF4QixDQUE1QixFQUF1RTtBQUNyRUwsTUFBQUEsT0FBTyxDQUFDTSxJQUFSLENBQWFMLElBQWI7QUFDRDtBQUNGOztBQUNERixFQUFBQSxJQUFJLENBQUNPLElBQUwsQ0FBVU4sT0FBTyxDQUFDTyxJQUFSLEdBQWVDLEtBQWYsRUFBVjtBQUNEOztBQUVELFNBQVNDLEtBQVQsQ0FBZVgsYUFBZixFQUE4QkMsSUFBOUIsRUFBb0NXLE9BQXBDLEVBQTZDQyxPQUE3QyxFQUFzREMs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LElBQWhCLENBQUo7QUFDRDs7QUFDRCxTQUFPQSxJQUFJLENBQUNxQyxJQUFMLENBQVUsRUFBVixDQUFQO0FBQ0Q7O0FBRU0sU0FBU0MsS0FBVCxDQUFlZixLQUFmLEVBQXNCWCxPQUFPLEdBQUcsQ0FBaEMsRUFBbUNDLElBQUksR0FBRyxFQUExQyxFQUE4QztBQUNuRCxRQUFNYixJQUFJLEdBQUcsRUFBYjtBQUNBLFFBQU1XLE9BQU8sR0FBRyxFQUFoQjtBQUNBLFFBQU1aLGFBQWEsR0FBR3VCLEtBQUssQ0FBQ0MsS0FBRCxDQUEzQjtBQUNBLFFBQU1VLEtBQUssR0FBR0MsS0FBSyxDQUFDQyxJQUFOLENBQVdwQyxhQUFhLENBQUNxQyxJQUFkLEVBQVgsRUFBaUNyQixNQUEvQzs7QUFDQSxTQUFPZixJQUFJLENBQUNlLE1BQUwsR0FBY2tCLEtBQXJCLEVBQTRCO0FBQzFCdkIsSUFBQUEsS0FBSyxDQUFDWCxhQUFELEVBQWdCQyxJQUFoQixFQUFzQlcsT0FBdEIsRUFBK0JDLE9BQS9CLEVBQXdDQyxJQUF4QyxDQUFMO0FBQ0Q7O0FBQ0QsU0FBT2IsSUFBSSxDQUFDdUMsR0FBTCxHQUFXckIsSUFBbEI7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGFiYyA9ICcgQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVonO1xuXG5mdW5jdGlvbiBuZXh0KHByZXJlcXVpc2l0ZXMsIGRvbmUpIHtcbiAgY29uc3Qgb3B0aW9ucyA9IFtdO1xuICBmb3IgKGNvbnN0IFtzdGVwLCBwcmVyZXF1aXNpdGVdIG9mIHByZXJlcXVpc2l0ZXMpIHtcbiAgICBpZiAoIWRvbmUuaW5jbHVkZXMoc3RlcCkgJiYgcHJlcmVxdWlzaXRlLmV2ZXJ5KHggPT4gZG9uZS5pbmNsdWRlcyh4KSkpIHtcbiAgICAgIG9wdGlvbnMucHVzaChzdGVwKTtcbiAgICB9XG4gIH1cbiAgZG9uZS5wdXNoKG9wdGlvbnMuc29ydCgpLnNoaWZ0KCkpO1xufVxuXG5mdW5jdGlvbiBuZXh0MihwcmVyZXF1aXNpdGVzLCBkb25lLCBwZW5kaW5nLCB3b3JrZXJzLCBiYXNlKSB7XG4gIGxldCBub3cgPSAwO1xuICBpZiAocGVuZGluZy5sZW5ndGgpIHtcbiAgICBkb25lLnB1c2gocGVuZGluZy5zb3J0KChhLCBiKSA9PiBhLnRpbWUgLSBiLnRpbWUpLnNoaWZ0KCkpO1xuICAgIG5vdyA9IGRvbmVbZG9uZS5sZW5ndGggLSAxXS50aW1lO1xuICB9XG5cbiAgbGV0IG9wdGlvbnMgPSBbXTtcbiAgZm9yIChjb25zdCBbc3RlcCwgcHJlcmVxdWlzaXRlXSBvZiBwcmVyZXF1aXNpdGVzKSB7XG4gICAgaWYgKFxuICAgICAgIWRvbmUuZmluZCh4ID0+IHguc3RlcCA9PT0gc3RlcCkgJiZcbiAgICAgICFwZW5kaW5nLmZpbmQoeCA9PiB4LnN0ZXAgPT09IHN0ZXApICYmXG4gICAgICBwcmVyZXF1aXNpdGUuZXZlcnkoc3RlcCA9PiBkb25lLmZpbmQoeCA9PiB4LnN0ZXAgPT09IHN0ZXApKVxuICAgICkge1xuICAgICAgb3B0aW9ucy5wdXNoKHN0ZXApO1xuICAgIH1cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zXG4gICAgLnNvcnQoKVxuICAgIC5tYXAoeCA9PiAoeyBzdGVwOiB4LCB0aW1lOiBub3cgKyBiYXNlICsgYWJjLmluZGV4T2YoeCkgfSkpO1xuICB3aGlsZSAocGVuZGluZy5sZW5ndGggPCB3b3JrZXJzICYmIG9wdGlvbnMubGVuZ3RoKSB7XG4gICAgcGVuZGluZy5wdXNoKG9wdGlvbnMuc2hpZnQoKSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgY29uc3QgcHJlcmVxdWlzaXRlcyA9IG5ldyBNYXAoKTtcbiAgaW5wdXRcbiAgICAuc3BsaXQoJ1xcbicpXG4gICAgLm1hcCh4ID0+IHgubWF0Y2goLyhbQS1aXSkgbXVzdCBiZSBmaW5pc2hlZCBiZWZvcmUgc3RlcCAoW0EtWl0pLykpXG4gICAgLmZvckVhY2goKFssIHJlcXVpcmVkLCBzdGVwXSkgPT4ge1xuICAgICAgcHJlcmVxdWlzaXRlcy5zZXQoc3RlcCwgKHByZXJlcXVpc2l0ZXMuZ2V0KHN0ZXApIHx8IFtdKS5jb25jYXQocmVxdWlyZWQpKTtcbiAgICAgIHByZXJlcXVpc2l0ZXMuc2V0KHJlcXVpcmVkLCBwcmVyZXF1aXNpdGVzLmdldChyZXF1aXJlZCkgfHwgW10pO1xuICAgIH0pO1xuICByZXR1cm4gcHJlcmVxdWlzaXRlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnQxKGlucHV0KSB7XG4gIGNvbnN0IGRvbmUgPSBbXTtcbiAgY29uc3QgcHJlcmVxdWlzaXRlcyA9IHBhcnNlKGlucHV0KTtcbiAgY29uc3Qgc3RlcHMgPSBBcnJheS5mcm9tKHByZXJlcXVpc2l0ZXMua2V5cygpKS5sZW5ndGg7XG4gIHdoaWxlIChkb25lLmxlbmd0aCA8IHN0ZXBzKSB7XG4gICAgbmV4dChwcmVyZXF1aXNpdGVzLCBkb25lKTtcbiAgfVxuICByZXR1cm4gZG9uZS5qb2luKCcnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnQyKGlucHV0LCB3b3JrZXJzID0gNSwgYmFzZSA9IDYwKSB7XG4gIGNvbnN0IGRvbmUgPSBbXTtcbiAgY29uc3QgcGVuZGluZyA9IFtdO1xuICBjb25zdCBwcmVyZXF1aXNpdGVzID0gcGFyc2UoaW5wdXQpO1xuICBjb25zdCBzdGVwcyA9IEFycmF5LmZyb20ocHJlcmVxdWlzaXRlcy5rZXlzKCkpLmxlbmd0aDtcbiAgd2hpbGUgKGRvbmUubGVuZ3RoIDwgc3RlcHMpIHtcbiAgICBuZXh0MihwcmVyZXF1aXNpdGVzLCBkb25lLCBwZW5kaW5nLCB3b3JrZXJzLCBiYXNlKTtcbiAgfVxuICByZXR1cm4gZG9uZS5wb3AoKS50aW1lO1xufVxuIl19