{"version":3,"sources":["day01.spec.js"],"names":["input","url","describe","it","expect","split","join","toEqual"],"mappings":";;AAAA;;AACA;;;;;;;AAEA,MAAMA,KAAK,GAAG,wBAAU,KAAYC,GAAtB,CAAd;AAEAC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BA,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CAAC,gBAAM,aAAaC,KAAb,CAAmB,IAAnB,EAAyBC,IAAzB,CAA8B,IAA9B,CAAN,CAAD,CAAN,CAAmDC,OAAnD,CAA2D,CAA3D;AACAH,MAAAA,MAAM,CAAC,gBAAM,aAAaC,KAAb,CAAmB,IAAnB,EAAyBC,IAAzB,CAA8B,IAA9B,CAAN,CAAD,CAAN,CAAmDC,OAAnD,CAA2D,CAA3D;AACAH,MAAAA,MAAM,CAAC,gBAAM,aAAaC,KAAb,CAAmB,IAAnB,EAAyBC,IAAzB,CAA8B,IAA9B,CAAN,CAAD,CAAN,CAAmDC,OAAnD,CAA2D,CAAC,CAA5D;AACD,KAJC,CAAF;AAMAJ,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBO,OAArB,CAA6B,GAA7B;AACD,KAFC,CAAF;AAGD,GAVO,CAAR;AAYAL,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CAAC,gBAAM,SAASC,KAAT,CAAe,IAAf,EAAqBC,IAArB,CAA0B,IAA1B,CAAN,CAAD,CAAN,CAA+CC,OAA/C,CAAuD,CAAvD;AACAH,MAAAA,MAAM,CAAC,gBAAM,qBAAqBC,KAArB,CAA2B,IAA3B,EAAiCC,IAAjC,CAAsC,IAAtC,CAAN,CAAD,CAAN,CAA2DC,OAA3D,CAAmE,EAAnE;AACAH,MAAAA,MAAM,CAAC,gBAAM,qBAAqBC,KAArB,CAA2B,IAA3B,EAAiCC,IAAjC,CAAsC,IAAtC,CAAN,CAAD,CAAN,CAA2DC,OAA3D,CAAmE,CAAnE;AACAH,MAAAA,MAAM,CAAC,gBAAM,qBAAqBC,KAArB,CAA2B,IAA3B,EAAiCC,IAAjC,CAAsC,IAAtC,CAAN,CAAD,CAAN,CAA2DC,OAA3D,CAAmE,EAAnE;AACD,KALC,CAAF;AAOAJ,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBO,OAArB,CAA6B,KAA7B;AACD,KAFC,CAAF;AAGD,GAXO,CAAR;AAYD,CAzBO,CAAR","sourcesContent":["import { part1, part2 } from './day01.js';\nimport readInput from '../utils/read-input';\n\nconst input = readInput(import.meta.url);\n\ndescribe('day01 2018', () => {\n  describe('part1', () => {\n    it('should work for part 1 examples', () => {\n      expect(part1('+1, +1, +1'.split(', ').join('\\n'))).toEqual(3);\n      expect(part1('+1, +1, -2'.split(', ').join('\\n'))).toEqual(0);\n      expect(part1('-1, -2, -3'.split(', ').join('\\n'))).toEqual(-6);\n    });\n\n    it('should work for part 1 input', () => {\n      expect(part1(input)).toEqual(531);\n    });\n  });\n\n  describe('part2', () => {\n    it('should work for part 2 examples', () => {\n      expect(part2('+1, -1'.split(', ').join('\\n'))).toEqual(0);\n      expect(part2('+3, +3, +4, -2, -4'.split(', ').join('\\n'))).toEqual(10);\n      expect(part2('-6, +3, +8, +5, -6'.split(', ').join('\\n'))).toEqual(5);\n      expect(part2('+7, +7, -2, -7, -4'.split(', ').join('\\n'))).toEqual(14);\n    });\n\n    it('should work for part 2 input', () => {\n      expect(part2(input)).toEqual(76787);\n    });\n  });\n});\n"]}