dbd42cac77dec734870a808bdd59cdf0
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = void 0;

function distance(a, b) {
  return a.reduce((sum, x, i) => sum + Math.abs(x - b[i]), 0);
}

function part1(input) {
  let constellations = 0;
  const lines = input.split('\n');
  const points = lines.map(line => line.split(',').map(x => parseInt(x)));
  points.forEach(p => {
    p.near = points.filter(q => distance(p, q) <= 3);
  });

  while (points.length > 0) {
    const queue = [points.shift()];

    while (queue.length > 0) {
      queue.shift().near.forEach(p => {
        const idx = points.indexOf(p);

        if (idx !== -1) {
          queue.push(p);
          points.splice(idx, 1);
        }
      });
    }

    constellations++;
  }

  return constellations;
}

const part2 = () => undefined;

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTI1LmpzIl0sIm5hbWVzIjpbImRpc3RhbmNlIiwiYSIsImIiLCJyZWR1Y2UiLCJzdW0iLCJ4IiwiaSIsIk1hdGgiLCJhYnMiLCJwYXJ0MSIsImlucHV0IiwiY29uc3RlbGxhdGlvbnMiLCJsaW5lcyIsInNwbGl0IiwicG9pbnRzIiwibWFwIiwibGluZSIsInBhcnNlSW50IiwiZm9yRWFjaCIsInAiLCJuZWFyIiwiZmlsdGVyIiwicSIsImxlbmd0aCIsInF1ZXVlIiwic2hpZnQiLCJpZHgiLCJpbmRleE9mIiwicHVzaCIsInNwbGljZSIsInBhcnQyIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLFNBQVNBLFFBQVQsQ0FBa0JDLENBQWxCLEVBQXFCQyxDQUFyQixFQUF3QjtBQUN0QixTQUFPRCxDQUFDLENBQUNFLE1BQUYsQ0FBUyxDQUFDQyxHQUFELEVBQU1DLENBQU4sRUFBU0MsQ0FBVCxLQUFlRixHQUFHLEdBQUdHLElBQUksQ0FBQ0MsR0FBTCxDQUFTSCxDQUFDLEdBQUdILENBQUMsQ0FBQ0ksQ0FBRCxDQUFkLENBQTlCLEVBQWtELENBQWxELENBQVA7QUFDRDs7QUFFTSxTQUFTRyxLQUFULENBQWVDLEtBQWYsRUFBc0I7QUFDM0IsTUFBSUMsY0FBYyxHQUFHLENBQXJCO0FBQ0EsUUFBTUMsS0FBSyxHQUFHRixLQUFLLENBQUNHLEtBQU4sQ0FBWSxJQUFaLENBQWQ7QUFDQSxRQUFNQyxNQUFNLEdBQUdGLEtBQUssQ0FBQ0csR0FBTixDQUFVQyxJQUFJLElBQUlBLElBQUksQ0FBQ0gsS0FBTCxDQUFXLEdBQVgsRUFBZ0JFLEdBQWhCLENBQW9CVixDQUFDLElBQUlZLFFBQVEsQ0FBQ1osQ0FBRCxDQUFqQyxDQUFsQixDQUFmO0FBQ0FTLEVBQUFBLE1BQU0sQ0FBQ0ksT0FBUCxDQUFlQyxDQUFDLElBQUk7QUFDbEJBLElBQUFBLENBQUMsQ0FBQ0MsSUFBRixHQUFTTixNQUFNLENBQUNPLE1BQVAsQ0FBY0MsQ0FBQyxJQUFJdEIsUUFBUSxDQUFDbUIsQ0FBRCxFQUFJRyxDQUFKLENBQVIsSUFBa0IsQ0FBckMsQ0FBVDtBQUNELEdBRkQ7O0FBR0EsU0FBT1IsTUFBTSxDQUFDUyxNQUFQLEdBQWdCLENBQXZCLEVBQTBCO0FBQ3hCLFVBQU1DLEtBQUssR0FBRyxDQUFDVixNQUFNLENBQUNXLEtBQVAsRUFBRCxDQUFkOztBQUNBLFdBQU9ELEtBQUssQ0FBQ0QsTUFBTixHQUFlLENBQXRCLEVBQXlCO0FBQ3ZCQyxNQUFBQSxLQUFLLENBQUNDLEtBQU4sR0FBY0wsSUFBZCxDQUFtQkYsT0FBbkIsQ0FBMkJDLENBQUMsSUFBSTtBQUM5QixjQUFNTyxHQUFHLEdBQUdaLE1BQU0sQ0FBQ2EsT0FBUCxDQUFlUixDQUFmLENBQVo7O0FBQ0EsWUFBSU8sR0FBRyxLQUFLLENBQUMsQ0FBYixFQUFnQjtBQUNkRixVQUFBQSxLQUFLLENBQUNJLElBQU4sQ0FBV1QsQ0FBWDtBQUNBTCxVQUFBQSxNQUFNLENBQUNlLE1BQVAsQ0FBY0gsR0FBZCxFQUFtQixDQUFuQjtBQUNEO0FBQ0YsT0FORDtBQU9EOztBQUNEZixJQUFBQSxjQUFjO0FBQ2Y7O0FBQ0QsU0FBT0EsY0FBUDtBQUNEOztBQUVNLE1BQU1tQixLQUFLLEdBQUcsTUFBTUMsU0FBcEIiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBkaXN0YW5jZShhLCBiKSB7XG4gIHJldHVybiBhLnJlZHVjZSgoc3VtLCB4LCBpKSA9PiBzdW0gKyBNYXRoLmFicyh4IC0gYltpXSksIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDEoaW5wdXQpIHtcbiAgbGV0IGNvbnN0ZWxsYXRpb25zID0gMDtcbiAgY29uc3QgbGluZXMgPSBpbnB1dC5zcGxpdCgnXFxuJyk7XG4gIGNvbnN0IHBvaW50cyA9IGxpbmVzLm1hcChsaW5lID0+IGxpbmUuc3BsaXQoJywnKS5tYXAoeCA9PiBwYXJzZUludCh4KSkpO1xuICBwb2ludHMuZm9yRWFjaChwID0+IHtcbiAgICBwLm5lYXIgPSBwb2ludHMuZmlsdGVyKHEgPT4gZGlzdGFuY2UocCwgcSkgPD0gMyk7XG4gIH0pO1xuICB3aGlsZSAocG9pbnRzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBxdWV1ZSA9IFtwb2ludHMuc2hpZnQoKV07XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCA+IDApIHtcbiAgICAgIHF1ZXVlLnNoaWZ0KCkubmVhci5mb3JFYWNoKHAgPT4ge1xuICAgICAgICBjb25zdCBpZHggPSBwb2ludHMuaW5kZXhPZihwKTtcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgICBxdWV1ZS5wdXNoKHApO1xuICAgICAgICAgIHBvaW50cy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0ZWxsYXRpb25zKys7XG4gIH1cbiAgcmV0dXJuIGNvbnN0ZWxsYXRpb25zO1xufVxuXG5leHBvcnQgY29uc3QgcGFydDIgPSAoKSA9PiB1bmRlZmluZWQ7XG4iXX0=