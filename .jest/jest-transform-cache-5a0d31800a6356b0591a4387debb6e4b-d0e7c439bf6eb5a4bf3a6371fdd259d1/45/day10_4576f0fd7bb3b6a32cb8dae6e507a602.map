{"version":3,"sources":["day10.js"],"names":["move","points","seconds","map","p","x","xDiff","y","yDiff","size","reduce","start","end","Math","min","max","Infinity","print","arr","fill","Array","banner","forEach","join","day","input","regex","split","line","match","parseInt","secs","currentHeight","nextHeight","height","part1","part2"],"mappings":"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","sourcesContent":["function move(points, seconds) {\n  return points.map(p => ({\n    x: p.x + p.xDiff * seconds,\n    y: p.y + p.yDiff * seconds,\n  }));\n}\n\nfunction size(points) {\n  return points.reduce(\n    ({ start, end }, p) => ({\n      start: { x: Math.min(start.x, p.x), y: Math.min(start.y, p.y) },\n      end: { x: Math.max(end.x, p.x + 1), y: Math.max(end.y, p.y + 1) },\n    }),\n    {\n      start: { x: Infinity, y: Infinity },\n      end: { x: -Infinity, y: -Infinity },\n    },\n  );\n}\n\nfunction print(points) {\n  const { start, end } = size(points);\n  const arr = (size, fill) => new Array(size).fill(fill);\n  const banner = arr(end.y - start.y).map(() => arr(end.x - start.x, '.'));\n  points.forEach(p => (banner[p.y - start.y][p.x - start.x] = '#'));\n  return banner.map(x => x.join('')).join('\\n');\n}\n\nexport function day(input) {\n  const regex = /([-\\d]+)[^-\\d]*([-\\d]+)[^-\\d]*([-\\d]+)[^-\\d]*([-\\d]+)+/;\n  const points = input.split('\\n').map(line => {\n    const [, x, y, xDiff, yDiff] = line.match(regex).map(x => parseInt(x));\n    return { x, y, xDiff, yDiff };\n  });\n\n  let secs = -1;\n  let currentHeight, nextHeight;\n  const height = ({ start, end }) => end.y - start.y;\n  do {\n    secs++;\n    currentHeight = nextHeight || height(size(move(points, secs)));\n    nextHeight = height(size(move(points, secs + 1)));\n  } while (currentHeight > nextHeight); //text visible in minimal height\n\n  return { part1: '\\n' + print(move(points, secs)), part2: secs };\n}\n"]}