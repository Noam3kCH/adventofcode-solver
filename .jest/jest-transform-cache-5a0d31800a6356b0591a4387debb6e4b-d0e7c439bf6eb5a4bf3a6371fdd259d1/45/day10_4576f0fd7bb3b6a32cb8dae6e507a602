d401fb2adf1b74655fcf22abc7233639
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.day = day;

function move(points, seconds) {
  return points.map(p => ({
    x: p.x + p.xDiff * seconds,
    y: p.y + p.yDiff * seconds
  }));
}

function size(points) {
  return points.reduce(({
    start,
    end
  }, p) => ({
    start: {
      x: Math.min(start.x, p.x),
      y: Math.min(start.y, p.y)
    },
    end: {
      x: Math.max(end.x, p.x + 1),
      y: Math.max(end.y, p.y + 1)
    }
  }), {
    start: {
      x: Infinity,
      y: Infinity
    },
    end: {
      x: -Infinity,
      y: -Infinity
    }
  });
}

function print(points) {
  const {
    start,
    end
  } = size(points);

  const arr = (size, fill) => new Array(size).fill(fill);

  const banner = arr(end.y - start.y).map(() => arr(end.x - start.x, '.'));
  points.forEach(p => banner[p.y - start.y][p.x - start.x] = '#');
  return banner.map(x => x.join('')).join('\n');
}

function day(input) {
  const regex = /([-\d]+)[^-\d]*([-\d]+)[^-\d]*([-\d]+)[^-\d]*([-\d]+)+/;
  const points = input.split('\n').map(line => {
    const [, x, y, xDiff, yDiff] = line.match(regex).map(x => parseInt(x));
    return {
      x,
      y,
      xDiff,
      yDiff
    };
  });
  let secs = -1;
  let currentHeight, nextHeight;

  const height = ({
    start,
    end
  }) => end.y - start.y;

  do {
    secs++;
    currentHeight = nextHeight || height(size(move(points, secs)));
    nextHeight = height(size(move(points, secs + 1)));
  } while (currentHeight > nextHeight); //text visible in minimal height


  return {
    part1: '\n' + print(move(points, secs)),
    part2: secs
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTEwLmpzIl0sIm5hbWVzIjpbIm1vdmUiLCJwb2ludHMiLCJzZWNvbmRzIiwibWFwIiwicCIsIngiLCJ4RGlmZiIsInkiLCJ5RGlmZiIsInNpemUiLCJyZWR1Y2UiLCJzdGFydCIsImVuZCIsIk1hdGgiLCJtaW4iLCJtYXgiLCJJbmZpbml0eSIsInByaW50IiwiYXJyIiwiZmlsbCIsIkFycmF5IiwiYmFubmVyIiwiZm9yRWFjaCIsImpvaW4iLCJkYXkiLCJpbnB1dCIsInJlZ2V4Iiwic3BsaXQiLCJsaW5lIiwibWF0Y2giLCJwYXJzZUludCIsInNlY3MiLCJjdXJyZW50SGVpZ2h0IiwibmV4dEhlaWdodCIsImhlaWdodCIsInBhcnQxIiwicGFydDIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFTQSxJQUFULENBQWNDLE1BQWQsRUFBc0JDLE9BQXRCLEVBQStCO0FBQzdCLFNBQU9ELE1BQU0sQ0FBQ0UsR0FBUCxDQUFXQyxDQUFDLEtBQUs7QUFDdEJDLElBQUFBLENBQUMsRUFBRUQsQ0FBQyxDQUFDQyxDQUFGLEdBQU1ELENBQUMsQ0FBQ0UsS0FBRixHQUFVSixPQURHO0FBRXRCSyxJQUFBQSxDQUFDLEVBQUVILENBQUMsQ0FBQ0csQ0FBRixHQUFNSCxDQUFDLENBQUNJLEtBQUYsR0FBVU47QUFGRyxHQUFMLENBQVosQ0FBUDtBQUlEOztBQUVELFNBQVNPLElBQVQsQ0FBY1IsTUFBZCxFQUFzQjtBQUNwQixTQUFPQSxNQUFNLENBQUNTLE1BQVAsQ0FDTCxDQUFDO0FBQUVDLElBQUFBLEtBQUY7QUFBU0MsSUFBQUE7QUFBVCxHQUFELEVBQWlCUixDQUFqQixNQUF3QjtBQUN0Qk8sSUFBQUEsS0FBSyxFQUFFO0FBQUVOLE1BQUFBLENBQUMsRUFBRVEsSUFBSSxDQUFDQyxHQUFMLENBQVNILEtBQUssQ0FBQ04sQ0FBZixFQUFrQkQsQ0FBQyxDQUFDQyxDQUFwQixDQUFMO0FBQTZCRSxNQUFBQSxDQUFDLEVBQUVNLElBQUksQ0FBQ0MsR0FBTCxDQUFTSCxLQUFLLENBQUNKLENBQWYsRUFBa0JILENBQUMsQ0FBQ0csQ0FBcEI7QUFBaEMsS0FEZTtBQUV0QkssSUFBQUEsR0FBRyxFQUFFO0FBQUVQLE1BQUFBLENBQUMsRUFBRVEsSUFBSSxDQUFDRSxHQUFMLENBQVNILEdBQUcsQ0FBQ1AsQ0FBYixFQUFnQkQsQ0FBQyxDQUFDQyxDQUFGLEdBQU0sQ0FBdEIsQ0FBTDtBQUErQkUsTUFBQUEsQ0FBQyxFQUFFTSxJQUFJLENBQUNFLEdBQUwsQ0FBU0gsR0FBRyxDQUFDTCxDQUFiLEVBQWdCSCxDQUFDLENBQUNHLENBQUYsR0FBTSxDQUF0QjtBQUFsQztBQUZpQixHQUF4QixDQURLLEVBS0w7QUFDRUksSUFBQUEsS0FBSyxFQUFFO0FBQUVOLE1BQUFBLENBQUMsRUFBRVcsUUFBTDtBQUFlVCxNQUFBQSxDQUFDLEVBQUVTO0FBQWxCLEtBRFQ7QUFFRUosSUFBQUEsR0FBRyxFQUFFO0FBQUVQLE1BQUFBLENBQUMsRUFBRSxDQUFDVyxRQUFOO0FBQWdCVCxNQUFBQSxDQUFDLEVBQUUsQ0FBQ1M7QUFBcEI7QUFGUCxHQUxLLENBQVA7QUFVRDs7QUFFRCxTQUFTQyxLQUFULENBQWVoQixNQUFmLEVBQXVCO0FBQ3JCLFFBQU07QUFBRVUsSUFBQUEsS0FBRjtBQUFTQyxJQUFBQTtBQUFULE1BQWlCSCxJQUFJLENBQUNSLE1BQUQsQ0FBM0I7O0FBQ0EsUUFBTWlCLEdBQUcsR0FBRyxDQUFDVCxJQUFELEVBQU9VLElBQVAsS0FBZ0IsSUFBSUMsS0FBSixDQUFVWCxJQUFWLEVBQWdCVSxJQUFoQixDQUFxQkEsSUFBckIsQ0FBNUI7O0FBQ0EsUUFBTUUsTUFBTSxHQUFHSCxHQUFHLENBQUNOLEdBQUcsQ0FBQ0wsQ0FBSixHQUFRSSxLQUFLLENBQUNKLENBQWYsQ0FBSCxDQUFxQkosR0FBckIsQ0FBeUIsTUFBTWUsR0FBRyxDQUFDTixHQUFHLENBQUNQLENBQUosR0FBUU0sS0FBSyxDQUFDTixDQUFmLEVBQWtCLEdBQWxCLENBQWxDLENBQWY7QUFDQUosRUFBQUEsTUFBTSxDQUFDcUIsT0FBUCxDQUFlbEIsQ0FBQyxJQUFLaUIsTUFBTSxDQUFDakIsQ0FBQyxDQUFDRyxDQUFGLEdBQU1JLEtBQUssQ0FBQ0osQ0FBYixDQUFOLENBQXNCSCxDQUFDLENBQUNDLENBQUYsR0FBTU0sS0FBSyxDQUFDTixDQUFsQyxJQUF1QyxHQUE1RDtBQUNBLFNBQU9nQixNQUFNLENBQUNsQixHQUFQLENBQVdFLENBQUMsSUFBSUEsQ0FBQyxDQUFDa0IsSUFBRixDQUFPLEVBQVAsQ0FBaEIsRUFBNEJBLElBQTVCLENBQWlDLElBQWpDLENBQVA7QUFDRDs7QUFFTSxTQUFTQyxHQUFULENBQWFDLEtBQWIsRUFBb0I7QUFDekIsUUFBTUMsS0FBSyxHQUFHLHdEQUFkO0FBQ0EsUUFBTXpCLE1BQU0sR0FBR3dCLEtBQUssQ0FBQ0UsS0FBTixDQUFZLElBQVosRUFBa0J4QixHQUFsQixDQUFzQnlCLElBQUksSUFBSTtBQUMzQyxVQUFNLEdBQUd2QixDQUFILEVBQU1FLENBQU4sRUFBU0QsS0FBVCxFQUFnQkUsS0FBaEIsSUFBeUJvQixJQUFJLENBQUNDLEtBQUwsQ0FBV0gsS0FBWCxFQUFrQnZCLEdBQWxCLENBQXNCRSxDQUFDLElBQUl5QixRQUFRLENBQUN6QixDQUFELENBQW5DLENBQS9CO0FBQ0EsV0FBTztBQUFFQSxNQUFBQSxDQUFGO0FBQUtFLE1BQUFBLENBQUw7QUFBUUQsTUFBQUEsS0FBUjtBQUFlRSxNQUFBQTtBQUFmLEtBQVA7QUFDRCxHQUhjLENBQWY7QUFLQSxNQUFJdUIsSUFBSSxHQUFHLENBQUMsQ0FBWjtBQUNBLE1BQUlDLGFBQUosRUFBbUJDLFVBQW5COztBQUNBLFFBQU1DLE1BQU0sR0FBRyxDQUFDO0FBQUV2QixJQUFBQSxLQUFGO0FBQVNDLElBQUFBO0FBQVQsR0FBRCxLQUFvQkEsR0FBRyxDQUFDTCxDQUFKLEdBQVFJLEtBQUssQ0FBQ0osQ0FBakQ7O0FBQ0EsS0FBRztBQUNEd0IsSUFBQUEsSUFBSTtBQUNKQyxJQUFBQSxhQUFhLEdBQUdDLFVBQVUsSUFBSUMsTUFBTSxDQUFDekIsSUFBSSxDQUFDVCxJQUFJLENBQUNDLE1BQUQsRUFBUzhCLElBQVQsQ0FBTCxDQUFMLENBQXBDO0FBQ0FFLElBQUFBLFVBQVUsR0FBR0MsTUFBTSxDQUFDekIsSUFBSSxDQUFDVCxJQUFJLENBQUNDLE1BQUQsRUFBUzhCLElBQUksR0FBRyxDQUFoQixDQUFMLENBQUwsQ0FBbkI7QUFDRCxHQUpELFFBSVNDLGFBQWEsR0FBR0MsVUFKekIsRUFWeUIsQ0FjYTs7O0FBRXRDLFNBQU87QUFBRUUsSUFBQUEsS0FBSyxFQUFFLE9BQU9sQixLQUFLLENBQUNqQixJQUFJLENBQUNDLE1BQUQsRUFBUzhCLElBQVQsQ0FBTCxDQUFyQjtBQUEyQ0ssSUFBQUEsS0FBSyxFQUFFTDtBQUFsRCxHQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBtb3ZlKHBvaW50cywgc2Vjb25kcykge1xuICByZXR1cm4gcG9pbnRzLm1hcChwID0+ICh7XG4gICAgeDogcC54ICsgcC54RGlmZiAqIHNlY29uZHMsXG4gICAgeTogcC55ICsgcC55RGlmZiAqIHNlY29uZHMsXG4gIH0pKTtcbn1cblxuZnVuY3Rpb24gc2l6ZShwb2ludHMpIHtcbiAgcmV0dXJuIHBvaW50cy5yZWR1Y2UoXG4gICAgKHsgc3RhcnQsIGVuZCB9LCBwKSA9PiAoe1xuICAgICAgc3RhcnQ6IHsgeDogTWF0aC5taW4oc3RhcnQueCwgcC54KSwgeTogTWF0aC5taW4oc3RhcnQueSwgcC55KSB9LFxuICAgICAgZW5kOiB7IHg6IE1hdGgubWF4KGVuZC54LCBwLnggKyAxKSwgeTogTWF0aC5tYXgoZW5kLnksIHAueSArIDEpIH0sXG4gICAgfSksXG4gICAge1xuICAgICAgc3RhcnQ6IHsgeDogSW5maW5pdHksIHk6IEluZmluaXR5IH0sXG4gICAgICBlbmQ6IHsgeDogLUluZmluaXR5LCB5OiAtSW5maW5pdHkgfSxcbiAgICB9LFxuICApO1xufVxuXG5mdW5jdGlvbiBwcmludChwb2ludHMpIHtcbiAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSBzaXplKHBvaW50cyk7XG4gIGNvbnN0IGFyciA9IChzaXplLCBmaWxsKSA9PiBuZXcgQXJyYXkoc2l6ZSkuZmlsbChmaWxsKTtcbiAgY29uc3QgYmFubmVyID0gYXJyKGVuZC55IC0gc3RhcnQueSkubWFwKCgpID0+IGFycihlbmQueCAtIHN0YXJ0LngsICcuJykpO1xuICBwb2ludHMuZm9yRWFjaChwID0+IChiYW5uZXJbcC55IC0gc3RhcnQueV1bcC54IC0gc3RhcnQueF0gPSAnIycpKTtcbiAgcmV0dXJuIGJhbm5lci5tYXAoeCA9PiB4LmpvaW4oJycpKS5qb2luKCdcXG4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRheShpbnB1dCkge1xuICBjb25zdCByZWdleCA9IC8oWy1cXGRdKylbXi1cXGRdKihbLVxcZF0rKVteLVxcZF0qKFstXFxkXSspW14tXFxkXSooWy1cXGRdKykrLztcbiAgY29uc3QgcG9pbnRzID0gaW5wdXQuc3BsaXQoJ1xcbicpLm1hcChsaW5lID0+IHtcbiAgICBjb25zdCBbLCB4LCB5LCB4RGlmZiwgeURpZmZdID0gbGluZS5tYXRjaChyZWdleCkubWFwKHggPT4gcGFyc2VJbnQoeCkpO1xuICAgIHJldHVybiB7IHgsIHksIHhEaWZmLCB5RGlmZiB9O1xuICB9KTtcblxuICBsZXQgc2VjcyA9IC0xO1xuICBsZXQgY3VycmVudEhlaWdodCwgbmV4dEhlaWdodDtcbiAgY29uc3QgaGVpZ2h0ID0gKHsgc3RhcnQsIGVuZCB9KSA9PiBlbmQueSAtIHN0YXJ0Lnk7XG4gIGRvIHtcbiAgICBzZWNzKys7XG4gICAgY3VycmVudEhlaWdodCA9IG5leHRIZWlnaHQgfHwgaGVpZ2h0KHNpemUobW92ZShwb2ludHMsIHNlY3MpKSk7XG4gICAgbmV4dEhlaWdodCA9IGhlaWdodChzaXplKG1vdmUocG9pbnRzLCBzZWNzICsgMSkpKTtcbiAgfSB3aGlsZSAoY3VycmVudEhlaWdodCA+IG5leHRIZWlnaHQpOyAvL3RleHQgdmlzaWJsZSBpbiBtaW5pbWFsIGhlaWdodFxuXG4gIHJldHVybiB7IHBhcnQxOiAnXFxuJyArIHByaW50KG1vdmUocG9pbnRzLCBzZWNzKSksIHBhcnQyOiBzZWNzIH07XG59XG4iXX0=