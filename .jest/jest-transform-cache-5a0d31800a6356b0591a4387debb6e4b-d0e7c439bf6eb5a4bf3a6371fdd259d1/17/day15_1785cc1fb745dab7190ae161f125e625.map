{"version":3,"sources":["day15.js"],"names":["parse","input","split","map","x","matches","match","index","positions","initial","parseInt","solve","discs","biggest","slice","sort","shift","time","fit","disc","some","part1","part2","concat","length"],"mappings":";;;;;;;;AAAA,SAASA,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOA,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBC,GAAlB,CAAsBC,CAAC,IAAI;AAChC,UAAMC,OAAO,GAAGD,CAAC,CAACE,KAAF,CACd,wEADc,CAAhB;AAGA,UAAM,GAAGC,KAAH,EAAUC,SAAV,EAAqBC,OAArB,IAAgCJ,OAAO,CAACF,GAAR,CAAYC,CAAC,IAAIM,QAAQ,CAACN,CAAD,CAAzB,CAAtC;AACA,WAAO;AAAEG,MAAAA,KAAF;AAASC,MAAAA,SAAT;AAAoBC,MAAAA;AAApB,KAAP;AACD,GANM,CAAP;AAOD;;AAED,SAASE,KAAT,CAAeC,KAAf,EAAsB;AACpB,QAAMC,OAAO,GAAGD,KAAK,CAClBE,KADa,CACP,CADO,EAEbC,IAFa,GAGbC,KAHa,EAAhB;AAIA,MAAIC,IAAI,GAAGJ,OAAO,CAACL,SAAR,GAAoBK,OAAO,CAACJ,OAA5B,GAAsCI,OAAO,CAACN,KAAzD;;AACA,QAAMW,GAAG,GAAGC,IAAI,IAAI,CAACF,IAAI,GAAGE,IAAI,CAACV,OAAZ,GAAsBU,IAAI,CAACZ,KAA5B,IAAqCY,IAAI,CAACX,SAA1C,KAAwD,CAA5E;;AACA,SAAOI,KAAK,CAACQ,IAAN,CAAWF,GAAX,CAAP,EAAwB;AACtBD,IAAAA,IAAI,IAAIJ,OAAO,CAACL,SAAhB;AACD;;AACD,SAAOS,IAAP;AACD;;AAEM,SAASI,KAAT,CAAepB,KAAf,EAAsB;AAC3B,SAAOU,KAAK,CAACX,KAAK,CAACC,KAAD,CAAN,CAAZ;AACD;;AAEM,SAASqB,KAAT,CAAerB,KAAf,EAAsB;AAC3B,QAAMW,KAAK,GAAGZ,KAAK,CAACC,KAAD,CAAnB;AACA,SAAOU,KAAK,CACVC,KAAK,CAACW,MAAN,CAAa,CAAC;AAAEhB,IAAAA,KAAK,EAAEK,KAAK,CAACY,MAAN,GAAe,CAAxB;AAA2BhB,IAAAA,SAAS,EAAE,EAAtC;AAA0CC,IAAAA,OAAO,EAAE;AAAnD,GAAD,CAAb,CADU,CAAZ;AAGD","sourcesContent":["function parse(input) {\n  return input.split('\\n').map(x => {\n    const matches = x.match(\n      /^Disc #(\\d+) has (\\d+) positions; at time=0, it is at position (\\d+)\\./,\n    );\n    const [, index, positions, initial] = matches.map(x => parseInt(x));\n    return { index, positions, initial };\n  });\n}\n\nfunction solve(discs) {\n  const biggest = discs\n    .slice(0)\n    .sort()\n    .shift();\n  let time = biggest.positions - biggest.initial - biggest.index;\n  const fit = disc => (time + disc.initial + disc.index) % disc.positions !== 0;\n  while (discs.some(fit)) {\n    time += biggest.positions;\n  }\n  return time;\n}\n\nexport function part1(input) {\n  return solve(parse(input));\n}\n\nexport function part2(input) {\n  const discs = parse(input);\n  return solve(\n    discs.concat([{ index: discs.length + 1, positions: 11, initial: 0 }]),\n  );\n}\n"]}