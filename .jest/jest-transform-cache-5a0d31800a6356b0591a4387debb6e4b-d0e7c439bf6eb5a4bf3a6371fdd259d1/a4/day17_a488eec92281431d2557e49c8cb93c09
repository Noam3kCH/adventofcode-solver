6ad916e67c481bf70d0d6fa68b49e9bb
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.day = day;

function drop(pit, x, y) {
  const queue = [{
    x,
    y
  }];
  const visited = new Set();

  const add = ({
    x,
    y
  }) => {
    if (!visited.has(`${x},${y}`)) {
      queue.push({
        x,
        y
      });
      visited.add(`${x},${y}`);
    }
  };

  while (queue.length > 0) {
    const next = queue.shift();
    pit[next.y][next.x] = '|';

    if (pit[next.y + 1] && pit[next.y + 1][next.x] === '.') {
      add({
        x: next.x,
        y: next.y + 1
      });
    } else if (pit[next.y + 1] && pit[next.y + 1][next.x] !== '|') {
      if (pit[next.y][next.x - 1] === '.') {
        add({
          x: next.x - 1,
          y: next.y
        });
      }

      if (pit[next.y][next.x + 1] === '.') {
        add({
          x: next.x + 1,
          y: next.y
        });
      }
    }
  }

  pit.forEach((line, y) => {
    let start;

    for (let x = 0; x < line.length; x++) {
      if (line[x] === '#' && start !== undefined) {
        for (let i = start; i < x; i++) {
          line[i] = '~';
        }
      }

      if (line[x] === '|' && pit[y + 1] && pit[y + 1][x] !== '|') {
        start = line[x - 1] === '#' ? x : start;
      } else {
        start = undefined;
      }
    }
  });
  return {
    wet: pit.reduce((sum, line) => sum + line.filter(x => x === '|').length, 0),
    dry: pit.reduce((sum, line) => sum + line.filter(x => x === '~').length, 0)
  };
}

function fill(pit, base) {
  let count = {},
      newCount = {
    wet: 0,
    dry: 0
  };

  while (count.wet !== newCount.wet || count.dry !== newCount.dry) {
    count = newCount;
    pit.forEach((line, i) => pit[i] = line.join('').replace(/\|/g, '.').split(''));
    newCount = drop(pit, 500 - base.x, 0);
  }

  return newCount;
}

function day(input) {
  const base = {
    x: Infinity,
    y: Infinity
  };
  const end = {
    x: -Infinity,
    y: -Infinity
  };
  const lines = input.split('\n').map(x => {
    const result = x.match(/^([xy])=(\d+), ([xy])=(\d+)\.\.(\d+)$/);
    const [, axis, num, rangeAxis, from, to] = result;
    return {
      axis,
      num: parseInt(num),
      rangeAxis,
      from: parseInt(from),
      to: parseInt(to)
    };
  });
  lines.forEach(line => {
    base[line.axis] = Math.min(base[line.axis], line.num);
    base[line.rangeAxis] = Math.min(base[line.rangeAxis], line.from);
    end[line.axis] = Math.max(end[line.axis], line.num);
    end[line.rangeAxis] = Math.max(end[line.rangeAxis], line.to);
  });
  base.x--;
  end.x++;
  const pit = new Array(end.y - base.y + 1).fill().map(() => new Array(end.x - base.x + 1).fill('.'));
  lines.forEach(line => {
    if (line.rangeAxis === 'x') {
      for (let x = line.from; x <= line.to; x++) {
        pit[line.num - base.y][x - base.x] = '#';
      }
    } else {
      for (let y = line.from; y <= line.to; y++) {
        pit[y - base.y][line.num - base.x] = '#';
      }
    }
  });
  const result = fill(pit, base, end); // console.log(pit.map(x => x.join('')).join('\n'));

  return {
    part1: result.wet + result.dry,
    part2: result.dry
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE3LmpzIl0sIm5hbWVzIjpbImRyb3AiLCJwaXQiLCJ4IiwieSIsInF1ZXVlIiwidmlzaXRlZCIsIlNldCIsImFkZCIsImhhcyIsInB1c2giLCJsZW5ndGgiLCJuZXh0Iiwic2hpZnQiLCJmb3JFYWNoIiwibGluZSIsInN0YXJ0IiwidW5kZWZpbmVkIiwiaSIsIndldCIsInJlZHVjZSIsInN1bSIsImZpbHRlciIsImRyeSIsImZpbGwiLCJiYXNlIiwiY291bnQiLCJuZXdDb3VudCIsImpvaW4iLCJyZXBsYWNlIiwic3BsaXQiLCJkYXkiLCJpbnB1dCIsIkluZmluaXR5IiwiZW5kIiwibGluZXMiLCJtYXAiLCJyZXN1bHQiLCJtYXRjaCIsImF4aXMiLCJudW0iLCJyYW5nZUF4aXMiLCJmcm9tIiwidG8iLCJwYXJzZUludCIsIk1hdGgiLCJtaW4iLCJtYXgiLCJBcnJheSIsInBhcnQxIiwicGFydDIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQSxTQUFTQSxJQUFULENBQWNDLEdBQWQsRUFBbUJDLENBQW5CLEVBQXNCQyxDQUF0QixFQUF5QjtBQUN2QixRQUFNQyxLQUFLLEdBQUcsQ0FBQztBQUFFRixJQUFBQSxDQUFGO0FBQUtDLElBQUFBO0FBQUwsR0FBRCxDQUFkO0FBQ0EsUUFBTUUsT0FBTyxHQUFHLElBQUlDLEdBQUosRUFBaEI7O0FBQ0EsUUFBTUMsR0FBRyxHQUFHLENBQUM7QUFBRUwsSUFBQUEsQ0FBRjtBQUFLQyxJQUFBQTtBQUFMLEdBQUQsS0FBYztBQUN4QixRQUFJLENBQUNFLE9BQU8sQ0FBQ0csR0FBUixDQUFhLEdBQUVOLENBQUUsSUFBR0MsQ0FBRSxFQUF0QixDQUFMLEVBQStCO0FBQzdCQyxNQUFBQSxLQUFLLENBQUNLLElBQU4sQ0FBVztBQUFFUCxRQUFBQSxDQUFGO0FBQUtDLFFBQUFBO0FBQUwsT0FBWDtBQUNBRSxNQUFBQSxPQUFPLENBQUNFLEdBQVIsQ0FBYSxHQUFFTCxDQUFFLElBQUdDLENBQUUsRUFBdEI7QUFDRDtBQUNG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QUFDdEIsQ0FBaEMsSUFBcUMsR0FBckM7QUFDRDtBQUNGLEtBSkQsTUFJTztBQUNMLFdBQUssSUFBSUMsQ0FBQyxHQUFHVyxJQUFJLENBQUMyQixJQUFsQixFQUF3QnRDLENBQUMsSUFBSVcsSUFBSSxDQUFDNEIsRUFBbEMsRUFBc0N2QyxDQUFDLEVBQXZDLEVBQTJDO0FBQ3pDRixRQUFBQSxHQUFHLENBQUNFLENBQUMsR0FBR3FCLElBQUksQ0FBQ3JCLENBQVYsQ0FBSCxDQUFnQlcsSUFBSSxDQUFDeUIsR0FBTCxHQUFXZixJQUFJLENBQUN0QixDQUFoQyxJQUFxQyxHQUFyQztBQUNEO0FBQ0Y7QUFDRixHQVZEO0FBV0EsUUFBTWtDLE1BQU0sR0FBR2IsSUFBSSxDQUFDdEIsR0FBRCxFQUFNdUIsSUFBTixFQUFZUyxHQUFaLENBQW5CLENBcEN5QixDQXFDekI7O0FBQ0EsU0FBTztBQUFFZSxJQUFBQSxLQUFLLEVBQUVaLE1BQU0sQ0FBQ2xCLEdBQVAsR0FBYWtCLE1BQU0sQ0FBQ2QsR0FBN0I7QUFBa0MyQixJQUFBQSxLQUFLLEVBQUViLE1BQU0sQ0FBQ2Q7QUFBaEQsR0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZHJvcChwaXQsIHgsIHkpIHtcbiAgY29uc3QgcXVldWUgPSBbeyB4LCB5IH1dO1xuICBjb25zdCB2aXNpdGVkID0gbmV3IFNldCgpO1xuICBjb25zdCBhZGQgPSAoeyB4LCB5IH0pID0+IHtcbiAgICBpZiAoIXZpc2l0ZWQuaGFzKGAke3h9LCR7eX1gKSkge1xuICAgICAgcXVldWUucHVzaCh7IHgsIHkgfSk7XG4gICAgICB2aXNpdGVkLmFkZChgJHt4fSwke3l9YCk7XG4gICAgfVxuICB9O1xuICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IG5leHQgPSBxdWV1ZS5zaGlmdCgpO1xuICAgIHBpdFtuZXh0LnldW25leHQueF0gPSAnfCc7XG4gICAgaWYgKHBpdFtuZXh0LnkgKyAxXSAmJiBwaXRbbmV4dC55ICsgMV1bbmV4dC54XSA9PT0gJy4nKSB7XG4gICAgICBhZGQoeyB4OiBuZXh0LngsIHk6IG5leHQueSArIDEgfSk7XG4gICAgfSBlbHNlIGlmIChwaXRbbmV4dC55ICsgMV0gJiYgcGl0W25leHQueSArIDFdW25leHQueF0gIT09ICd8Jykge1xuICAgICAgaWYgKHBpdFtuZXh0LnldW25leHQueCAtIDFdID09PSAnLicpIHtcbiAgICAgICAgYWRkKHsgeDogbmV4dC54IC0gMSwgeTogbmV4dC55IH0pO1xuICAgICAgfVxuICAgICAgaWYgKHBpdFtuZXh0LnldW25leHQueCArIDFdID09PSAnLicpIHtcbiAgICAgICAgYWRkKHsgeDogbmV4dC54ICsgMSwgeTogbmV4dC55IH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwaXQuZm9yRWFjaCgobGluZSwgeSkgPT4ge1xuICAgIGxldCBzdGFydDtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGxpbmUubGVuZ3RoOyB4KyspIHtcbiAgICAgIGlmIChsaW5lW3hdID09PSAnIycgJiYgc3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCB4OyBpKyspIHtcbiAgICAgICAgICBsaW5lW2ldID0gJ34nO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobGluZVt4XSA9PT0gJ3wnICYmIHBpdFt5ICsgMV0gJiYgcGl0W3kgKyAxXVt4XSAhPT0gJ3wnKSB7XG4gICAgICAgIHN0YXJ0ID0gbGluZVt4IC0gMV0gPT09ICcjJyA/IHggOiBzdGFydDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgd2V0OiBwaXQucmVkdWNlKChzdW0sIGxpbmUpID0+IHN1bSArIGxpbmUuZmlsdGVyKHggPT4geCA9PT0gJ3wnKS5sZW5ndGgsIDApLFxuICAgIGRyeTogcGl0LnJlZHVjZSgoc3VtLCBsaW5lKSA9PiBzdW0gKyBsaW5lLmZpbHRlcih4ID0+IHggPT09ICd+JykubGVuZ3RoLCAwKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZmlsbChwaXQsIGJhc2UpIHtcbiAgbGV0IGNvdW50ID0ge30sXG4gICAgbmV3Q291bnQgPSB7IHdldDogMCwgZHJ5OiAwIH07XG4gIHdoaWxlIChjb3VudC53ZXQgIT09IG5ld0NvdW50LndldCB8fCBjb3VudC5kcnkgIT09IG5ld0NvdW50LmRyeSkge1xuICAgIGNvdW50ID0gbmV3Q291bnQ7XG4gICAgcGl0LmZvckVhY2goXG4gICAgICAobGluZSwgaSkgPT5cbiAgICAgICAgKHBpdFtpXSA9IGxpbmVcbiAgICAgICAgICAuam9pbignJylcbiAgICAgICAgICAucmVwbGFjZSgvXFx8L2csICcuJylcbiAgICAgICAgICAuc3BsaXQoJycpKSxcbiAgICApO1xuICAgIG5ld0NvdW50ID0gZHJvcChwaXQsIDUwMCAtIGJhc2UueCwgMCk7XG4gIH1cbiAgcmV0dXJuIG5ld0NvdW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGF5KGlucHV0KSB7XG4gIGNvbnN0IGJhc2UgPSB7IHg6IEluZmluaXR5LCB5OiBJbmZpbml0eSB9O1xuICBjb25zdCBlbmQgPSB7IHg6IC1JbmZpbml0eSwgeTogLUluZmluaXR5IH07XG4gIGNvbnN0IGxpbmVzID0gaW5wdXQuc3BsaXQoJ1xcbicpLm1hcCh4ID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB4Lm1hdGNoKC9eKFt4eV0pPShcXGQrKSwgKFt4eV0pPShcXGQrKVxcLlxcLihcXGQrKSQvKTtcbiAgICBjb25zdCBbLCBheGlzLCBudW0sIHJhbmdlQXhpcywgZnJvbSwgdG9dID0gcmVzdWx0O1xuICAgIHJldHVybiB7XG4gICAgICBheGlzLFxuICAgICAgbnVtOiBwYXJzZUludChudW0pLFxuICAgICAgcmFuZ2VBeGlzLFxuICAgICAgZnJvbTogcGFyc2VJbnQoZnJvbSksXG4gICAgICB0bzogcGFyc2VJbnQodG8pLFxuICAgIH07XG4gIH0pO1xuICBsaW5lcy5mb3JFYWNoKGxpbmUgPT4ge1xuICAgIGJhc2VbbGluZS5heGlzXSA9IE1hdGgubWluKGJhc2VbbGluZS5heGlzXSwgbGluZS5udW0pO1xuICAgIGJhc2VbbGluZS5yYW5nZUF4aXNdID0gTWF0aC5taW4oYmFzZVtsaW5lLnJhbmdlQXhpc10sIGxpbmUuZnJvbSk7XG4gICAgZW5kW2xpbmUuYXhpc10gPSBNYXRoLm1heChlbmRbbGluZS5heGlzXSwgbGluZS5udW0pO1xuICAgIGVuZFtsaW5lLnJhbmdlQXhpc10gPSBNYXRoLm1heChlbmRbbGluZS5yYW5nZUF4aXNdLCBsaW5lLnRvKTtcbiAgfSk7XG4gIGJhc2UueC0tO1xuICBlbmQueCsrO1xuICBjb25zdCBwaXQgPSBuZXcgQXJyYXkoZW5kLnkgLSBiYXNlLnkgKyAxKVxuICAgIC5maWxsKClcbiAgICAubWFwKCgpID0+IG5ldyBBcnJheShlbmQueCAtIGJhc2UueCArIDEpLmZpbGwoJy4nKSk7XG4gIGxpbmVzLmZvckVhY2gobGluZSA9PiB7XG4gICAgaWYgKGxpbmUucmFuZ2VBeGlzID09PSAneCcpIHtcbiAgICAgIGZvciAobGV0IHggPSBsaW5lLmZyb207IHggPD0gbGluZS50bzsgeCsrKSB7XG4gICAgICAgIHBpdFtsaW5lLm51bSAtIGJhc2UueV1beCAtIGJhc2UueF0gPSAnIyc7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IHkgPSBsaW5lLmZyb207IHkgPD0gbGluZS50bzsgeSsrKSB7XG4gICAgICAgIHBpdFt5IC0gYmFzZS55XVtsaW5lLm51bSAtIGJhc2UueF0gPSAnIyc7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgY29uc3QgcmVzdWx0ID0gZmlsbChwaXQsIGJhc2UsIGVuZCk7XG4gIC8vIGNvbnNvbGUubG9nKHBpdC5tYXAoeCA9PiB4LmpvaW4oJycpKS5qb2luKCdcXG4nKSk7XG4gIHJldHVybiB7IHBhcnQxOiByZXN1bHQud2V0ICsgcmVzdWx0LmRyeSwgcGFydDI6IHJlc3VsdC5kcnkgfTtcbn1cbiJdfQ==