{"version":3,"sources":["day17.js"],"names":["drop","pit","x","y","queue","visited","Set","add","has","push","length","next","shift","forEach","line","start","undefined","i","wet","reduce","sum","filter","dry","fill","base","count","newCount","join","replace","split","day","input","Infinity","end","lines","map","result","match","axis","num","rangeAxis","from","to","parseInt","Math","min","max","Array","part1","part2"],"mappings":"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","sourcesContent":["function drop(pit, x, y) {\n  const queue = [{ x, y }];\n  const visited = new Set();\n  const add = ({ x, y }) => {\n    if (!visited.has(`${x},${y}`)) {\n      queue.push({ x, y });\n      visited.add(`${x},${y}`);\n    }\n  };\n  while (queue.length > 0) {\n    const next = queue.shift();\n    pit[next.y][next.x] = '|';\n    if (pit[next.y + 1] && pit[next.y + 1][next.x] === '.') {\n      add({ x: next.x, y: next.y + 1 });\n    } else if (pit[next.y + 1] && pit[next.y + 1][next.x] !== '|') {\n      if (pit[next.y][next.x - 1] === '.') {\n        add({ x: next.x - 1, y: next.y });\n      }\n      if (pit[next.y][next.x + 1] === '.') {\n        add({ x: next.x + 1, y: next.y });\n      }\n    }\n  }\n  pit.forEach((line, y) => {\n    let start;\n    for (let x = 0; x < line.length; x++) {\n      if (line[x] === '#' && start !== undefined) {\n        for (let i = start; i < x; i++) {\n          line[i] = '~';\n        }\n      }\n      if (line[x] === '|' && pit[y + 1] && pit[y + 1][x] !== '|') {\n        start = line[x - 1] === '#' ? x : start;\n      } else {\n        start = undefined;\n      }\n    }\n  });\n  return {\n    wet: pit.reduce((sum, line) => sum + line.filter(x => x === '|').length, 0),\n    dry: pit.reduce((sum, line) => sum + line.filter(x => x === '~').length, 0),\n  };\n}\n\nfunction fill(pit, base) {\n  let count = {},\n    newCount = { wet: 0, dry: 0 };\n  while (count.wet !== newCount.wet || count.dry !== newCount.dry) {\n    count = newCount;\n    pit.forEach(\n      (line, i) =>\n        (pit[i] = line\n          .join('')\n          .replace(/\\|/g, '.')\n          .split('')),\n    );\n    newCount = drop(pit, 500 - base.x, 0);\n  }\n  return newCount;\n}\n\nexport function day(input) {\n  const base = { x: Infinity, y: Infinity };\n  const end = { x: -Infinity, y: -Infinity };\n  const lines = input.split('\\n').map(x => {\n    const result = x.match(/^([xy])=(\\d+), ([xy])=(\\d+)\\.\\.(\\d+)$/);\n    const [, axis, num, rangeAxis, from, to] = result;\n    return {\n      axis,\n      num: parseInt(num),\n      rangeAxis,\n      from: parseInt(from),\n      to: parseInt(to),\n    };\n  });\n  lines.forEach(line => {\n    base[line.axis] = Math.min(base[line.axis], line.num);\n    base[line.rangeAxis] = Math.min(base[line.rangeAxis], line.from);\n    end[line.axis] = Math.max(end[line.axis], line.num);\n    end[line.rangeAxis] = Math.max(end[line.rangeAxis], line.to);\n  });\n  base.x--;\n  end.x++;\n  const pit = new Array(end.y - base.y + 1)\n    .fill()\n    .map(() => new Array(end.x - base.x + 1).fill('.'));\n  lines.forEach(line => {\n    if (line.rangeAxis === 'x') {\n      for (let x = line.from; x <= line.to; x++) {\n        pit[line.num - base.y][x - base.x] = '#';\n      }\n    } else {\n      for (let y = line.from; y <= line.to; y++) {\n        pit[y - base.y][line.num - base.x] = '#';\n      }\n    }\n  });\n  const result = fill(pit, base, end);\n  // console.log(pit.map(x => x.join('')).join('\\n'));\n  return { part1: result.wet + result.dry, part2: result.dry };\n}\n"]}