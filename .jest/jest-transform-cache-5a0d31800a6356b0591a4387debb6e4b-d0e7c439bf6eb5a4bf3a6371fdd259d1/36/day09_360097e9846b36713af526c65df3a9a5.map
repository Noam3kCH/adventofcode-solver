{"version":3,"sources":["day09.js"],"names":["add","value","position","newItem","next","prev","remove","part1","input","players","lastMarble","match","map","x","parseInt","score","Map","player","marble","pointer","set","get","Math","max","Array","from","values","part2"],"mappings":";;;;;;;;AAAA,SAASA,GAAT,CAAaC,KAAb,EAAoBC,QAApB,EAA8B;AAC5B,QAAMC,OAAO,GAAG;AAAEF,IAAAA;AAAF,GAAhB;AACAE,EAAAA,OAAO,CAACC,IAAR,GAAeF,QAAQ,GAAGA,QAAQ,CAACE,IAAZ,GAAmBD,OAA1C;AACAA,EAAAA,OAAO,CAACE,IAAR,GAAeH,QAAQ,IAAIC,OAA3B;;AACA,MAAID,QAAJ,EAAc;AACZA,IAAAA,QAAQ,CAACE,IAAT,CAAcC,IAAd,GAAqBF,OAArB;AACAD,IAAAA,QAAQ,CAACE,IAAT,GAAgBD,OAAhB;AACD;;AACD,SAAOA,OAAP;AACD;;AAED,SAASG,MAAT,CAAgBJ,QAAhB,EAA0B;AACxBA,EAAAA,QAAQ,CAACG,IAAT,CAAcD,IAAd,GAAqBF,QAAQ,CAACE,IAA9B;AACAF,EAAAA,QAAQ,CAACE,IAAT,CAAcC,IAAd,GAAqBH,QAAQ,CAACG,IAA9B;AACA,SAAOH,QAAP;AACD;;AAEM,SAASK,KAAT,CAAeC,KAAf,EAAsB;AAC3B,QAAM,GAAGC,OAAH,EAAYC,UAAZ,IAA0BF,KAAK,CAClCG,KAD6B,CACvB,2CADuB,EAE7BC,GAF6B,CAEzBC,CAAC,IAAIC,QAAQ,CAACD,CAAD,CAFY,CAAhC;AAIA,QAAME,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,OAAO,GAAGnB,GAAG,CAAC,CAAD,CAAjB;;AAEA,SAAOkB,MAAM,IAAIR,UAAjB,EAA6B;AAC3B,QAAIQ,MAAM,GAAG,EAAT,KAAgB,CAApB,EAAuB;AACrBC,MAAAA,OAAO,GAAGb,MAAM,CAACa,OAAO,CAACd,IAAR,CAAaA,IAAb,CAAkBA,IAAlB,CAAuBA,IAAvB,CAA4BA,IAA5B,CAAiCA,IAAjC,CAAsCA,IAAvC,CAAhB;AACAU,MAAAA,KAAK,CAACK,GAAN,CAAUH,MAAV,EAAkB,CAACF,KAAK,CAACM,GAAN,CAAUJ,MAAV,KAAqB,CAAtB,IAA2BC,MAA3B,GAAoCC,OAAO,CAAClB,KAA9D;AACAkB,MAAAA,OAAO,GAAGA,OAAO,CAACf,IAAlB;AACD,KAJD,MAIO;AACLe,MAAAA,OAAO,GAAGnB,GAAG,CAACkB,MAAD,EAASC,OAAO,CAACf,IAAjB,CAAb;AACD;;AACDc,IAAAA,MAAM;AACND,IAAAA,MAAM,GAAG,CAACA,MAAM,GAAG,CAAV,IAAeR,OAAxB;AACD;;AACD,SAAOa,IAAI,CAACC,GAAL,CAAS,GAAGC,KAAK,CAACC,IAAN,CAAWV,KAAK,CAACW,MAAN,EAAX,CAAZ,CAAP;AACD;;AAEM,SAASC,KAAT,CAAenB,KAAf,EAAsB;AAC3B,QAAM,GAAGC,OAAH,EAAYC,UAAZ,IAA0BF,KAAK,CAClCG,KAD6B,CACvB,2CADuB,EAE7BC,GAF6B,CAEzBC,CAAC,IAAIC,QAAQ,CAACD,CAAD,CAFY,CAAhC;AAGA,SAAON,KAAK,CAAE,GAAEE,OAAQ,kCAAiCC,UAAU,GAAG,GAAI,EAA9D,CAAZ;AACD","sourcesContent":["function add(value, position) {\n  const newItem = { value };\n  newItem.next = position ? position.next : newItem;\n  newItem.prev = position || newItem;\n  if (position) {\n    position.next.prev = newItem;\n    position.next = newItem;\n  }\n  return newItem;\n}\n\nfunction remove(position) {\n  position.prev.next = position.next;\n  position.next.prev = position.prev;\n  return position;\n}\n\nexport function part1(input) {\n  const [, players, lastMarble] = input\n    .match(/(\\d+) players; last marble is worth (\\d+)/)\n    .map(x => parseInt(x));\n\n  const score = new Map();\n  let player = 0;\n  let marble = 1;\n  let pointer = add(0);\n\n  while (marble <= lastMarble) {\n    if (marble % 23 === 0) {\n      pointer = remove(pointer.prev.prev.prev.prev.prev.prev.prev);\n      score.set(player, (score.get(player) || 0) + marble + pointer.value);\n      pointer = pointer.next;\n    } else {\n      pointer = add(marble, pointer.next);\n    }\n    marble++;\n    player = (player + 1) % players;\n  }\n  return Math.max(...Array.from(score.values()));\n}\n\nexport function part2(input) {\n  const [, players, lastMarble] = input\n    .match(/(\\d+) players; last marble is worth (\\d+)/)\n    .map(x => parseInt(x));\n  return part1(`${players} players; last marble is worth ${lastMarble * 100}`);\n}\n"]}