d20402b549410968f4358fdd2c49a956
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function add(value, position) {
  const newItem = {
    value
  };
  newItem.next = position ? position.next : newItem;
  newItem.prev = position || newItem;

  if (position) {
    position.next.prev = newItem;
    position.next = newItem;
  }

  return newItem;
}

function remove(position) {
  position.prev.next = position.next;
  position.next.prev = position.prev;
  return position;
}

function part1(input) {
  const [, players, lastMarble] = input.match(/(\d+) players; last marble is worth (\d+)/).map(x => parseInt(x));
  const score = new Map();
  let player = 0;
  let marble = 1;
  let pointer = add(0);

  while (marble <= lastMarble) {
    if (marble % 23 === 0) {
      pointer = remove(pointer.prev.prev.prev.prev.prev.prev.prev);
      score.set(player, (score.get(player) || 0) + marble + pointer.value);
      pointer = pointer.next;
    } else {
      pointer = add(marble, pointer.next);
    }

    marble++;
    player = (player + 1) % players;
  }

  return Math.max(...Array.from(score.values()));
}

function part2(input) {
  const [, players, lastMarble] = input.match(/(\d+) players; last marble is worth (\d+)/).map(x => parseInt(x));
  return part1(`${players} players; last marble is worth ${lastMarble * 100}`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTA5LmpzIl0sIm5hbWVzIjpbImFkZCIsInZhbHVlIiwicG9zaXRpb24iLCJuZXdJdGVtIiwibmV4dCIsInByZXYiLCJyZW1vdmUiLCJwYXJ0MSIsImlucHV0IiwicGxheWVycyIsImxhc3RNYXJibGUiLCJtYXRjaCIsIm1hcCIsIngiLCJwYXJzZUludCIsInNjb3JlIiwiTWFwIiwicGxheWVyIiwibWFyYmxlIiwicG9pbnRlciIsInNldCIsImdldCIsIk1hdGgiLCJtYXgiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJwYXJ0MiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxTQUFTQSxHQUFULENBQWFDLEtBQWIsRUFBb0JDLFFBQXBCLEVBQThCO0FBQzVCLFFBQU1DLE9BQU8sR0FBRztBQUFFRixJQUFBQTtBQUFGLEdBQWhCO0FBQ0FFLEVBQUFBLE9BQU8sQ0FBQ0MsSUFBUixHQUFlRixRQUFRLEdBQUdBLFFBQVEsQ0FBQ0UsSUFBWixHQUFtQkQsT0FBMUM7QUFDQUEsRUFBQUEsT0FBTyxDQUFDRSxJQUFSLEdBQWVILFFBQVEsSUFBSUMsT0FBM0I7O0FBQ0EsTUFBSUQsUUFBSixFQUFjO0FBQ1pBLElBQUFBLFFBQVEsQ0FBQ0UsSUFBVCxDQUFjQyxJQUFkLEdBQXFCRixPQUFyQjtBQUNBRCxJQUFBQSxRQUFRLENBQUNFLElBQVQsR0FBZ0JELE9BQWhCO0FBQ0Q7O0FBQ0QsU0FBT0EsT0FBUDtBQUNEOztBQUVELFNBQVNHLE1BQVQsQ0FBZ0JKLFFBQWhCLEVBQTBCO0FBQ3hCQSxFQUFBQSxRQUFRLENBQUNHLElBQVQsQ0FBY0QsSUFBZCxHQUFxQkYsUUFBUSxDQUFDRSxJQUE5QjtBQUNBRixFQUFBQSxRQUFRLENBQUNFLElBQVQsQ0FBY0MsSUFBZCxHQUFxQkgsUUFBUSxDQUFDRyxJQUE5QjtBQUNBLFNBQU9ILFFBQVA7QUFDRDs7QUFFTSxTQUFTSyxLQUFULENBQWVDLEtBQWYsRUFBc0I7QUFDM0IsUUFBTSxHQUFHQyxPQUFILEVBQVlDLFVBQVosSUFBMEJGLEtBQUssQ0FDbENHLEtBRDZCLENBQ3ZCLDJDQUR1QixFQUU3QkMsR0FGNkIsQ0FFekJDLENBQUMsSUFBSUMsUUFBUSxDQUFDRCxDQUFELENBRlksQ0FBaEM7QUFJQSxRQUFNRSxLQUFLLEdBQUcsSUFBSUMsR0FBSixFQUFkO0FBQ0EsTUFBSUMsTUFBTSxHQUFHLENBQWI7QUFDQSxNQUFJQyxNQUFNLEdBQUcsQ0FBYjtBQUNBLE1BQUlDLE9BQU8sR0FBR25CLEdBQUcsQ0FBQyxDQUFELENBQWpCOztBQUVBLFNBQU9rQixNQUFNLElBQUlSLFVBQWpCLEVBQTZCO0FBQzNCLFFBQUlRLE1BQU0sR0FBRyxFQUFULEtBQWdCLENBQXBCLEVBQXVCO0FBQ3JCQyxNQUFBQSxPQUFPLEdBQUdiLE1BQU0sQ0FBQ2EsT0FBTyxDQUFDZCxJQUFSLENBQWFBLElBQWIsQ0FBa0JBLElBQWxCLENBQXVCQSxJQUF2QixDQUE0QkEsSUFBNUIsQ0FBaUNBLElBQWpDLENBQXNDQSxJQUF2QyxDQUFoQjtBQUNBVSxNQUFBQSxLQUFLLENBQUNLLEdBQU4sQ0FBVUgsTUFBVixFQUFrQixDQUFDRixLQUFLLENBQUNNLEdBQU4sQ0FBVUosTUFBVixLQUFxQixDQUF0QixJQUEyQkMsTUFBM0IsR0FBb0NDLE9BQU8sQ0FBQ2xCLEtBQTlEO0FBQ0FrQixNQUFBQSxPQUFPLEdBQUdBLE9BQU8sQ0FBQ2YsSUFBbEI7QUFDRCxLQUpELE1BSU87QUFDTGUsTUFBQUEsT0FBTyxHQUFHbkIsR0FBRyxDQUFDa0IsTUFBRCxFQUFTQyxPQUFPLENBQUNmLElBQWpCLENBQWI7QUFDRDs7QUFDRGMsSUFBQUEsTUFBTTtBQUNORCxJQUFBQSxNQUFNLEdBQUcsQ0FBQ0EsTUFBTSxHQUFHLENBQVYsSUFBZVIsT0FBeEI7QUFDRDs7QUFDRCxTQUFPYSxJQUFJLENBQUNDLEdBQUwsQ0FBUyxHQUFHQyxLQUFLLENBQUNDLElBQU4sQ0FBV1YsS0FBSyxDQUFDVyxNQUFOLEVBQVgsQ0FBWixDQUFQO0FBQ0Q7O0FBRU0sU0FBU0MsS0FBVCxDQUFlbkIsS0FBZixFQUFzQjtBQUMzQixRQUFNLEdBQUdDLE9BQUgsRUFBWUMsVUFBWixJQUEwQkYsS0FBSyxDQUNsQ0csS0FENkIsQ0FDdkIsMkNBRHVCLEVBRTdCQyxHQUY2QixDQUV6QkMsQ0FBQyxJQUFJQyxRQUFRLENBQUNELENBQUQsQ0FGWSxDQUFoQztBQUdBLFNBQU9OLEtBQUssQ0FBRSxHQUFFRSxPQUFRLGtDQUFpQ0MsVUFBVSxHQUFHLEdBQUksRUFBOUQsQ0FBWjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYWRkKHZhbHVlLCBwb3NpdGlvbikge1xuICBjb25zdCBuZXdJdGVtID0geyB2YWx1ZSB9O1xuICBuZXdJdGVtLm5leHQgPSBwb3NpdGlvbiA/IHBvc2l0aW9uLm5leHQgOiBuZXdJdGVtO1xuICBuZXdJdGVtLnByZXYgPSBwb3NpdGlvbiB8fCBuZXdJdGVtO1xuICBpZiAocG9zaXRpb24pIHtcbiAgICBwb3NpdGlvbi5uZXh0LnByZXYgPSBuZXdJdGVtO1xuICAgIHBvc2l0aW9uLm5leHQgPSBuZXdJdGVtO1xuICB9XG4gIHJldHVybiBuZXdJdGVtO1xufVxuXG5mdW5jdGlvbiByZW1vdmUocG9zaXRpb24pIHtcbiAgcG9zaXRpb24ucHJldi5uZXh0ID0gcG9zaXRpb24ubmV4dDtcbiAgcG9zaXRpb24ubmV4dC5wcmV2ID0gcG9zaXRpb24ucHJldjtcbiAgcmV0dXJuIHBvc2l0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDEoaW5wdXQpIHtcbiAgY29uc3QgWywgcGxheWVycywgbGFzdE1hcmJsZV0gPSBpbnB1dFxuICAgIC5tYXRjaCgvKFxcZCspIHBsYXllcnM7IGxhc3QgbWFyYmxlIGlzIHdvcnRoIChcXGQrKS8pXG4gICAgLm1hcCh4ID0+IHBhcnNlSW50KHgpKTtcblxuICBjb25zdCBzY29yZSA9IG5ldyBNYXAoKTtcbiAgbGV0IHBsYXllciA9IDA7XG4gIGxldCBtYXJibGUgPSAxO1xuICBsZXQgcG9pbnRlciA9IGFkZCgwKTtcblxuICB3aGlsZSAobWFyYmxlIDw9IGxhc3RNYXJibGUpIHtcbiAgICBpZiAobWFyYmxlICUgMjMgPT09IDApIHtcbiAgICAgIHBvaW50ZXIgPSByZW1vdmUocG9pbnRlci5wcmV2LnByZXYucHJldi5wcmV2LnByZXYucHJldi5wcmV2KTtcbiAgICAgIHNjb3JlLnNldChwbGF5ZXIsIChzY29yZS5nZXQocGxheWVyKSB8fCAwKSArIG1hcmJsZSArIHBvaW50ZXIudmFsdWUpO1xuICAgICAgcG9pbnRlciA9IHBvaW50ZXIubmV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9pbnRlciA9IGFkZChtYXJibGUsIHBvaW50ZXIubmV4dCk7XG4gICAgfVxuICAgIG1hcmJsZSsrO1xuICAgIHBsYXllciA9IChwbGF5ZXIgKyAxKSAlIHBsYXllcnM7XG4gIH1cbiAgcmV0dXJuIE1hdGgubWF4KC4uLkFycmF5LmZyb20oc2NvcmUudmFsdWVzKCkpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnQyKGlucHV0KSB7XG4gIGNvbnN0IFssIHBsYXllcnMsIGxhc3RNYXJibGVdID0gaW5wdXRcbiAgICAubWF0Y2goLyhcXGQrKSBwbGF5ZXJzOyBsYXN0IG1hcmJsZSBpcyB3b3J0aCAoXFxkKykvKVxuICAgIC5tYXAoeCA9PiBwYXJzZUludCh4KSk7XG4gIHJldHVybiBwYXJ0MShgJHtwbGF5ZXJzfSBwbGF5ZXJzOyBsYXN0IG1hcmJsZSBpcyB3b3J0aCAke2xhc3RNYXJibGUgKiAxMDB9YCk7XG59XG4iXX0=