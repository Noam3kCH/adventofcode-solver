{"version":3,"sources":["day15.js"],"names":["day","input","add","digits","param","i","length","sum","pass","Math","floor","parseMap","s","p1","p2","split","map","x","reduce","obj","pair","parseInt","objMap","fn","Object","keys","result","key","ingredients","match","part1","part2","spoons","Array","fill","prev","amounts","index","property","value","properties","filter","max","calories"],"mappings":"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","sourcesContent":["export function day(input) {\n  function add(digits, param, i) {\n    i = i || 0;\n    if (i < digits.length) {\n      const sum = digits[i] + param;\n      const pass = Math.floor(sum / 101);\n      digits[i] = sum % 101;\n      return pass ? add(digits, pass, i + 1) : digits;\n    }\n  }\n\n  function parseMap(s, p1, p2) {\n    return s\n      .split(p1)\n      .map(x => x.split(p2))\n      .reduce((obj, pair) => ({ ...obj, [pair[0]]: parseInt(pair[1]) }), {});\n  }\n\n  function objMap(obj, fn) {\n    return Object.keys(obj).reduce((result, key) => {\n      return { ...result, [key]: fn(obj[key], key) };\n    }, {});\n  }\n\n  const ingredients = input\n    .split('\\n')\n    .map(x => x.match(/^.*: (.*)$/))\n    .map(x => parseMap(x[1], ', ', ' '));\n\n  let part1 = 0,\n    part2 = 0;\n  const spoons = new Array(ingredients.length).fill(0);\n  while (add(spoons, 100)) {\n    if (spoons.reduce((prev, x) => prev + x) === 100) {\n      const amounts = ingredients.map((x, index) =>\n        objMap(x, property => property * spoons[index]),\n      );\n      const sum = amounts.reduce((prev, x) =>\n        objMap(x, (value, key) => prev[key] + value),\n      );\n      const properties = Object.keys(sum).filter(x => x !== 'calories');\n      const result = properties\n        .map(x => Math.max(0, sum[x]))\n        .reduce((prev, x) => prev * x);\n\n      part1 = Math.max(part1, result);\n      if (sum.calories === 500) {\n        part2 = Math.max(part2, result);\n      }\n    }\n  }\n\n  return { part1, part2 };\n}\n"]}