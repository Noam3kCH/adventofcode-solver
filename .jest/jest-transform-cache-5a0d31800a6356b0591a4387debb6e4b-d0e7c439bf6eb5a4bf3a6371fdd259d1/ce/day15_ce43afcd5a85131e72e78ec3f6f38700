1491584d319c39fbbf76f52026496cf2
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.day = day;

function day(input) {
  function add(digits, param, i) {
    i = i || 0;

    if (i < digits.length) {
      const sum = digits[i] + param;
      const pass = Math.floor(sum / 101);
      digits[i] = sum % 101;
      return pass ? add(digits, pass, i + 1) : digits;
    }
  }

  function parseMap(s, p1, p2) {
    return s.split(p1).map(x => x.split(p2)).reduce((obj, pair) => ({ ...obj,
      [pair[0]]: parseInt(pair[1])
    }), {});
  }

  function objMap(obj, fn) {
    return Object.keys(obj).reduce((result, key) => {
      return { ...result,
        [key]: fn(obj[key], key)
      };
    }, {});
  }

  const ingredients = input.split('\n').map(x => x.match(/^.*: (.*)$/)).map(x => parseMap(x[1], ', ', ' '));
  let part1 = 0,
      part2 = 0;
  const spoons = new Array(ingredients.length).fill(0);

  while (add(spoons, 100)) {
    if (spoons.reduce((prev, x) => prev + x) === 100) {
      const amounts = ingredients.map((x, index) => objMap(x, property => property * spoons[index]));
      const sum = amounts.reduce((prev, x) => objMap(x, (value, key) => prev[key] + value));
      const properties = Object.keys(sum).filter(x => x !== 'calories');
      const result = properties.map(x => Math.max(0, sum[x])).reduce((prev, x) => prev * x);
      part1 = Math.max(part1, result);

      if (sum.calories === 500) {
        part2 = Math.max(part2, result);
      }
    }
  }

  return {
    part1,
    part2
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE1LmpzIl0sIm5hbWVzIjpbImRheSIsImlucHV0IiwiYWRkIiwiZGlnaXRzIiwicGFyYW0iLCJpIiwibGVuZ3RoIiwic3VtIiwicGFzcyIsIk1hdGgiLCJmbG9vciIsInBhcnNlTWFwIiwicyIsInAxIiwicDIiLCJzcGxpdCIsIm1hcCIsIngiLCJyZWR1Y2UiLCJvYmoiLCJwYWlyIiwicGFyc2VJbnQiLCJvYmpNYXAiLCJmbiIsIk9iamVjdCIsImtleXMiLCJyZXN1bHQiLCJrZXkiLCJpbmdyZWRpZW50cyIsIm1hdGNoIiwicGFydDEiLCJwYXJ0MiIsInNwb29ucyIsIkFycmF5IiwiZmlsbCIsInByZXYiLCJhbW91bnRzIiwiaW5kZXgiLCJwcm9wZXJ0eSIsInZhbHVlIiwicHJvcGVydGllcyIsImZpbHRlciIsIm1heCIsImNhbG9yaWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU8sU0FBU0EsR0FBVCxDQUFhQyxLQUFiLEVBQW9CO0FBQ3pCLFdBQVNDLEdBQVQsQ0FBYUMsTUFBYixFQUFxQkMsS0FBckIsRUFBNEJDLENBQTVCLEVBQStCO0FBQzdCQSxJQUFBQSxDQUFDLEdBQUdBLENBQUMsSUFBSSxDQUFUOztBQUNBLFFBQUlBLENBQUMsR0FBR0YsTUFBTSxDQUFDRyxNQUFmLEVBQXVCO0FBQ3JCLFlBQU1DLEdBQUcsR0FBR0osTUFBTSxDQUFDRSxDQUFELENBQU4sR0FBWUQsS0FBeEI7QUFDQSxZQUFNSSxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxHQUFHLEdBQUcsR0FBakIsQ0FBYjtBQUNBSixNQUFBQSxNQUFNLENBQUNFLENBQUQsQ0FBTixHQUFZRSxHQUFHLEdBQUcsR0FBbEI7QUFDQSxhQUFPQyxJQUFJLEdBQUdOLEdBQUcsQ0FBQ0MsTUFBRCxFQUFTSyxJQUFULEVBQWVILENBQUMsR0FBRyxDQUFuQixDQUFOLEdBQThCRixNQUF6QztBQUNEO0FBQ0Y7O0FBRUQsV0FBU1EsUUFBVCxDQUFrQkMsQ0FBbEIsRUFBcUJDLEVBQXJCLEVBQXlCQyxFQUF6QixFQUE2QjtBQUMzQixXQUFPRixDQUFDLENBQ0xHLEtBREksQ0FDRUYsRUFERixFQUVKRyxHQUZJLENBRUFDLENBQUMsSUFBSUEsQ0FBQyxDQUFDRixLQUFGLENBQVFELEVBQVIsQ0FGTCxFQUdKSSxNQUhJLENBR0csQ0FBQ0MsR0FBRCxFQUFNQyxJQUFOLE1BQWdCLEVBQUUsR0FBR0QsR0FBTDtBQUFVLE9BQUNDLElBQUksQ0FBQyxDQUFELENBQUwsR0FBV0MsUUFBUSxDQUFDRCxJQUFJLENBQUMsQ0FBRCxDQUFMO0FBQTdCLEtBQWhCLENBSEgsRUFHOEQsRUFIOUQsQ0FBUDtBQUlEOztBQUVELFdBQVNFLE1BQVQsQ0FBZ0JILEdBQWhCLEVBQXFCSSxFQUFyQixFQUF5QjtBQUN2QixXQUFPQyxNQUFNLENBQUNDLElBQVAsQ0FBWU4sR0FBWixFQUFpQkQsTUFBakIsQ0FBd0IsQ0FBQ1EsTUFBRCxFQUFTQyxHQUFULEtBQWlCO0FBQzlDLGFBQU8sRUFBRSxHQUFHRCxNQUFMO0FBQWEsU0FBQ0MsR0FBRCxHQUFPSixFQUFFLENBQUNKLEdBQUcsQ0FBQ1EsR0FBRCxDQUFKLEVBQVdBLEdBQVg7QUFBdEIsT0FBUDtBQUNELEtBRk0sRUFFSixFQUZJLENBQVA7QUFHRDs7QUFFRCxRQUFNQyxXQUFXLEdBQUczQixLQUFLLENBQ3RCYyxLQURpQixDQUNYLElBRFcsRUFFakJDLEdBRmlCLENBRWJDLENBQUMsSUFBSUEsQ0FBQyxDQUFDWSxLQUFGLENBQVEsWUFBUixDQUZRLEVBR2pCYixHQUhpQixDQUdiQyxDQUFDLElBQUlOLFFBQVEsQ0FBQ00sQ0FBQyxDQUFDLENBQUQsQ0FBRixFQUFPLElBQVAsRUFBYSxHQUFiLENBSEEsQ0FBcEI7QUFLQSxNQUFJYSxLQUFLLEdBQUcsQ0FBWjtBQUFBLE1BQ0VDLEtBQUssR0FBRyxDQURWO0FBRUEsUUFBTUMsTUFBTSxHQUFHLElBQUlDLEtBQUosQ0FBVUwsV0FBVyxDQUFDdEIsTUFBdEIsRUFBOEI0QixJQUE5QixDQUFtQyxDQUFuQyxDQUFmOztBQUNBLFNBQU9oQyxHQUFHLENBQUM4QixNQUFELEVBQVMsR0FBVCxDQUFWLEVBQXlCO0FBQ3ZCLFFBQUlBLE1BQU0sQ0FBQ2QsTUFBUCxDQUFjLENBQUNpQixJQUFELEVBQU9sQixDQUFQLEtBQWFrQixJQUFJLEdBQUdsQixDQUFsQyxNQUF5QyxHQUE3QyxFQUFrRDtBQUNoRCxZQUFNbUIsT0FBTyxHQUFHUixXQUFXLENBQUNaLEdBQVosQ0FBZ0IsQ0FBQ0MsQ0FBRCxFQUFJb0IsS0FBSixLQUM5QmYsTUFBTSxDQUFDTCxDQUFELEVBQUlxQixRQUFRLElBQUlBLFFBQVEsR0FBR04sTUFBTSxDQUFDSyxLQUFELENBQWpDLENBRFEsQ0FBaEI7QUFHQSxZQUFNOUIsR0FBRyxHQUFHNkIsT0FBTyxDQUFDbEIsTUFBUixDQUFlLENBQUNpQixJQUFELEVBQU9sQixDQUFQLEtBQ3pCSyxNQUFNLENBQUNMLENBQUQsRUFBSSxDQUFDc0IsS0FBRCxFQUFRWixHQUFSLEtBQWdCUSxJQUFJLENBQUNSLEdBQUQsQ0FBSixHQUFZWSxLQUFoQyxDQURJLENBQVo7QUFHQSxZQUFNQyxVQUFVLEdBQUdoQixNQUFNLENBQUNDLElBQVAsQ0FBWWxCLEdBQVosRUFBaUJrQyxNQUFqQixDQUF3QnhCLENBQUMsSUFBSUEsQ0FBQyxLQUFLLFVBQW5DLENBQW5CO0FBQ0EsWUFBTVMsTUFBTSxHQUFHYyxVQUFVLENBQ3RCeEIsR0FEWSxDQUNSQyxDQUFDLElBQUlSLElBQUksQ0FBQ2lDLEdBQUwsQ0FBUyxDQUFULEVBQVluQyxHQUFHLENBQUNVLENBQUQsQ0FBZixDQURHLEVBRVpDLE1BRlksQ0FFTCxDQUFDaUIsSUFBRCxFQUFPbEIsQ0FBUCxLQUFha0IsSUFBSSxHQUFHbEIsQ0FGZixDQUFmO0FBSUFhLE1BQUFBLEtBQUssR0FBR3JCLElBQUksQ0FBQ2lDLEdBQUwsQ0FBU1osS0FBVCxFQUFnQkosTUFBaEIsQ0FBUjs7QUFDQSxVQUFJbkIsR0FBRyxDQUFDb0MsUUFBSixLQUFpQixHQUFyQixFQUEwQjtBQUN4QlosUUFBQUEsS0FBSyxHQUFHdEIsSUFBSSxDQUFDaUMsR0FBTCxDQUFTWCxLQUFULEVBQWdCTCxNQUFoQixDQUFSO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQU87QUFBRUksSUFBQUEsS0FBRjtBQUFTQyxJQUFBQTtBQUFULEdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBkYXkoaW5wdXQpIHtcbiAgZnVuY3Rpb24gYWRkKGRpZ2l0cywgcGFyYW0sIGkpIHtcbiAgICBpID0gaSB8fCAwO1xuICAgIGlmIChpIDwgZGlnaXRzLmxlbmd0aCkge1xuICAgICAgY29uc3Qgc3VtID0gZGlnaXRzW2ldICsgcGFyYW07XG4gICAgICBjb25zdCBwYXNzID0gTWF0aC5mbG9vcihzdW0gLyAxMDEpO1xuICAgICAgZGlnaXRzW2ldID0gc3VtICUgMTAxO1xuICAgICAgcmV0dXJuIHBhc3MgPyBhZGQoZGlnaXRzLCBwYXNzLCBpICsgMSkgOiBkaWdpdHM7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VNYXAocywgcDEsIHAyKSB7XG4gICAgcmV0dXJuIHNcbiAgICAgIC5zcGxpdChwMSlcbiAgICAgIC5tYXAoeCA9PiB4LnNwbGl0KHAyKSlcbiAgICAgIC5yZWR1Y2UoKG9iaiwgcGFpcikgPT4gKHsgLi4ub2JqLCBbcGFpclswXV06IHBhcnNlSW50KHBhaXJbMV0pIH0pLCB7fSk7XG4gIH1cblxuICBmdW5jdGlvbiBvYmpNYXAob2JqLCBmbikge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopLnJlZHVjZSgocmVzdWx0LCBrZXkpID0+IHtcbiAgICAgIHJldHVybiB7IC4uLnJlc3VsdCwgW2tleV06IGZuKG9ialtrZXldLCBrZXkpIH07XG4gICAgfSwge30pO1xuICB9XG5cbiAgY29uc3QgaW5ncmVkaWVudHMgPSBpbnB1dFxuICAgIC5zcGxpdCgnXFxuJylcbiAgICAubWFwKHggPT4geC5tYXRjaCgvXi4qOiAoLiopJC8pKVxuICAgIC5tYXAoeCA9PiBwYXJzZU1hcCh4WzFdLCAnLCAnLCAnICcpKTtcblxuICBsZXQgcGFydDEgPSAwLFxuICAgIHBhcnQyID0gMDtcbiAgY29uc3Qgc3Bvb25zID0gbmV3IEFycmF5KGluZ3JlZGllbnRzLmxlbmd0aCkuZmlsbCgwKTtcbiAgd2hpbGUgKGFkZChzcG9vbnMsIDEwMCkpIHtcbiAgICBpZiAoc3Bvb25zLnJlZHVjZSgocHJldiwgeCkgPT4gcHJldiArIHgpID09PSAxMDApIHtcbiAgICAgIGNvbnN0IGFtb3VudHMgPSBpbmdyZWRpZW50cy5tYXAoKHgsIGluZGV4KSA9PlxuICAgICAgICBvYmpNYXAoeCwgcHJvcGVydHkgPT4gcHJvcGVydHkgKiBzcG9vbnNbaW5kZXhdKSxcbiAgICAgICk7XG4gICAgICBjb25zdCBzdW0gPSBhbW91bnRzLnJlZHVjZSgocHJldiwgeCkgPT5cbiAgICAgICAgb2JqTWFwKHgsICh2YWx1ZSwga2V5KSA9PiBwcmV2W2tleV0gKyB2YWx1ZSksXG4gICAgICApO1xuICAgICAgY29uc3QgcHJvcGVydGllcyA9IE9iamVjdC5rZXlzKHN1bSkuZmlsdGVyKHggPT4geCAhPT0gJ2NhbG9yaWVzJyk7XG4gICAgICBjb25zdCByZXN1bHQgPSBwcm9wZXJ0aWVzXG4gICAgICAgIC5tYXAoeCA9PiBNYXRoLm1heCgwLCBzdW1beF0pKVxuICAgICAgICAucmVkdWNlKChwcmV2LCB4KSA9PiBwcmV2ICogeCk7XG5cbiAgICAgIHBhcnQxID0gTWF0aC5tYXgocGFydDEsIHJlc3VsdCk7XG4gICAgICBpZiAoc3VtLmNhbG9yaWVzID09PSA1MDApIHtcbiAgICAgICAgcGFydDIgPSBNYXRoLm1heChwYXJ0MiwgcmVzdWx0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4geyBwYXJ0MSwgcGFydDIgfTtcbn1cbiJdfQ==