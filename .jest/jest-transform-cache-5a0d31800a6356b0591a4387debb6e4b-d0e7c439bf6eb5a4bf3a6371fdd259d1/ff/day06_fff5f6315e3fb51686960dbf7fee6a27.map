{"version":3,"sources":["day06.js"],"names":["distance","a","b","Math","abs","x","y","totalDistance","cell","points","reduce","sum","p","blastSource","distances","map","i","sort","calcBlastSize","size","result","Map","Infinity","src","set","get","Array","from","values","filter","parseInput","input","split","parseInt","max","part1","pop","part2","limit"],"mappings":"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","sourcesContent":["function distance(a, b) {\n  return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);\n}\n\nfunction totalDistance(cell, points) {\n  return points.reduce((sum, p) => sum + distance(cell, p), 0);\n}\n\nfunction blastSource(cell, points) {\n  const distances = points\n    .map((p, i) => ({ i, distance: distance(cell, p) }))\n    .sort((a, b) => a.distance - b.distance);\n  return distances[0].distance < distances[1].distance ? distances[0].i : -1;\n}\n\nfunction calcBlastSize(points, size) {\n  const result = new Map([[-1, Infinity]]);\n  for (let x = -1; x <= size.x; x++) {\n    for (let y = -1; y <= size.y; y++) {\n      const src = blastSource({ x, y }, points);\n      if (x < 0 || y < 0 || x === size.x || y === size.y) {\n        result.set(src, Infinity);\n      } else {\n        result.set(src, (result.get(src) || 0) + 1);\n      }\n    }\n  }\n  return Array.from(result.values()).filter(x => x < Infinity);\n}\n\nfunction parseInput(input) {\n  const points = input\n    .split('\\n')\n    .map(x => x.split(', ').map(x => parseInt(x)))\n    .map(([x, y]) => ({ x, y }));\n  const size = points.reduce(\n    (max, p) => ({ x: Math.max(max.x, p.x), y: Math.max(max.y, p.y) }),\n    { x: 0, y: 0 },\n  );\n  return { points, size };\n}\n\nexport function part1(input) {\n  const { points, size } = parseInput(input);\n  const result = calcBlastSize(points, size);\n  return result.sort((a, b) => a - b).pop();\n}\n\nexport function part2(input, limit = 10000) {\n  const { points, size } = parseInput(input);\n  let result = 0;\n  for (let x = 0; x < size.x; x++) {\n    for (let y = 0; y < size.y; y++) {\n      if (totalDistance({ x, y }, points) < limit) {\n        result++;\n      }\n    }\n  }\n  return result;\n}\n"]}