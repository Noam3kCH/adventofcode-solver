{"version":3,"sources":["day18.js"],"names":["getter","state","p","undefined","parse","input","ops2","debug","ops","snd","p1","sound","set","p2","add","mul","mod","rcv","recovered","jgz","instruction","split","map","str","cmd","p1Str","p2Str","match","parseInt","parse2","send","push","sent","queue","length","shift","Error","part1","commands","execute","run","e","part2","state1","state2","running"],"mappings":"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","sourcesContent":["export function getter(state, p) {\n  if (typeof p === 'string') {\n    if (state[p] === undefined) {\n      state[p] = 0;\n    }\n    return state[p];\n  } else {\n    return p;\n  }\n}\n\nexport function parse(input, ops2 = {}, debug) {\n  const ops = {\n    snd: p1 => state => (state.sound = getter(state, p1)),\n    set: (p1, p2) => state => (state[p1] = getter(state, p2)),\n    add: (p1, p2) => state =>\n      (state[p1] = getter(state, p1) + getter(state, p2)),\n    mul: (p1, p2) => state =>\n      (state[p1] = getter(state, p1) * getter(state, p2)),\n    mod: (p1, p2) => state =>\n      (state[p1] = getter(state, p1) % getter(state, p2)),\n    rcv: p1 => state =>\n      getter(p1) !== 0 ? (state.recovered = state.sound) : null,\n    jgz: (p1, p2) => state =>\n      getter(state, p1) > 0\n        ? (state.instruction += getter(state, p2) - 1)\n        : null,\n    ...ops2,\n  };\n\n  return input.split('\\n').map(str => {\n    const [cmd, p1Str, p2Str] = str.split(' ');\n    const p1 = p1Str.match(/^-?\\d+$/) ? parseInt(p1Str) : p1Str;\n    const p2 = p2Str && p2Str.match(/^-?\\d+$/) ? parseInt(p2Str) : p2Str;\n    return state => (!debug || debug(cmd)) && ops[cmd](p1, p2)(state);\n  });\n}\n\nfunction parse2(input) {\n  return parse(input, {\n    snd: p1 => state => {\n      state.send.push(getter(state, p1));\n      state.sent++;\n    },\n    rcv: p1 => state => {\n      if (state.queue.length > 0) {\n        state[p1] = state.queue.shift();\n      } else {\n        throw new Error('waiting...');\n      }\n    },\n  });\n}\n\nexport function part1(input) {\n  const commands = parse(input);\n  const state = { instruction: 0 };\n  while (state.instruction < commands.length && !state.recovered) {\n    commands[state.instruction](state);\n    state.instruction++;\n  }\n  return state.recovered;\n}\n\nfunction execute(commands, state) {\n  let run = 0;\n  try {\n    while (state.instruction < commands.length) {\n      commands[state.instruction](state);\n      state.instruction++;\n      run++;\n    }\n  } catch (e) {\n    //\n  }\n  return run;\n}\n\nexport function part2(input) {\n  const commands = parse2(input);\n  const state1 = { instruction: 0, queue: [], sent: 0, p: 0 };\n  const state2 = { instruction: 0, queue: [], sent: 0, p: 1 };\n  state1.send = state2.queue;\n  state2.send = state1.queue;\n\n  let running = true;\n  while (running) {\n    running = execute(commands, state1) > 0 || execute(commands, state2) > 0;\n  }\n  return state2.sent;\n}\n"]}