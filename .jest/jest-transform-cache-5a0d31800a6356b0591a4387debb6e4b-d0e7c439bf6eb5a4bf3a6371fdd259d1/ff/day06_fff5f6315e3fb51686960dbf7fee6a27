f4e993e0c2fadbdae2dbadbc42ef29a6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function distance(a, b) {
  return Math.abs(a.x - b.x) + Math.abs(a.y - b.y);
}

function totalDistance(cell, points) {
  return points.reduce((sum, p) => sum + distance(cell, p), 0);
}

function blastSource(cell, points) {
  const distances = points.map((p, i) => ({
    i,
    distance: distance(cell, p)
  })).sort((a, b) => a.distance - b.distance);
  return distances[0].distance < distances[1].distance ? distances[0].i : -1;
}

function calcBlastSize(points, size) {
  const result = new Map([[-1, Infinity]]);

  for (let x = -1; x <= size.x; x++) {
    for (let y = -1; y <= size.y; y++) {
      const src = blastSource({
        x,
        y
      }, points);

      if (x < 0 || y < 0 || x === size.x || y === size.y) {
        result.set(src, Infinity);
      } else {
        result.set(src, (result.get(src) || 0) + 1);
      }
    }
  }

  return Array.from(result.values()).filter(x => x < Infinity);
}

function parseInput(input) {
  const points = input.split('\n').map(x => x.split(', ').map(x => parseInt(x))).map(([x, y]) => ({
    x,
    y
  }));
  const size = points.reduce((max, p) => ({
    x: Math.max(max.x, p.x),
    y: Math.max(max.y, p.y)
  }), {
    x: 0,
    y: 0
  });
  return {
    points,
    size
  };
}

function part1(input) {
  const {
    points,
    size
  } = parseInput(input);
  const result = calcBlastSize(points, size);
  return result.sort((a, b) => a - b).pop();
}

function part2(input, limit = 10000) {
  const {
    points,
    size
  } = parseInput(input);
  let result = 0;

  for (let x = 0; x < size.x; x++) {
    for (let y = 0; y < size.y; y++) {
      if (totalDistance({
        x,
        y
      }, points) < limit) {
        result++;
      }
    }
  }

  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTA2LmpzIl0sIm5hbWVzIjpbImRpc3RhbmNlIiwiYSIsImIiLCJNYXRoIiwiYWJzIiwieCIsInkiLCJ0b3RhbERpc3RhbmNlIiwiY2VsbCIsInBvaW50cyIsInJlZHVjZSIsInN1bSIsInAiLCJibGFzdFNvdXJjZSIsImRpc3RhbmNlcyIsIm1hcCIsImkiLCJzb3J0IiwiY2FsY0JsYXN0U2l6ZSIsInNpemUiLCJyZXN1bHQiLCJNYXAiLCJJbmZpbml0eSIsInNyYyIsInNldCIsImdldCIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsImZpbHRlciIsInBhcnNlSW5wdXQiLCJpbnB1dCIsInNwbGl0IiwicGFyc2VJbnQiLCJtYXgiLCJwYXJ0MSIsInBvcCIsInBhcnQyIiwibGltaXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsU0FBU0EsUUFBVCxDQUFrQkMsQ0FBbEIsRUFBcUJDLENBQXJCLEVBQXdCO0FBQ3RCLFNBQU9DLElBQUksQ0FBQ0MsR0FBTCxDQUFTSCxDQUFDLENBQUNJLENBQUYsR0FBTUgsQ0FBQyxDQUFDRyxDQUFqQixJQUFzQkYsSUFBSSxDQUFDQyxHQUFMLENBQVNILENBQUMsQ0FBQ0ssQ0FBRixHQUFNSixDQUFDLENBQUNJLENBQWpCLENBQTdCO0FBQ0Q7O0FBRUQsU0FBU0MsYUFBVCxDQUF1QkMsSUFBdkIsRUFBNkJDLE1BQTdCLEVBQXFDO0FBQ25DLFNBQU9BLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLENBQUNDLEdBQUQsRUFBTUMsQ0FBTixLQUFZRCxHQUFHLEdBQUdYLFFBQVEsQ0FBQ1EsSUFBRCxFQUFPSSxDQUFQLENBQXhDLEVBQW1ELENBQW5ELENBQVA7QUFDRDs7QUFFRCxTQUFTQyxXQUFULENBQXFCTCxJQUFyQixFQUEyQkMsTUFBM0IsRUFBbUM7QUFDakMsUUFBTUssU0FBUyxHQUFHTCxNQUFNLENBQ3JCTSxHQURlLENBQ1gsQ0FBQ0gsQ0FBRCxFQUFJSSxDQUFKLE1BQVc7QUFBRUEsSUFBQUEsQ0FBRjtBQUFLaEIsSUFBQUEsUUFBUSxFQUFFQSxRQUFRLENBQUNRLElBQUQsRUFBT0ksQ0FBUDtBQUF2QixHQUFYLENBRFcsRUFFZkssSUFGZSxDQUVWLENBQUNoQixDQUFELEVBQUlDLENBQUosS0FBVUQsQ0FBQyxDQUFDRCxRQUFGLEdBQWFFLENBQUMsQ0FBQ0YsUUFGZixDQUFsQjtBQUdBLFNBQU9jLFNBQVMsQ0FBQyxDQUFELENBQVQsQ0FBYWQsUUFBYixHQUF3QmMsU0FBUyxDQUFDLENBQUQsQ0FBVCxDQUFhZCxRQUFyQyxHQUFnRGMsU0FBUyxDQUFDLENBQUQsQ0FBVCxDQUFhRSxDQUE3RCxHQUFpRSxDQUFDLENBQXpFO0FBQ0Q7O0FBRUQsU0FBU0UsYUFBVCxDQUF1QlQsTUFBdkIsRUFBK0JVLElBQS9CLEVBQXFDO0FBQ25DLFFBQU1DLE1BQU0sR0FBRyxJQUFJQyxHQUFKLENBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBRixFQUFLQyxRQUFMLENBQUQsQ0FBUixDQUFmOztBQUNBLE9BQUssSUFBSWpCLENBQUMsR0FBRyxDQUFDLENBQWQsRUFBaUJBLENBQUMsSUFBSWMsSUFBSSxDQUFDZCxDQUEzQixFQUE4QkEsQ0FBQyxFQUEvQixFQUFtQztBQUNqQyxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFDLENBQWQsRUFBaUJBLENBQUMsSUFBSWEsSUFBSSxDQUFDYixDQUEzQixFQUE4QkEsQ0FBQyxFQUEvQixFQUFtQztBQUNqQyxZQUFNaUIsR0FBRyxHQUFHVixXQUFXLENBQUM7QUFBRVIsUUFBQUEsQ0FBRjtBQUFLQyxRQUFBQTtBQUFMLE9BQUQsRUFBV0csTUFBWCxDQUF2Qjs7QUFDQSxVQUFJSixDQUFDLEdBQUcsQ0FBSixJQUFTQyxDQUFDLEdBQUcsQ0FBYixJQUFrQkQsQ0FBQyxLQUFLYyxJQUFJLENBQUNkLENBQTdCLElBQWtDQyxDQUFDLEtBQUthLElBQUksQ0FBQ2IsQ0FBakQsRUFBb0Q7QUFDbERjLFFBQUFBLE1BQU0sQ0FBQ0ksR0FBUCxDQUFXRCxHQUFYLEVBQWdCRCxRQUFoQjtBQUNELE9BRkQsTUFFTztBQUNMRixRQUFBQSxNQUFNLENBQUNJLEdBQVAsQ0FBV0QsR0FBWCxFQUFnQixDQUFDSCxNQUFNLENBQUNLLEdBQVAsQ0FBV0YsR0FBWCxLQUFtQixDQUFwQixJQUF5QixDQUF6QztBQUNEO0FBQ0Y7QUFDRjs7QUFDRCxTQUFPRyxLQUFLLENBQUNDLElBQU4sQ0FBV1AsTUFBTSxDQUFDUSxNQUFQLEVBQVgsRUFBNEJDLE1BQTVCLENBQW1DeEIsQ0FBQyxJQUFJQSxDQUFDLEdBQUdpQixRQUE1QyxDQUFQO0FBQ0Q7O0FBRUQsU0FBU1EsVUFBVCxDQUFvQkMsS0FBcEIsRUFBMkI7QUFDekIsUUFBTXRCLE1BQU0sR0FBR3NCLEtBQUssQ0FDakJDLEtBRFksQ0FDTixJQURNLEVBRVpqQixHQUZZLENBRVJWLENBQUMsSUFBSUEsQ0FBQyxDQUFDMkIsS0FBRixDQUFRLElBQVIsRUFBY2pCLEdBQWQsQ0FBa0JWLENBQUMsSUFBSTRCLFFBQVEsQ0FBQzVCLENBQUQsQ0FBL0IsQ0FGRyxFQUdaVSxHQUhZLENBR1IsQ0FBQyxDQUFDVixDQUFELEVBQUlDLENBQUosQ0FBRCxNQUFhO0FBQUVELElBQUFBLENBQUY7QUFBS0MsSUFBQUE7QUFBTCxHQUFiLENBSFEsQ0FBZjtBQUlBLFFBQU1hLElBQUksR0FBR1YsTUFBTSxDQUFDQyxNQUFQLENBQ1gsQ0FBQ3dCLEdBQUQsRUFBTXRCLENBQU4sTUFBYTtBQUFFUCxJQUFBQSxDQUFDLEVBQUVGLElBQUksQ0FBQytCLEdBQUwsQ0FBU0EsR0FBRyxDQUFDN0IsQ0FBYixFQUFnQk8sQ0FBQyxDQUFDUCxDQUFsQixDQUFMO0FBQTJCQyxJQUFBQSxDQUFDLEVBQUVILElBQUksQ0FBQytCLEdBQUwsQ0FBU0EsR0FBRyxDQUFDNUIsQ0FBYixFQUFnQk0sQ0FBQyxDQUFDTixDQUFsQjtBQUE5QixHQUFiLENBRFcsRUFFWDtBQUFFRCxJQUFBQSxDQUFDLEVBQUUsQ0FBTDtBQUFRQyxJQUFBQSxDQUFDLEVBQUU7QUFBWCxHQUZXLENBQWI7QUFJQSxTQUFPO0FBQUVHLElBQUFBLE1BQUY7QUFBVVUsSUFBQUE7QUFBVixHQUFQO0FBQ0Q7O0FBRU0sU0FBU2dCLEtBQVQsQ0FBZUosS0FBZixFQUFzQjtBQUMzQixRQUFNO0FBQUV0QixJQUFBQSxNQUFGO0FBQVVVLElBQUFBO0FBQVYsTUFBbUJXLFVBQVUsQ0FBQ0MsS0FBRCxDQUFuQztBQUNBLFFBQU1YLE1BQU0sR0FBR0YsYUFBYSxDQUFDVCxNQUFELEVBQVNVLElBQVQsQ0FBNUI7QUFDQSxTQUFPQyxNQUFNLENBQUNILElBQVAsQ0FBWSxDQUFDaEIsQ0FBRCxFQUFJQyxDQUFKLEtBQVVELENBQUMsR0FBR0MsQ0FBMUIsRUFBNkJrQyxHQUE3QixFQUFQO0FBQ0Q7O0FBRU0sU0FBU0MsS0FBVCxDQUFlTixLQUFmLEVBQXNCTyxLQUFLLEdBQUcsS0FBOUIsRUFBcUM7QUFDMUMsUUFBTTtBQUFFN0IsSUFBQUEsTUFBRjtBQUFVVSxJQUFBQTtBQUFWLE1BQW1CVyxVQUFVLENBQUNDLEtBQUQsQ0FBbkM7QUFDQSxNQUFJWCxNQUFNLEdBQUcsQ0FBYjs7QUFDQSxPQUFLLElBQUlmLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdjLElBQUksQ0FBQ2QsQ0FBekIsRUFBNEJBLENBQUMsRUFBN0IsRUFBaUM7QUFDL0IsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHYSxJQUFJLENBQUNiLENBQXpCLEVBQTRCQSxDQUFDLEVBQTdCLEVBQWlDO0FBQy9CLFVBQUlDLGFBQWEsQ0FBQztBQUFFRixRQUFBQSxDQUFGO0FBQUtDLFFBQUFBO0FBQUwsT0FBRCxFQUFXRyxNQUFYLENBQWIsR0FBa0M2QixLQUF0QyxFQUE2QztBQUMzQ2xCLFFBQUFBLE1BQU07QUFDUDtBQUNGO0FBQ0Y7O0FBQ0QsU0FBT0EsTUFBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZGlzdGFuY2UoYSwgYikge1xuICByZXR1cm4gTWF0aC5hYnMoYS54IC0gYi54KSArIE1hdGguYWJzKGEueSAtIGIueSk7XG59XG5cbmZ1bmN0aW9uIHRvdGFsRGlzdGFuY2UoY2VsbCwgcG9pbnRzKSB7XG4gIHJldHVybiBwb2ludHMucmVkdWNlKChzdW0sIHApID0+IHN1bSArIGRpc3RhbmNlKGNlbGwsIHApLCAwKTtcbn1cblxuZnVuY3Rpb24gYmxhc3RTb3VyY2UoY2VsbCwgcG9pbnRzKSB7XG4gIGNvbnN0IGRpc3RhbmNlcyA9IHBvaW50c1xuICAgIC5tYXAoKHAsIGkpID0+ICh7IGksIGRpc3RhbmNlOiBkaXN0YW5jZShjZWxsLCBwKSB9KSlcbiAgICAuc29ydCgoYSwgYikgPT4gYS5kaXN0YW5jZSAtIGIuZGlzdGFuY2UpO1xuICByZXR1cm4gZGlzdGFuY2VzWzBdLmRpc3RhbmNlIDwgZGlzdGFuY2VzWzFdLmRpc3RhbmNlID8gZGlzdGFuY2VzWzBdLmkgOiAtMTtcbn1cblxuZnVuY3Rpb24gY2FsY0JsYXN0U2l6ZShwb2ludHMsIHNpemUpIHtcbiAgY29uc3QgcmVzdWx0ID0gbmV3IE1hcChbWy0xLCBJbmZpbml0eV1dKTtcbiAgZm9yIChsZXQgeCA9IC0xOyB4IDw9IHNpemUueDsgeCsrKSB7XG4gICAgZm9yIChsZXQgeSA9IC0xOyB5IDw9IHNpemUueTsgeSsrKSB7XG4gICAgICBjb25zdCBzcmMgPSBibGFzdFNvdXJjZSh7IHgsIHkgfSwgcG9pbnRzKTtcbiAgICAgIGlmICh4IDwgMCB8fCB5IDwgMCB8fCB4ID09PSBzaXplLnggfHwgeSA9PT0gc2l6ZS55KSB7XG4gICAgICAgIHJlc3VsdC5zZXQoc3JjLCBJbmZpbml0eSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQuc2V0KHNyYywgKHJlc3VsdC5nZXQoc3JjKSB8fCAwKSArIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gQXJyYXkuZnJvbShyZXN1bHQudmFsdWVzKCkpLmZpbHRlcih4ID0+IHggPCBJbmZpbml0eSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlSW5wdXQoaW5wdXQpIHtcbiAgY29uc3QgcG9pbnRzID0gaW5wdXRcbiAgICAuc3BsaXQoJ1xcbicpXG4gICAgLm1hcCh4ID0+IHguc3BsaXQoJywgJykubWFwKHggPT4gcGFyc2VJbnQoeCkpKVxuICAgIC5tYXAoKFt4LCB5XSkgPT4gKHsgeCwgeSB9KSk7XG4gIGNvbnN0IHNpemUgPSBwb2ludHMucmVkdWNlKFxuICAgIChtYXgsIHApID0+ICh7IHg6IE1hdGgubWF4KG1heC54LCBwLngpLCB5OiBNYXRoLm1heChtYXgueSwgcC55KSB9KSxcbiAgICB7IHg6IDAsIHk6IDAgfSxcbiAgKTtcbiAgcmV0dXJuIHsgcG9pbnRzLCBzaXplIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MShpbnB1dCkge1xuICBjb25zdCB7IHBvaW50cywgc2l6ZSB9ID0gcGFyc2VJbnB1dChpbnB1dCk7XG4gIGNvbnN0IHJlc3VsdCA9IGNhbGNCbGFzdFNpemUocG9pbnRzLCBzaXplKTtcbiAgcmV0dXJuIHJlc3VsdC5zb3J0KChhLCBiKSA9PiBhIC0gYikucG9wKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MihpbnB1dCwgbGltaXQgPSAxMDAwMCkge1xuICBjb25zdCB7IHBvaW50cywgc2l6ZSB9ID0gcGFyc2VJbnB1dChpbnB1dCk7XG4gIGxldCByZXN1bHQgPSAwO1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IHNpemUueDsgeCsrKSB7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBzaXplLnk7IHkrKykge1xuICAgICAgaWYgKHRvdGFsRGlzdGFuY2UoeyB4LCB5IH0sIHBvaW50cykgPCBsaW1pdCkge1xuICAgICAgICByZXN1bHQrKztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdfQ==