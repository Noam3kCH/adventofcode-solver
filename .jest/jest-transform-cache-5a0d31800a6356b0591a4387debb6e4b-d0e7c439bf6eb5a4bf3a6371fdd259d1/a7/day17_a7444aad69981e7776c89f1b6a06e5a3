8bfafafd72e373fc80fcca57403034a7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part2 = exports.part1 = void 0;

var _md = _interopRequireDefault(require("../utils/md5.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getNeighbors(point, [U, D, L, R]) {
  return [U && {
    x: point.x,
    y: point.y - 1,
    path: point.path + 'U'
  }, D && {
    x: point.x,
    y: point.y + 1,
    path: point.path + 'D'
  }, L && {
    x: point.x - 1,
    y: point.y,
    path: point.path + 'L'
  }, R && {
    x: point.x + 1,
    y: point.y,
    path: point.path + 'R'
  }].filter(p => p && p.x >= 0 && p.y >= 0 && p.x <= 3 && p.y <= 3);
}

function solve(input, shortest = true) {
  let queue = [{
    x: 0,
    y: 0,
    path: ''
  }],
      max = -1;

  while (queue.length > 0) {
    const next = queue.shift();

    if (next.x === 3 && next.y === 3) {
      if (shortest) {
        return next.path;
      } else {
        max = Math.max(max, next.path.length);
      }
    } else {
      const doors = (0, _md.default)(input + next.path).slice(0, 4).split('').map(x => 'bcdef'.includes(x));
      queue = queue.concat(getNeighbors(next, doors));
    }
  }

  return max;
}

const part1 = input => solve(input, true);

exports.part1 = part1;

const part2 = input => solve(input, false);

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE3LmpzIl0sIm5hbWVzIjpbImdldE5laWdoYm9ycyIsInBvaW50IiwiVSIsIkQiLCJMIiwiUiIsIngiLCJ5IiwicGF0aCIsImZpbHRlciIsInAiLCJzb2x2ZSIsImlucHV0Iiwic2hvcnRlc3QiLCJxdWV1ZSIsIm1heCIsImxlbmd0aCIsIm5leHQiLCJzaGlmdCIsIk1hdGgiLCJkb29ycyIsInNsaWNlIiwic3BsaXQiLCJtYXAiLCJpbmNsdWRlcyIsImNvbmNhdCIsInBhcnQxIiwicGFydDIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUVBLFNBQVNBLFlBQVQsQ0FBc0JDLEtBQXRCLEVBQTZCLENBQUNDLENBQUQsRUFBSUMsQ0FBSixFQUFPQyxDQUFQLEVBQVVDLENBQVYsQ0FBN0IsRUFBMkM7QUFDekMsU0FBTyxDQUNMSCxDQUFDLElBQUk7QUFBRUksSUFBQUEsQ0FBQyxFQUFFTCxLQUFLLENBQUNLLENBQVg7QUFBY0MsSUFBQUEsQ0FBQyxFQUFFTixLQUFLLENBQUNNLENBQU4sR0FBVSxDQUEzQjtBQUE4QkMsSUFBQUEsSUFBSSxFQUFFUCxLQUFLLENBQUNPLElBQU4sR0FBYTtBQUFqRCxHQURBLEVBRUxMLENBQUMsSUFBSTtBQUFFRyxJQUFBQSxDQUFDLEVBQUVMLEtBQUssQ0FBQ0ssQ0FBWDtBQUFjQyxJQUFBQSxDQUFDLEVBQUVOLEtBQUssQ0FBQ00sQ0FBTixHQUFVLENBQTNCO0FBQThCQyxJQUFBQSxJQUFJLEVBQUVQLEtBQUssQ0FBQ08sSUFBTixHQUFhO0FBQWpELEdBRkEsRUFHTEosQ0FBQyxJQUFJO0FBQUVFLElBQUFBLENBQUMsRUFBRUwsS0FBSyxDQUFDSyxDQUFOLEdBQVUsQ0FBZjtBQUFrQkMsSUFBQUEsQ0FBQyxFQUFFTixLQUFLLENBQUNNLENBQTNCO0FBQThCQyxJQUFBQSxJQUFJLEVBQUVQLEtBQUssQ0FBQ08sSUFBTixHQUFhO0FBQWpELEdBSEEsRUFJTEgsQ0FBQyxJQUFJO0FBQUVDLElBQUFBLENBQUMsRUFBRUwsS0FBSyxDQUFDSyxDQUFOLEdBQVUsQ0FBZjtBQUFrQkMsSUFBQUEsQ0FBQyxFQUFFTixLQUFLLENBQUNNLENBQTNCO0FBQThCQyxJQUFBQSxJQUFJLEVBQUVQLEtBQUssQ0FBQ08sSUFBTixHQUFhO0FBQWpELEdBSkEsRUFLTEMsTUFMSyxDQUtFQyxDQUFDLElBQUlBLENBQUMsSUFBSUEsQ0FBQyxDQUFDSixDQUFGLElBQU8sQ0FBWixJQUFpQkksQ0FBQyxDQUFDSCxDQUFGLElBQU8sQ0FBeEIsSUFBNkJHLENBQUMsQ0FBQ0osQ0FBRixJQUFPLENBQXBDLElBQXlDSSxDQUFDLENBQUNILENBQUYsSUFBTyxDQUx2RCxDQUFQO0FBTUQ7O0FBRUQsU0FBU0ksS0FBVCxDQUFlQyxLQUFmLEVBQXNCQyxRQUFRLEdBQUcsSUFBakMsRUFBdUM7QUFDckMsTUFBSUMsS0FBSyxHQUFHLENBQUM7QUFBRVIsSUFBQUEsQ0FBQyxFQUFFLENBQUw7QUFBUUMsSUFBQUEsQ0FBQyxFQUFFLENBQVg7QUFBY0MsSUFBQUEsSUFBSSxFQUFFO0FBQXBCLEdBQUQsQ0FBWjtBQUFBLE1BQ0VPLEdBQUcsR0FBRyxDQUFDLENBRFQ7O0FBRUEsU0FBT0QsS0FBSyxDQUFDRSxNQUFOLEdBQWUsQ0FBdEIsRUFBeUI7QUFDdkIsVUFBTUMsSUFBSSxHQUFHSCxLQUFLLENBQUNJLEtBQU4sRUFBYjs7QUFDQSxRQUFJRCxJQUFJLENBQUNYLENBQUwsS0FBVyxDQUFYLElBQWdCVyxJQUFJLENBQUNWLENBQUwsS0FBVyxDQUEvQixFQUFrQztBQUNoQyxVQUFJTSxRQUFKLEVBQWM7QUFDWixlQUFPSSxJQUFJLENBQUNULElBQVo7QUFDRCxPQUZELE1BRU87QUFDTE8sUUFBQUEsR0FBRyxHQUFHSSxJQUFJLENBQUNKLEdBQUwsQ0FBU0EsR0FBVCxFQUFjRSxJQUFJLENBQUNULElBQUwsQ0FBVVEsTUFBeEIsQ0FBTjtBQUNEO0FBQ0YsS0FORCxNQU1PO0FBQ0wsWUFBTUksS0FBSyxHQUFHLGlCQUFJUixLQUFLLEdBQUdLLElBQUksQ0FBQ1QsSUFBakIsRUFDWGEsS0FEVyxDQUNMLENBREssRUFDRixDQURFLEVBRVhDLEtBRlcsQ0FFTCxFQUZLLEVBR1hDLEdBSFcsQ0FHUGpCLENBQUMsSUFBSSxRQUFRa0IsUUFBUixDQUFpQmxCLENBQWpCLENBSEUsQ0FBZDtBQUlBUSxNQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ1csTUFBTixDQUFhekIsWUFBWSxDQUFDaUIsSUFBRCxFQUFPRyxLQUFQLENBQXpCLENBQVI7QUFDRDtBQUNGOztBQUNELFNBQU9MLEdBQVA7QUFDRDs7QUFFTSxNQUFNVyxLQUFLLEdBQUdkLEtBQUssSUFBSUQsS0FBSyxDQUFDQyxLQUFELEVBQVEsSUFBUixDQUE1Qjs7OztBQUNBLE1BQU1lLEtBQUssR0FBR2YsS0FBSyxJQUFJRCxLQUFLLENBQUNDLEtBQUQsRUFBUSxLQUFSLENBQTVCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1kNSBmcm9tICcuLi91dGlscy9tZDUuanMnO1xuXG5mdW5jdGlvbiBnZXROZWlnaGJvcnMocG9pbnQsIFtVLCBELCBMLCBSXSkge1xuICByZXR1cm4gW1xuICAgIFUgJiYgeyB4OiBwb2ludC54LCB5OiBwb2ludC55IC0gMSwgcGF0aDogcG9pbnQucGF0aCArICdVJyB9LFxuICAgIEQgJiYgeyB4OiBwb2ludC54LCB5OiBwb2ludC55ICsgMSwgcGF0aDogcG9pbnQucGF0aCArICdEJyB9LFxuICAgIEwgJiYgeyB4OiBwb2ludC54IC0gMSwgeTogcG9pbnQueSwgcGF0aDogcG9pbnQucGF0aCArICdMJyB9LFxuICAgIFIgJiYgeyB4OiBwb2ludC54ICsgMSwgeTogcG9pbnQueSwgcGF0aDogcG9pbnQucGF0aCArICdSJyB9LFxuICBdLmZpbHRlcihwID0+IHAgJiYgcC54ID49IDAgJiYgcC55ID49IDAgJiYgcC54IDw9IDMgJiYgcC55IDw9IDMpO1xufVxuXG5mdW5jdGlvbiBzb2x2ZShpbnB1dCwgc2hvcnRlc3QgPSB0cnVlKSB7XG4gIGxldCBxdWV1ZSA9IFt7IHg6IDAsIHk6IDAsIHBhdGg6ICcnIH1dLFxuICAgIG1heCA9IC0xO1xuICB3aGlsZSAocXVldWUubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IG5leHQgPSBxdWV1ZS5zaGlmdCgpO1xuICAgIGlmIChuZXh0LnggPT09IDMgJiYgbmV4dC55ID09PSAzKSB7XG4gICAgICBpZiAoc2hvcnRlc3QpIHtcbiAgICAgICAgcmV0dXJuIG5leHQucGF0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgbmV4dC5wYXRoLmxlbmd0aCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRvb3JzID0gbWQ1KGlucHV0ICsgbmV4dC5wYXRoKVxuICAgICAgICAuc2xpY2UoMCwgNClcbiAgICAgICAgLnNwbGl0KCcnKVxuICAgICAgICAubWFwKHggPT4gJ2JjZGVmJy5pbmNsdWRlcyh4KSk7XG4gICAgICBxdWV1ZSA9IHF1ZXVlLmNvbmNhdChnZXROZWlnaGJvcnMobmV4dCwgZG9vcnMpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1heDtcbn1cblxuZXhwb3J0IGNvbnN0IHBhcnQxID0gaW5wdXQgPT4gc29sdmUoaW5wdXQsIHRydWUpO1xuZXhwb3J0IGNvbnN0IHBhcnQyID0gaW5wdXQgPT4gc29sdmUoaW5wdXQsIGZhbHNlKTtcbiJdfQ==