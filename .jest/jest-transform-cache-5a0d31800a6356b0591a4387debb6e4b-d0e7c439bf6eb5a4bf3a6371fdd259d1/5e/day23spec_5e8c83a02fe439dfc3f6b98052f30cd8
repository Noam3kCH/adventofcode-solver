fb4eabf7c947190ae1d2a6b97941996b
"use strict";

var _day = require("./day23.js");

var _readInput = _interopRequireDefault(require("../utils/read-input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const meta = Object.freeze({
  url: require('url').pathToFileURL(__filename)
});
const input = (0, _readInput.default)(meta.url);
const oldInput = (0, _readInput.default)(meta.url.toString().replace(/23/g, '12'));
describe('day23 2016', () => {
  describe('part1', () => {
    it('should work for part 1 examples', () => {
      expect((0, _day.part1)(['cpy 41 a', 'inc a', 'inc a', 'dec a', 'jnz a 2', 'dec a'].join('\n'))).toEqual(42);
      expect((0, _day.part1)(oldInput, {
        a: 0,
        b: 0,
        c: 0,
        d: 0,
        index: 0
      })).toEqual(317993); // expect(day(oldInput, {a: 0, b: 0, c: 1, d: 0, index: 0}).part2).toEqual(9227647);

      expect((0, _day.part1)(['cpy 2 a', 'tgl a', 'tgl a', 'tgl a', 'cpy 1 a', 'dec a', 'dec a'].join('\n'))).toEqual(3);
    });
    it('should work for part 1 input', () => {
      expect((0, _day.part1)(input)).toEqual(10880);
    });
  });
  describe('part2', () => {
    it('should work for part 2 input', () => {
      expect((0, _day.part2)(input)).toEqual(479007440);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTIzLnNwZWMuanMiXSwibmFtZXMiOlsiaW5wdXQiLCJ1cmwiLCJvbGRJbnB1dCIsInRvU3RyaW5nIiwicmVwbGFjZSIsImRlc2NyaWJlIiwiaXQiLCJleHBlY3QiLCJqb2luIiwidG9FcXVhbCIsImEiLCJiIiwiYyIsImQiLCJpbmRleCJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7Ozs7OztBQUVBLE1BQU1BLEtBQUssR0FBRyx3QkFBVSxLQUFZQyxHQUF0QixDQUFkO0FBQ0EsTUFBTUMsUUFBUSxHQUFHLHdCQUFVLEtBQVlELEdBQVosQ0FBZ0JFLFFBQWhCLEdBQTJCQyxPQUEzQixDQUFtQyxLQUFuQyxFQUEwQyxJQUExQyxDQUFWLENBQWpCO0FBRUFDLFFBQVEsQ0FBQyxZQUFELEVBQWUsTUFBTTtBQUMzQkEsRUFBQUEsUUFBUSxDQUFDLE9BQUQsRUFBVSxNQUFNO0FBQ3RCQyxJQUFBQSxFQUFFLENBQUMsaUNBQUQsRUFBb0MsTUFBTTtBQUMxQ0MsTUFBQUEsTUFBTSxDQUNKLGdCQUNFLENBQUMsVUFBRCxFQUFhLE9BQWIsRUFBc0IsT0FBdEIsRUFBK0IsT0FBL0IsRUFBd0MsU0FBeEMsRUFBbUQsT0FBbkQsRUFBNERDLElBQTVELENBQ0UsSUFERixDQURGLENBREksQ0FBTixDQU1FQyxPQU5GLENBTVUsRUFOVjtBQU9BRixNQUFBQSxNQUFNLENBQUMsZ0JBQU1MLFFBQU4sRUFBZ0I7QUFBRVEsUUFBQUEsQ0FBQyxFQUFFLENBQUw7QUFBUUMsUUFBQUEsQ0FBQyxFQUFFLENBQVg7QUFBY0MsUUFBQUEsQ0FBQyxFQUFFLENBQWpCO0FBQW9CQyxRQUFBQSxDQUFDLEVBQUUsQ0FBdkI7QUFBMEJDLFFBQUFBLEtBQUssRUFBRTtBQUFqQyxPQUFoQixDQUFELENBQU4sQ0FBOERMLE9BQTlELENBQ0UsTUFERixFQVIwQyxDQVcxQzs7QUFDQUYsTUFBQUEsTUFBTSxDQUNKLGdCQUNFLENBQ0UsU0FERixFQUVFLE9BRkYsRUFHRSxPQUhGLEVBSUUsT0FKRixFQUtFLFNBTEYsRUFNRSxPQU5GLEVBT0UsT0FQRixFQVFFQyxJQVJGLENBUU8sSUFSUCxDQURGLENBREksQ0FBTixDQVlFQyxPQVpGLENBWVUsQ0FaVjtBQWFELEtBekJDLENBQUY7QUEyQkFILElBQUFBLEVBQUUsQ0FBQyw4QkFBRCxFQUFpQyxNQUFNO0FBQ3ZDQyxNQUFBQSxNQUFNLENBQUMsZ0JBQU1QLEtBQU4sQ0FBRCxDQUFOLENBQXFCUyxPQUFyQixDQUE2QixLQUE3QjtBQUNELEtBRkMsQ0FBRjtBQUdELEdBL0JPLENBQVI7QUFpQ0FKLEVBQUFBLFFBQVEsQ0FBQyxPQUFELEVBQVUsTUFBTTtBQUN0QkMsSUFBQUEsRUFBRSxDQUFDLDhCQUFELEVBQWlDLE1BQU07QUFDdkNDLE1BQUFBLE1BQU0sQ0FBQyxnQkFBTVAsS0FBTixDQUFELENBQU4sQ0FBcUJTLE9BQXJCLENBQTZCLFNBQTdCO0FBQ0QsS0FGQyxDQUFGO0FBR0QsR0FKTyxDQUFSO0FBS0QsQ0F2Q08sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnQxLCBwYXJ0MiB9IGZyb20gJy4vZGF5MjMuanMnO1xuaW1wb3J0IHJlYWRJbnB1dCBmcm9tICcuLi91dGlscy9yZWFkLWlucHV0JztcblxuY29uc3QgaW5wdXQgPSByZWFkSW5wdXQoaW1wb3J0Lm1ldGEudXJsKTtcbmNvbnN0IG9sZElucHV0ID0gcmVhZElucHV0KGltcG9ydC5tZXRhLnVybC50b1N0cmluZygpLnJlcGxhY2UoLzIzL2csICcxMicpKTtcblxuZGVzY3JpYmUoJ2RheTIzIDIwMTYnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdwYXJ0MScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHdvcmsgZm9yIHBhcnQgMSBleGFtcGxlcycsICgpID0+IHtcbiAgICAgIGV4cGVjdChcbiAgICAgICAgcGFydDEoXG4gICAgICAgICAgWydjcHkgNDEgYScsICdpbmMgYScsICdpbmMgYScsICdkZWMgYScsICdqbnogYSAyJywgJ2RlYyBhJ10uam9pbihcbiAgICAgICAgICAgICdcXG4nLFxuICAgICAgICAgICksXG4gICAgICAgICksXG4gICAgICApLnRvRXF1YWwoNDIpO1xuICAgICAgZXhwZWN0KHBhcnQxKG9sZElucHV0LCB7IGE6IDAsIGI6IDAsIGM6IDAsIGQ6IDAsIGluZGV4OiAwIH0pKS50b0VxdWFsKFxuICAgICAgICAzMTc5OTMsXG4gICAgICApO1xuICAgICAgLy8gZXhwZWN0KGRheShvbGRJbnB1dCwge2E6IDAsIGI6IDAsIGM6IDEsIGQ6IDAsIGluZGV4OiAwfSkucGFydDIpLnRvRXF1YWwoOTIyNzY0Nyk7XG4gICAgICBleHBlY3QoXG4gICAgICAgIHBhcnQxKFxuICAgICAgICAgIFtcbiAgICAgICAgICAgICdjcHkgMiBhJyxcbiAgICAgICAgICAgICd0Z2wgYScsXG4gICAgICAgICAgICAndGdsIGEnLFxuICAgICAgICAgICAgJ3RnbCBhJyxcbiAgICAgICAgICAgICdjcHkgMSBhJyxcbiAgICAgICAgICAgICdkZWMgYScsXG4gICAgICAgICAgICAnZGVjIGEnLFxuICAgICAgICAgIF0uam9pbignXFxuJyksXG4gICAgICAgICksXG4gICAgICApLnRvRXF1YWwoMyk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHdvcmsgZm9yIHBhcnQgMSBpbnB1dCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChwYXJ0MShpbnB1dCkpLnRvRXF1YWwoMTA4ODApO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgncGFydDInLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB3b3JrIGZvciBwYXJ0IDIgaW5wdXQnLCAoKSA9PiB7XG4gICAgICBleHBlY3QocGFydDIoaW5wdXQpKS50b0VxdWFsKDQ3OTAwNzQ0MCk7XG4gICAgfSk7XG4gIH0pO1xufSk7XG4iXX0=