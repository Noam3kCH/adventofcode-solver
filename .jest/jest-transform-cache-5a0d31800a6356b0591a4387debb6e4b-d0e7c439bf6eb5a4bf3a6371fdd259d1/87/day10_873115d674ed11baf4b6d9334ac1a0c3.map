{"version":3,"sources":["day10.js"],"names":["day","input","low","high","part1","assign","state","dest","index","value","concat","sort","a","b","parse","line","match","bot","lowDest","lowIndex","highDest","highIndex","bots","length","parseInt","init","lines","reduce","outputs","split","filter","x","startsWith","instructions","map","some","update","part2"],"mappings":"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","sourcesContent":["export function day(input, low = 17, high = 61) {\n  let part1;\n\n  function assign(state, dest, index, value) {\n    state[dest] = {\n      ...state[dest],\n      [index]: (state[dest][index] || []).concat(value).sort((a, b) => a - b),\n    };\n    if (\n      dest === 'bots' &&\n      state[dest][index][0] === low &&\n      state[dest][index][1] === high\n    ) {\n      part1 = index;\n    }\n    return state;\n  }\n\n  function parse(line) {\n    const match = line.match(\n      /^bot (\\d+) gives low to (bot|output) (\\d+) and high to (bot|output) (\\d+)$/,\n    );\n    const [, bot, lowDest, lowIndex, highDest, highIndex] = match;\n    return state => {\n      if (state.bots[bot] && state.bots[bot].length === 2) {\n        state = assign(\n          state,\n          `${lowDest}s`,\n          parseInt(lowIndex),\n          state.bots[bot][0],\n        );\n        state = assign(\n          state,\n          `${highDest}s`,\n          parseInt(highIndex),\n          state.bots[bot][1],\n        );\n        delete state.bots[bot];\n        return true;\n      }\n    };\n  }\n\n  function init(lines) {\n    return lines.reduce(\n      (state, line) => {\n        const [, value, bot] = line.match(/^value (\\d+) goes to bot (\\d+)$/);\n        return assign(state, 'bots', parseInt(bot), parseInt(value));\n      },\n      { bots: {}, outputs: {} },\n    );\n  }\n\n  const lines = input.split('\\n');\n  const state = init(lines.filter(x => x.startsWith('value')));\n  const instructions = lines.filter(x => x.startsWith('bot')).map(parse);\n  while (instructions.some(update => update(state))) {\n    /**/\n  }\n\n  const part2 = state.outputs[0] * state.outputs[1] * state.outputs[2];\n  return { part1, part2 };\n}\n"]}