35d095c2735f3d3303530175f1629a35
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.day = day;

function day(input, low = 17, high = 61) {
  let part1;

  function assign(state, dest, index, value) {
    state[dest] = { ...state[dest],
      [index]: (state[dest][index] || []).concat(value).sort((a, b) => a - b)
    };

    if (dest === 'bots' && state[dest][index][0] === low && state[dest][index][1] === high) {
      part1 = index;
    }

    return state;
  }

  function parse(line) {
    const match = line.match(/^bot (\d+) gives low to (bot|output) (\d+) and high to (bot|output) (\d+)$/);
    const [, bot, lowDest, lowIndex, highDest, highIndex] = match;
    return state => {
      if (state.bots[bot] && state.bots[bot].length === 2) {
        state = assign(state, `${lowDest}s`, parseInt(lowIndex), state.bots[bot][0]);
        state = assign(state, `${highDest}s`, parseInt(highIndex), state.bots[bot][1]);
        delete state.bots[bot];
        return true;
      }
    };
  }

  function init(lines) {
    return lines.reduce((state, line) => {
      const [, value, bot] = line.match(/^value (\d+) goes to bot (\d+)$/);
      return assign(state, 'bots', parseInt(bot), parseInt(value));
    }, {
      bots: {},
      outputs: {}
    });
  }

  const lines = input.split('\n');
  const state = init(lines.filter(x => x.startsWith('value')));
  const instructions = lines.filter(x => x.startsWith('bot')).map(parse);

  while (instructions.some(update => update(state))) {
    /**/
  }

  const part2 = state.outputs[0] * state.outputs[1] * state.outputs[2];
  return {
    part1,
    part2
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTEwLmpzIl0sIm5hbWVzIjpbImRheSIsImlucHV0IiwibG93IiwiaGlnaCIsInBhcnQxIiwiYXNzaWduIiwic3RhdGUiLCJkZXN0IiwiaW5kZXgiLCJ2YWx1ZSIsImNvbmNhdCIsInNvcnQiLCJhIiwiYiIsInBhcnNlIiwibGluZSIsIm1hdGNoIiwiYm90IiwibG93RGVzdCIsImxvd0luZGV4IiwiaGlnaERlc3QiLCJoaWdoSW5kZXgiLCJib3RzIiwibGVuZ3RoIiwicGFyc2VJbnQiLCJpbml0IiwibGluZXMiLCJyZWR1Y2UiLCJvdXRwdXRzIiwic3BsaXQiLCJmaWx0ZXIiLCJ4Iiwic3RhcnRzV2l0aCIsImluc3RydWN0aW9ucyIsIm1hcCIsInNvbWUiLCJ1cGRhdGUiLCJwYXJ0MiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFPLFNBQVNBLEdBQVQsQ0FBYUMsS0FBYixFQUFvQkMsR0FBRyxHQUFHLEVBQTFCLEVBQThCQyxJQUFJLEdBQUcsRUFBckMsRUFBeUM7QUFDOUMsTUFBSUMsS0FBSjs7QUFFQSxXQUFTQyxNQUFULENBQWdCQyxLQUFoQixFQUF1QkMsSUFBdkIsRUFBNkJDLEtBQTdCLEVBQW9DQyxLQUFwQyxFQUEyQztBQUN6Q0gsSUFBQUEsS0FBSyxDQUFDQyxJQUFELENBQUwsR0FBYyxFQUNaLEdBQUdELEtBQUssQ0FBQ0MsSUFBRCxDQURJO0FBRVosT0FBQ0MsS0FBRCxHQUFTLENBQUNGLEtBQUssQ0FBQ0MsSUFBRCxDQUFMLENBQVlDLEtBQVosS0FBc0IsRUFBdkIsRUFBMkJFLE1BQTNCLENBQWtDRCxLQUFsQyxFQUF5Q0UsSUFBekMsQ0FBOEMsQ0FBQ0MsQ0FBRCxFQUFJQyxDQUFKLEtBQVVELENBQUMsR0FBR0MsQ0FBNUQ7QUFGRyxLQUFkOztBQUlBLFFBQ0VOLElBQUksS0FBSyxNQUFULElBQ0FELEtBQUssQ0FBQ0MsSUFBRCxDQUFMLENBQVlDLEtBQVosRUFBbUIsQ0FBbkIsTUFBMEJOLEdBRDFCLElBRUFJLEtBQUssQ0FBQ0MsSUFBRCxDQUFMLENBQVlDLEtBQVosRUFBbUIsQ0FBbkIsTUFBMEJMLElBSDVCLEVBSUU7QUFDQUMsTUFBQUEsS0FBSyxHQUFHSSxLQUFSO0FBQ0Q7O0FBQ0QsV0FBT0YsS0FBUDtBQUNEOztBQUVELFdBQVNRLEtBQVQsQ0FBZUMsSUFBZixFQUFxQjtBQUNuQixVQUFNQyxLQUFLLEdBQUdELElBQUksQ0FBQ0MsS0FBTCxDQUNaLDRFQURZLENBQWQ7QUFHQSxVQUFNLEdBQUdDLEdBQUgsRUFBUUMsT0FBUixFQUFpQkMsUUFBakIsRUFBMkJDLFFBQTNCLEVBQXFDQyxTQUFyQyxJQUFrREwsS0FBeEQ7QUFDQSxXQUFPVixLQUFLLElBQUk7QUFDZCxVQUFJQSxLQUFLLENBQUNnQixJQUFOLENBQVdMLEdBQVgsS0FBbUJYLEtBQUssQ0FBQ2dCLElBQU4sQ0FBV0wsR0FBWCxFQUFnQk0sTUFBaEIsS0FBMkIsQ0FBbEQsRUFBcUQ7QUFDbkRqQixRQUFBQSxLQUFLLEdBQUdELE1BQU0sQ0FDWkMsS0FEWSxFQUVYLEdBQUVZLE9BQVEsR0FGQyxFQUdaTSxRQUFRLENBQUNMLFFBQUQsQ0FISSxFQUlaYixLQUFLLENBQUNnQixJQUFOLENBQVdMLEdBQVgsRUFBZ0IsQ0FBaEIsQ0FKWSxDQUFkO0FBTUFYLFFBQUFBLEtBQUssR0FBR0QsTUFBTSxDQUNaQyxLQURZLEVBRVgsR0FBRWMsUUFBUyxHQUZBLEVBR1pJLFFBQVEsQ0FBQ0gsU0FBRCxDQUhJLEVBSVpmLEtBQUssQ0FBQ2dCLElBQU4sQ0FBV0wsR0FBWCxFQUFnQixDQUFoQixDQUpZLENBQWQ7QUFNQSxlQUFPWCxLQUFLLENBQUNnQixJQUFOLENBQVdMLEdBQVgsQ0FBUDtBQUNBLGVBQU8sSUFBUDtBQUNEO0FBQ0YsS0FqQkQ7QUFrQkQ7O0FBRUQsV0FBU1EsSUFBVCxDQUFjQyxLQUFkLEVBQXFCO0FBQ25CLFdBQU9BLEtBQUssQ0FBQ0MsTUFBTixDQUNMLENBQUNyQixLQUFELEVBQVFTLElBQVIsS0FBaUI7QUFDZixZQUFNLEdBQUdOLEtBQUgsRUFBVVEsR0FBVixJQUFpQkYsSUFBSSxDQUFDQyxLQUFMLENBQVcsaUNBQVgsQ0FBdkI7QUFDQSxhQUFPWCxNQUFNLENBQUNDLEtBQUQsRUFBUSxNQUFSLEVBQWdCa0IsUUFBUSxDQUFDUCxHQUFELENBQXhCLEVBQStCTyxRQUFRLENBQUNmLEtBQUQsQ0FBdkMsQ0FBYjtBQUNELEtBSkksRUFLTDtBQUFFYSxNQUFBQSxJQUFJLEVBQUUsRUFBUjtBQUFZTSxNQUFBQSxPQUFPLEVBQUU7QUFBckIsS0FMSyxDQUFQO0FBT0Q7O0FBRUQsUUFBTUYsS0FBSyxHQUFHekIsS0FBSyxDQUFDNEIsS0FBTixDQUFZLElBQVosQ0FBZDtBQUNBLFFBQU12QixLQUFLLEdBQUdtQixJQUFJLENBQUNDLEtBQUssQ0FBQ0ksTUFBTixDQUFhQyxDQUFDLElBQUlBLENBQUMsQ0FBQ0MsVUFBRixDQUFhLE9BQWIsQ0FBbEIsQ0FBRCxDQUFsQjtBQUNBLFFBQU1DLFlBQVksR0FBR1AsS0FBSyxDQUFDSSxNQUFOLENBQWFDLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxVQUFGLENBQWEsS0FBYixDQUFsQixFQUF1Q0UsR0FBdkMsQ0FBMkNwQixLQUEzQyxDQUFyQjs7QUFDQSxTQUFPbUIsWUFBWSxDQUFDRSxJQUFiLENBQWtCQyxNQUFNLElBQUlBLE1BQU0sQ0FBQzlCLEtBQUQsQ0FBbEMsQ0FBUCxFQUFtRDtBQUNqRDtBQUNEOztBQUVELFFBQU0rQixLQUFLLEdBQUcvQixLQUFLLENBQUNzQixPQUFOLENBQWMsQ0FBZCxJQUFtQnRCLEtBQUssQ0FBQ3NCLE9BQU4sQ0FBYyxDQUFkLENBQW5CLEdBQXNDdEIsS0FBSyxDQUFDc0IsT0FBTixDQUFjLENBQWQsQ0FBcEQ7QUFDQSxTQUFPO0FBQUV4QixJQUFBQSxLQUFGO0FBQVNpQyxJQUFBQTtBQUFULEdBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBkYXkoaW5wdXQsIGxvdyA9IDE3LCBoaWdoID0gNjEpIHtcbiAgbGV0IHBhcnQxO1xuXG4gIGZ1bmN0aW9uIGFzc2lnbihzdGF0ZSwgZGVzdCwgaW5kZXgsIHZhbHVlKSB7XG4gICAgc3RhdGVbZGVzdF0gPSB7XG4gICAgICAuLi5zdGF0ZVtkZXN0XSxcbiAgICAgIFtpbmRleF06IChzdGF0ZVtkZXN0XVtpbmRleF0gfHwgW10pLmNvbmNhdCh2YWx1ZSkuc29ydCgoYSwgYikgPT4gYSAtIGIpLFxuICAgIH07XG4gICAgaWYgKFxuICAgICAgZGVzdCA9PT0gJ2JvdHMnICYmXG4gICAgICBzdGF0ZVtkZXN0XVtpbmRleF1bMF0gPT09IGxvdyAmJlxuICAgICAgc3RhdGVbZGVzdF1baW5kZXhdWzFdID09PSBoaWdoXG4gICAgKSB7XG4gICAgICBwYXJ0MSA9IGluZGV4O1xuICAgIH1cbiAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZShsaW5lKSB7XG4gICAgY29uc3QgbWF0Y2ggPSBsaW5lLm1hdGNoKFxuICAgICAgL15ib3QgKFxcZCspIGdpdmVzIGxvdyB0byAoYm90fG91dHB1dCkgKFxcZCspIGFuZCBoaWdoIHRvIChib3R8b3V0cHV0KSAoXFxkKykkLyxcbiAgICApO1xuICAgIGNvbnN0IFssIGJvdCwgbG93RGVzdCwgbG93SW5kZXgsIGhpZ2hEZXN0LCBoaWdoSW5kZXhdID0gbWF0Y2g7XG4gICAgcmV0dXJuIHN0YXRlID0+IHtcbiAgICAgIGlmIChzdGF0ZS5ib3RzW2JvdF0gJiYgc3RhdGUuYm90c1tib3RdLmxlbmd0aCA9PT0gMikge1xuICAgICAgICBzdGF0ZSA9IGFzc2lnbihcbiAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICBgJHtsb3dEZXN0fXNgLFxuICAgICAgICAgIHBhcnNlSW50KGxvd0luZGV4KSxcbiAgICAgICAgICBzdGF0ZS5ib3RzW2JvdF1bMF0sXG4gICAgICAgICk7XG4gICAgICAgIHN0YXRlID0gYXNzaWduKFxuICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIGAke2hpZ2hEZXN0fXNgLFxuICAgICAgICAgIHBhcnNlSW50KGhpZ2hJbmRleCksXG4gICAgICAgICAgc3RhdGUuYm90c1tib3RdWzFdLFxuICAgICAgICApO1xuICAgICAgICBkZWxldGUgc3RhdGUuYm90c1tib3RdO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdChsaW5lcykge1xuICAgIHJldHVybiBsaW5lcy5yZWR1Y2UoXG4gICAgICAoc3RhdGUsIGxpbmUpID0+IHtcbiAgICAgICAgY29uc3QgWywgdmFsdWUsIGJvdF0gPSBsaW5lLm1hdGNoKC9edmFsdWUgKFxcZCspIGdvZXMgdG8gYm90IChcXGQrKSQvKTtcbiAgICAgICAgcmV0dXJuIGFzc2lnbihzdGF0ZSwgJ2JvdHMnLCBwYXJzZUludChib3QpLCBwYXJzZUludCh2YWx1ZSkpO1xuICAgICAgfSxcbiAgICAgIHsgYm90czoge30sIG91dHB1dHM6IHt9IH0sXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IGxpbmVzID0gaW5wdXQuc3BsaXQoJ1xcbicpO1xuICBjb25zdCBzdGF0ZSA9IGluaXQobGluZXMuZmlsdGVyKHggPT4geC5zdGFydHNXaXRoKCd2YWx1ZScpKSk7XG4gIGNvbnN0IGluc3RydWN0aW9ucyA9IGxpbmVzLmZpbHRlcih4ID0+IHguc3RhcnRzV2l0aCgnYm90JykpLm1hcChwYXJzZSk7XG4gIHdoaWxlIChpbnN0cnVjdGlvbnMuc29tZSh1cGRhdGUgPT4gdXBkYXRlKHN0YXRlKSkpIHtcbiAgICAvKiovXG4gIH1cblxuICBjb25zdCBwYXJ0MiA9IHN0YXRlLm91dHB1dHNbMF0gKiBzdGF0ZS5vdXRwdXRzWzFdICogc3RhdGUub3V0cHV0c1syXTtcbiAgcmV0dXJuIHsgcGFydDEsIHBhcnQyIH07XG59XG4iXX0=