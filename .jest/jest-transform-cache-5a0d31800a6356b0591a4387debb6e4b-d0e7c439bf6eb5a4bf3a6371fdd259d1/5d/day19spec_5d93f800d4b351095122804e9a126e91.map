{"version":3,"sources":["day19.spec.js"],"names":["input","url","describe","it","expect","join","toEqual"],"mappings":";;AAAA;;AACA;;AACA;;;;;;;AAEA,MAAMA,KAAK,GAAG,wBAAU,KAAYC,GAAtB,CAAd;AAEAC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BA,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CACJ,gBAAM,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,EAAlC,EAAsC,KAAtC,EAA6CC,IAA7C,CAAkD,IAAlD,CAAN,CADI,CAAN,CAEEC,OAFF,CAEU,CAFV;AAGAF,MAAAA,MAAM,CACJ,gBAAM,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,EAAlC,EAAsC,QAAtC,EAAgDC,IAAhD,CAAqD,IAArD,CAAN,CADI,CAAN,CAEEC,OAFF,CAEU,CAFV;AAGD,KAPC,CAAF;AASAH,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBM,OAArB,CAA6B,GAA7B;AACD,KAFC,CAAF;AAGD,GAbO,CAAR;AAeA,oCAAc,OAAd,EAAuB,MAAM;AAC3BH,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CACJ,gBACE,CAAC,QAAD,EAAW,QAAX,EAAqB,SAArB,EAAgC,SAAhC,EAA2C,SAA3C,EAAsD,EAAtD,EAA0D,KAA1D,EAAiEC,IAAjE,CACE,IADF,CADF,CADI,CAAN,CAMEC,OANF,CAMU,CANV;AAOAF,MAAAA,MAAM,CACJ,gBACE,CACE,QADF,EAEE,QAFF,EAGE,SAHF,EAIE,SAJF,EAKE,SALF,EAME,EANF,EAOE,QAPF,EAQEC,IARF,CAQO,IARP,CADF,CADI,CAAN,CAYEC,OAZF,CAYU,CAZV;AAaD,KArBC,CAAF;AAuBAH,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBM,OAArB,CAA6B,GAA7B;AACD,KAFC,CAAF;AAGD,GA3BD;AA4BD,CA5CO,CAAR","sourcesContent":["import { part1, part2 } from './day19.js';\nimport { describeHeavy } from 'describe-heavy';\nimport readInput from '../utils/read-input';\n\nconst input = readInput(import.meta.url);\n\ndescribe('day19 2015', () => {\n  describe('part1', () => {\n    it('should work for part 1 examples', () => {\n      expect(\n        part1(['H => HO', 'H => OH', 'O => HH', '', 'HOH'].join('\\n')),\n      ).toEqual(4);\n      expect(\n        part1(['H => HO', 'H => OH', 'O => HH', '', 'HOHOHO'].join('\\n')),\n      ).toEqual(7);\n    });\n\n    it('should work for part 1 input', () => {\n      expect(part1(input)).toEqual(576);\n    });\n  });\n\n  describeHeavy('part2', () => {\n    it('should work for part 2 examples', () => {\n      expect(\n        part2(\n          ['e => H', 'e => O', 'H => HO', 'H => OH', 'O => HH', '', 'HOH'].join(\n            '\\n',\n          ),\n        ),\n      ).toEqual(3);\n      expect(\n        part2(\n          [\n            'e => H',\n            'e => O',\n            'H => HO',\n            'H => OH',\n            'O => HH',\n            '',\n            'HOHOHO',\n          ].join('\\n'),\n        ),\n      ).toEqual(6);\n    });\n\n    it('should work for part 2 input', () => {\n      expect(part2(input)).toEqual(207);\n    });\n  });\n});\n"]}