{"version":3,"sources":["day12.js"],"names":["toReducer","str","params","split","ops","cpy","src","register","state","match","parseInt","inc","dec","jnz","distance","index","cmd","shift","run","commands","length","part1","input","map","a","b","c","d","part2"],"mappings":";;;;;;;AAAA,SAASA,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,QAAMC,MAAM,GAAGD,GAAG,CAACE,KAAJ,CAAU,KAAV,CAAf;AACA,QAAMC,GAAG,GAAG;AACVC,IAAAA,GAAG,EAAE,CAACC,GAAD,EAAMC,QAAN,KAAmBC,KAAK,IAC1BA,KAAK,CAACD,QAAD,CAAL,GAAkBD,GAAG,CAACG,KAAJ,CAAU,OAAV,IAAqBC,QAAQ,CAACJ,GAAD,CAA7B,GAAqCE,KAAK,CAACF,GAAD,CAFrD;AAGVK,IAAAA,GAAG,EAAEJ,QAAQ,IAAIC,KAAK,IAAIA,KAAK,CAACD,QAAD,CAAL,EAHhB;AAIVK,IAAAA,GAAG,EAAEL,QAAQ,IAAIC,KAAK,IAAIA,KAAK,CAACD,QAAD,CAAL,EAJhB;AAKVM,IAAAA,GAAG,EAAE,CAACN,QAAD,EAAWO,QAAX,KAAwBN,KAAK,IAC/BA,KAAK,CAACO,KAAN,IAAeP,KAAK,CAACD,QAAD,CAAL,KAAoB,CAApB,GAAwB,CAAxB,GAA4BG,QAAQ,CAACI,QAAD,CAAR,GAAqB;AANzD,GAAZ;AAQA,QAAME,GAAG,GAAGZ,GAAG,CAACF,MAAM,CAACe,KAAP,EAAD,CAAH,CAAoB,GAAGf,MAAvB,CAAZ;AACA,SAAOM,KAAK,IAAI;AACdQ,IAAAA,GAAG,CAACR,KAAD,CAAH;AACAA,IAAAA,KAAK,CAACO,KAAN;AACD,GAHD;AAID;;AAED,SAASG,GAAT,CAAaC,QAAb,EAAuBX,KAAvB,EAA8B;AAC5B,SAAOW,QAAQ,CAACC,MAAT,GAAkBZ,KAAK,CAACO,KAA/B,EAAsC;AACpCI,IAAAA,QAAQ,CAACX,KAAK,CAACO,KAAP,CAAR,CAAsBP,KAAtB;AACD;;AACD,SAAOA,KAAP;AACD;;AAEM,MAAMa,KAAK,GAAGC,KAAK,IACxBJ,GAAG,CAACI,KAAK,CAACnB,KAAN,CAAY,IAAZ,EAAkBoB,GAAlB,CAAsBvB,SAAtB,CAAD,EAAmC;AAAEwB,EAAAA,CAAC,EAAE,CAAL;AAAQC,EAAAA,CAAC,EAAE,CAAX;AAAcC,EAAAA,CAAC,EAAE,CAAjB;AAAoBC,EAAAA,CAAC,EAAE,CAAvB;AAA0BZ,EAAAA,KAAK,EAAE;AAAjC,CAAnC,CAAH,CAA4ES,CADvE;;;;AAEA,MAAMI,KAAK,GAAGN,KAAK,IACxBJ,GAAG,CAACI,KAAK,CAACnB,KAAN,CAAY,IAAZ,EAAkBoB,GAAlB,CAAsBvB,SAAtB,CAAD,EAAmC;AAAEwB,EAAAA,CAAC,EAAE,CAAL;AAAQC,EAAAA,CAAC,EAAE,CAAX;AAAcC,EAAAA,CAAC,EAAE,CAAjB;AAAoBC,EAAAA,CAAC,EAAE,CAAvB;AAA0BZ,EAAAA,KAAK,EAAE;AAAjC,CAAnC,CAAH,CAA4ES,CADvE","sourcesContent":["function toReducer(str) {\n  const params = str.split(/\\s+/);\n  const ops = {\n    cpy: (src, register) => state =>\n      (state[register] = src.match(/^\\d+$/) ? parseInt(src) : state[src]),\n    inc: register => state => state[register]++,\n    dec: register => state => state[register]--,\n    jnz: (register, distance) => state =>\n      (state.index += state[register] === 0 ? 0 : parseInt(distance) - 1),\n  };\n  const cmd = ops[params.shift()](...params);\n  return state => {\n    cmd(state);\n    state.index++;\n  };\n}\n\nfunction run(commands, state) {\n  while (commands.length > state.index) {\n    commands[state.index](state);\n  }\n  return state;\n}\n\nexport const part1 = input =>\n  run(input.split('\\n').map(toReducer), { a: 0, b: 0, c: 0, d: 0, index: 0 }).a;\nexport const part2 = input =>\n  run(input.split('\\n').map(toReducer), { a: 0, b: 0, c: 1, d: 0, index: 0 }).a;\n"]}