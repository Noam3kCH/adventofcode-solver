04235cf52c4515a4c7fc0e3e23f6f971
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = void 0;

function parse(input) {
  let initial, diagnostic, currentState, currentValue;
  const lines = input.split('\n');
  const states = {};

  for (const line of lines) {
    const word = (line.match(/\w+/) || [])[0];
    const param = (line.match(/([^\s]*).$/) || [])[1];

    if (word === 'Begin') {
      initial = param;
    } else if (word === 'Perform') {
      diagnostic = parseInt(line.match(/(\d+) steps.$/)[1], 10);
    } else if (word === 'In') {
      currentState = param;
      states[currentState] = [];
    } else if (word === 'If') {
      currentValue = param;
      states[currentState][currentValue] = {};
    } else if (word === 'Write') {
      states[currentState][currentValue].write = param;
    } else if (word === 'Move') {
      states[currentState][currentValue].move = param;
    } else if (word === 'Continue') {
      states[currentState][currentValue].next = param;
    }
  }

  return {
    initial,
    diagnostic,
    states
  };
}

function part1(input) {
  const {
    initial,
    diagnostic,
    states
  } = parse(input);
  const tape = {};
  let position = 0,
      currentState = initial;

  for (let i = 0; i < diagnostic; i++) {
    const currentValue = tape[position] || '0';
    tape[position] = states[currentState][currentValue].write;
    position += states[currentState][currentValue].move === 'left' ? -1 : 1;
    currentState = states[currentState][currentValue].next;
  }

  return Object.values(tape).filter(x => x === '1').length;
}

const part2 = () => undefined;

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTI1LmpzIl0sIm5hbWVzIjpbInBhcnNlIiwiaW5wdXQiLCJpbml0aWFsIiwiZGlhZ25vc3RpYyIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRWYWx1ZSIsImxpbmVzIiwic3BsaXQiLCJzdGF0ZXMiLCJsaW5lIiwid29yZCIsIm1hdGNoIiwicGFyYW0iLCJwYXJzZUludCIsIndyaXRlIiwibW92ZSIsIm5leHQiLCJwYXJ0MSIsInRhcGUiLCJwb3NpdGlvbiIsImkiLCJPYmplY3QiLCJ2YWx1ZXMiLCJmaWx0ZXIiLCJ4IiwibGVuZ3RoIiwicGFydDIiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsU0FBU0EsS0FBVCxDQUFlQyxLQUFmLEVBQXNCO0FBQ3BCLE1BQUlDLE9BQUosRUFBYUMsVUFBYixFQUF5QkMsWUFBekIsRUFBdUNDLFlBQXZDO0FBQ0EsUUFBTUMsS0FBSyxHQUFHTCxLQUFLLENBQUNNLEtBQU4sQ0FBWSxJQUFaLENBQWQ7QUFDQSxRQUFNQyxNQUFNLEdBQUcsRUFBZjs7QUFDQSxPQUFLLE1BQU1DLElBQVgsSUFBbUJILEtBQW5CLEVBQTBCO0FBQ3hCLFVBQU1JLElBQUksR0FBRyxDQUFDRCxJQUFJLENBQUNFLEtBQUwsQ0FBVyxLQUFYLEtBQXFCLEVBQXRCLEVBQTBCLENBQTFCLENBQWI7QUFDQSxVQUFNQyxLQUFLLEdBQUcsQ0FBQ0gsSUFBSSxDQUFDRSxLQUFMLENBQVcsWUFBWCxLQUE0QixFQUE3QixFQUFpQyxDQUFqQyxDQUFkOztBQUNBLFFBQUlELElBQUksS0FBSyxPQUFiLEVBQXNCO0FBQ3BCUixNQUFBQSxPQUFPLEdBQUdVLEtBQVY7QUFDRCxLQUZELE1BRU8sSUFBSUYsSUFBSSxLQUFLLFNBQWIsRUFBd0I7QUFDN0JQLE1BQUFBLFVBQVUsR0FBR1UsUUFBUSxDQUFDSixJQUFJLENBQUNFLEtBQUwsQ0FBVyxlQUFYLEVBQTRCLENBQTVCLENBQUQsRUFBaUMsRUFBakMsQ0FBckI7QUFDRCxLQUZNLE1BRUEsSUFBSUQsSUFBSSxLQUFLLElBQWIsRUFBbUI7QUFDeEJOLE1BQUFBLFlBQVksR0FBR1EsS0FBZjtBQUNBSixNQUFBQSxNQUFNLENBQUNKLFlBQUQsQ0FBTixHQUF1QixFQUF2QjtBQUNELEtBSE0sTUFHQSxJQUFJTSxJQUFJLEtBQUssSUFBYixFQUFtQjtBQUN4QkwsTUFBQUEsWUFBWSxHQUFHTyxLQUFmO0FBQ0FKLE1BQUFBLE1BQU0sQ0FBQ0osWUFBRCxDQUFOLENBQXFCQyxZQUFyQixJQUFxQyxFQUFyQztBQUNELEtBSE0sTUFHQSxJQUFJSyxJQUFJLEtBQUssT0FBYixFQUFzQjtBQUMzQkYsTUFBQUEsTUFBTSxDQUFDSixZQUFELENBQU4sQ0FBcUJDLFlBQXJCLEVBQW1DUyxLQUFuQyxHQUEyQ0YsS0FBM0M7QUFDRCxLQUZNLE1BRUEsSUFBSUYsSUFBSSxLQUFLLE1BQWIsRUFBcUI7QUFDMUJGLE1BQUFBLE1BQU0sQ0FBQ0osWUFBRCxDQUFOLENBQXFCQyxZQUFyQixFQUFtQ1UsSUFBbkMsR0FBMENILEtBQTFDO0FBQ0QsS0FGTSxNQUVBLElBQUlGLElBQUksS0FBSyxVQUFiLEVBQXlCO0FBQzlCRixNQUFBQSxNQUFNLENBQUNKLFlBQUQsQ0FBTixDQUFxQkMsWUFBckIsRUFBbUNXLElBQW5DLEdBQTBDSixLQUExQztBQUNEO0FBQ0Y7O0FBQ0QsU0FBTztBQUFFVixJQUFBQSxPQUFGO0FBQVdDLElBQUFBLFVBQVg7QUFBdUJLLElBQUFBO0FBQXZCLEdBQVA7QUFDRDs7QUFFTSxTQUFTUyxLQUFULENBQWVoQixLQUFmLEVBQXNCO0FBQzNCLFFBQU07QUFBRUMsSUFBQUEsT0FBRjtBQUFXQyxJQUFBQSxVQUFYO0FBQXVCSyxJQUFBQTtBQUF2QixNQUFrQ1IsS0FBSyxDQUFDQyxLQUFELENBQTdDO0FBQ0EsUUFBTWlCLElBQUksR0FBRyxFQUFiO0FBQ0EsTUFBSUMsUUFBUSxHQUFHLENBQWY7QUFBQSxNQUNFZixZQUFZLEdBQUdGLE9BRGpCOztBQUVBLE9BQUssSUFBSWtCLENBQUMsR0FBRyxDQUFiLEVBQWdCQSxDQUFDLEdBQUdqQixVQUFwQixFQUFnQ2lCLENBQUMsRUFBakMsRUFBcUM7QUFDbkMsVUFBTWYsWUFBWSxHQUFHYSxJQUFJLENBQUNDLFFBQUQsQ0FBSixJQUFrQixHQUF2QztBQUNBRCxJQUFBQSxJQUFJLENBQUNDLFFBQUQsQ0FBSixHQUFpQlgsTUFBTSxDQUFDSixZQUFELENBQU4sQ0FBcUJDLFlBQXJCLEVBQW1DUyxLQUFwRDtBQUNBSyxJQUFBQSxRQUFRLElBQUlYLE1BQU0sQ0FBQ0osWUFBRCxDQUFOLENBQXFCQyxZQUFyQixFQUFtQ1UsSUFBbkMsS0FBNEMsTUFBNUMsR0FBcUQsQ0FBQyxDQUF0RCxHQUEwRCxDQUF0RTtBQUNBWCxJQUFBQSxZQUFZLEdBQUdJLE1BQU0sQ0FBQ0osWUFBRCxDQUFOLENBQXFCQyxZQUFyQixFQUFtQ1csSUFBbEQ7QUFDRDs7QUFDRCxTQUFPSyxNQUFNLENBQUNDLE1BQVAsQ0FBY0osSUFBZCxFQUFvQkssTUFBcEIsQ0FBMkJDLENBQUMsSUFBSUEsQ0FBQyxLQUFLLEdBQXRDLEVBQTJDQyxNQUFsRDtBQUNEOztBQUVNLE1BQU1DLEtBQUssR0FBRyxNQUFNQyxTQUFwQiIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gIGxldCBpbml0aWFsLCBkaWFnbm9zdGljLCBjdXJyZW50U3RhdGUsIGN1cnJlbnRWYWx1ZTtcbiAgY29uc3QgbGluZXMgPSBpbnB1dC5zcGxpdCgnXFxuJyk7XG4gIGNvbnN0IHN0YXRlcyA9IHt9O1xuICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICBjb25zdCB3b3JkID0gKGxpbmUubWF0Y2goL1xcdysvKSB8fCBbXSlbMF07XG4gICAgY29uc3QgcGFyYW0gPSAobGluZS5tYXRjaCgvKFteXFxzXSopLiQvKSB8fCBbXSlbMV07XG4gICAgaWYgKHdvcmQgPT09ICdCZWdpbicpIHtcbiAgICAgIGluaXRpYWwgPSBwYXJhbTtcbiAgICB9IGVsc2UgaWYgKHdvcmQgPT09ICdQZXJmb3JtJykge1xuICAgICAgZGlhZ25vc3RpYyA9IHBhcnNlSW50KGxpbmUubWF0Y2goLyhcXGQrKSBzdGVwcy4kLylbMV0sIDEwKTtcbiAgICB9IGVsc2UgaWYgKHdvcmQgPT09ICdJbicpIHtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IHBhcmFtO1xuICAgICAgc3RhdGVzW2N1cnJlbnRTdGF0ZV0gPSBbXTtcbiAgICB9IGVsc2UgaWYgKHdvcmQgPT09ICdJZicpIHtcbiAgICAgIGN1cnJlbnRWYWx1ZSA9IHBhcmFtO1xuICAgICAgc3RhdGVzW2N1cnJlbnRTdGF0ZV1bY3VycmVudFZhbHVlXSA9IHt9O1xuICAgIH0gZWxzZSBpZiAod29yZCA9PT0gJ1dyaXRlJykge1xuICAgICAgc3RhdGVzW2N1cnJlbnRTdGF0ZV1bY3VycmVudFZhbHVlXS53cml0ZSA9IHBhcmFtO1xuICAgIH0gZWxzZSBpZiAod29yZCA9PT0gJ01vdmUnKSB7XG4gICAgICBzdGF0ZXNbY3VycmVudFN0YXRlXVtjdXJyZW50VmFsdWVdLm1vdmUgPSBwYXJhbTtcbiAgICB9IGVsc2UgaWYgKHdvcmQgPT09ICdDb250aW51ZScpIHtcbiAgICAgIHN0YXRlc1tjdXJyZW50U3RhdGVdW2N1cnJlbnRWYWx1ZV0ubmV4dCA9IHBhcmFtO1xuICAgIH1cbiAgfVxuICByZXR1cm4geyBpbml0aWFsLCBkaWFnbm9zdGljLCBzdGF0ZXMgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnQxKGlucHV0KSB7XG4gIGNvbnN0IHsgaW5pdGlhbCwgZGlhZ25vc3RpYywgc3RhdGVzIH0gPSBwYXJzZShpbnB1dCk7XG4gIGNvbnN0IHRhcGUgPSB7fTtcbiAgbGV0IHBvc2l0aW9uID0gMCxcbiAgICBjdXJyZW50U3RhdGUgPSBpbml0aWFsO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRpYWdub3N0aWM7IGkrKykge1xuICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRhcGVbcG9zaXRpb25dIHx8ICcwJztcbiAgICB0YXBlW3Bvc2l0aW9uXSA9IHN0YXRlc1tjdXJyZW50U3RhdGVdW2N1cnJlbnRWYWx1ZV0ud3JpdGU7XG4gICAgcG9zaXRpb24gKz0gc3RhdGVzW2N1cnJlbnRTdGF0ZV1bY3VycmVudFZhbHVlXS5tb3ZlID09PSAnbGVmdCcgPyAtMSA6IDE7XG4gICAgY3VycmVudFN0YXRlID0gc3RhdGVzW2N1cnJlbnRTdGF0ZV1bY3VycmVudFZhbHVlXS5uZXh0O1xuICB9XG4gIHJldHVybiBPYmplY3QudmFsdWVzKHRhcGUpLmZpbHRlcih4ID0+IHggPT09ICcxJykubGVuZ3RoO1xufVxuXG5leHBvcnQgY29uc3QgcGFydDIgPSAoKSA9PiB1bmRlZmluZWQ7XG4iXX0=