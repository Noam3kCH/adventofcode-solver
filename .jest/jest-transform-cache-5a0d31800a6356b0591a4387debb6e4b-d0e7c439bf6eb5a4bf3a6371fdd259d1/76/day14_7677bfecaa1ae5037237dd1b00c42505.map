{"version":3,"sources":["day14.js"],"names":["parse","input","split","map","x","match","speed","parseInt","fly","rest","distance","points","run","race","seconds","i","ran","lead","reduce","prev","Math","max","filter","forEach","part1","part2"],"mappings":";;;;;;;;AAAA,SAASA,KAAT,CAAeC,KAAf,EAAsB;AACpB,SAAOA,KAAK,CACTC,KADI,CACE,IADF,EAEJC,GAFI,CAEAC,CAAC,IAAIA,CAAC,CAACC,KAAF,CAAQ,kDAAR,CAFL,EAGJF,GAHI,CAGAC,CAAC,KAAK;AACTE,IAAAA,KAAK,EAAEC,QAAQ,CAACH,CAAC,CAAC,CAAD,CAAF,CADN;AAETI,IAAAA,GAAG,EAAED,QAAQ,CAACH,CAAC,CAAC,CAAD,CAAF,CAFJ;AAGTK,IAAAA,IAAI,EAAEF,QAAQ,CAACH,CAAC,CAAC,CAAD,CAAF,CAHL;AAITM,IAAAA,QAAQ,EAAE,CAJD;AAKTC,IAAAA,MAAM,EAAE;AALC,GAAL,CAHD,CAAP;AAUD;;AAED,SAASC,GAAT,CAAaC,IAAb,EAAmBC,OAAnB,EAA4B;AAC1B,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAApB,EAA6BC,CAAC,EAA9B,EAAkC;AAChCF,IAAAA,IAAI,GAAGA,IAAI,CAACV,GAAL,CAASC,CAAC,IAAI;AACnB,YAAMY,GAAG,GAAGD,CAAC,IAAIX,CAAC,CAACI,GAAF,GAAQJ,CAAC,CAACK,IAAd,CAAD,GAAuBL,CAAC,CAACI,GAArC;AACAJ,MAAAA,CAAC,CAACM,QAAF,IAAcM,GAAG,GAAGZ,CAAC,CAACE,KAAL,GAAa,CAA9B;AACA,aAAOF,CAAP;AACD,KAJM,CAAP;AAMA,UAAMa,IAAI,GAAGJ,IAAI,CAACK,MAAL,CAAY,CAACC,IAAD,EAAOf,CAAP,KAAagB,IAAI,CAACC,GAAL,CAASF,IAAT,EAAef,CAAC,CAACM,QAAjB,CAAzB,EAAqD,CAArD,CAAb;AACAG,IAAAA,IAAI,CAACS,MAAL,CAAYlB,CAAC,IAAIA,CAAC,CAACM,QAAF,KAAeO,IAAhC,EAAsCM,OAAtC,CAA8CnB,CAAC,IAAIA,CAAC,CAACO,MAAF,EAAnD;AACD;;AACD,SAAOE,IAAP;AACD;;AAEM,SAASW,KAAT,CAAevB,KAAf,EAAsBa,OAAO,GAAG,IAAhC,EAAsC;AAC3C,QAAMD,IAAI,GAAGD,GAAG,CAACZ,KAAK,CAACC,KAAD,CAAN,EAAea,OAAf,CAAhB;AACA,SAAOD,IAAI,CAACK,MAAL,CAAY,CAACC,IAAD,EAAOf,CAAP,KAAagB,IAAI,CAACC,GAAL,CAASF,IAAT,EAAef,CAAC,CAACM,QAAjB,CAAzB,EAAqD,CAArD,CAAP;AACD;;AAEM,SAASe,KAAT,CAAexB,KAAf,EAAsBa,OAAO,GAAG,IAAhC,EAAsC;AAC3C,QAAMD,IAAI,GAAGD,GAAG,CAACZ,KAAK,CAACC,KAAD,CAAN,EAAea,OAAf,CAAhB;AACA,SAAOD,IAAI,CAACK,MAAL,CAAY,CAACC,IAAD,EAAOf,CAAP,KAAagB,IAAI,CAACC,GAAL,CAASF,IAAT,EAAef,CAAC,CAACO,MAAjB,CAAzB,EAAmD,CAAnD,CAAP;AACD","sourcesContent":["function parse(input) {\n  return input\n    .split('\\n')\n    .map(x => x.match(/fly (\\d+) km\\/s .* (\\d+) sec.* rest .* (\\d+) sec/))\n    .map(x => ({\n      speed: parseInt(x[1]),\n      fly: parseInt(x[2]),\n      rest: parseInt(x[3]),\n      distance: 0,\n      points: 0,\n    }));\n}\n\nfunction run(race, seconds) {\n  for (let i = 0; i < seconds; i++) {\n    race = race.map(x => {\n      const ran = i % (x.fly + x.rest) < x.fly;\n      x.distance += ran ? x.speed : 0;\n      return x;\n    });\n\n    const lead = race.reduce((prev, x) => Math.max(prev, x.distance), 0);\n    race.filter(x => x.distance === lead).forEach(x => x.points++);\n  }\n  return race;\n}\n\nexport function part1(input, seconds = 2503) {\n  const race = run(parse(input), seconds);\n  return race.reduce((prev, x) => Math.max(prev, x.distance), 0);\n}\n\nexport function part2(input, seconds = 2503) {\n  const race = run(parse(input), seconds);\n  return race.reduce((prev, x) => Math.max(prev, x.points), 0);\n}\n"]}