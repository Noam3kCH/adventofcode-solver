6c6e8cb5a2f0e56425fe4cba76150be6
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function parse(input) {
  return input.split('\n').map(x => x.match(/fly (\d+) km\/s .* (\d+) sec.* rest .* (\d+) sec/)).map(x => ({
    speed: parseInt(x[1]),
    fly: parseInt(x[2]),
    rest: parseInt(x[3]),
    distance: 0,
    points: 0
  }));
}

function run(race, seconds) {
  for (let i = 0; i < seconds; i++) {
    race = race.map(x => {
      const ran = i % (x.fly + x.rest) < x.fly;
      x.distance += ran ? x.speed : 0;
      return x;
    });
    const lead = race.reduce((prev, x) => Math.max(prev, x.distance), 0);
    race.filter(x => x.distance === lead).forEach(x => x.points++);
  }

  return race;
}

function part1(input, seconds = 2503) {
  const race = run(parse(input), seconds);
  return race.reduce((prev, x) => Math.max(prev, x.distance), 0);
}

function part2(input, seconds = 2503) {
  const race = run(parse(input), seconds);
  return race.reduce((prev, x) => Math.max(prev, x.points), 0);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE0LmpzIl0sIm5hbWVzIjpbInBhcnNlIiwiaW5wdXQiLCJzcGxpdCIsIm1hcCIsIngiLCJtYXRjaCIsInNwZWVkIiwicGFyc2VJbnQiLCJmbHkiLCJyZXN0IiwiZGlzdGFuY2UiLCJwb2ludHMiLCJydW4iLCJyYWNlIiwic2Vjb25kcyIsImkiLCJyYW4iLCJsZWFkIiwicmVkdWNlIiwicHJldiIsIk1hdGgiLCJtYXgiLCJmaWx0ZXIiLCJmb3JFYWNoIiwicGFydDEiLCJwYXJ0MiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxTQUFTQSxLQUFULENBQWVDLEtBQWYsRUFBc0I7QUFDcEIsU0FBT0EsS0FBSyxDQUNUQyxLQURJLENBQ0UsSUFERixFQUVKQyxHQUZJLENBRUFDLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxLQUFGLENBQVEsa0RBQVIsQ0FGTCxFQUdKRixHQUhJLENBR0FDLENBQUMsS0FBSztBQUNURSxJQUFBQSxLQUFLLEVBQUVDLFFBQVEsQ0FBQ0gsQ0FBQyxDQUFDLENBQUQsQ0FBRixDQUROO0FBRVRJLElBQUFBLEdBQUcsRUFBRUQsUUFBUSxDQUFDSCxDQUFDLENBQUMsQ0FBRCxDQUFGLENBRko7QUFHVEssSUFBQUEsSUFBSSxFQUFFRixRQUFRLENBQUNILENBQUMsQ0FBQyxDQUFELENBQUYsQ0FITDtBQUlUTSxJQUFBQSxRQUFRLEVBQUUsQ0FKRDtBQUtUQyxJQUFBQSxNQUFNLEVBQUU7QUFMQyxHQUFMLENBSEQsQ0FBUDtBQVVEOztBQUVELFNBQVNDLEdBQVQsQ0FBYUMsSUFBYixFQUFtQkMsT0FBbkIsRUFBNEI7QUFDMUIsT0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHRCxPQUFwQixFQUE2QkMsQ0FBQyxFQUE5QixFQUFrQztBQUNoQ0YsSUFBQUEsSUFBSSxHQUFHQSxJQUFJLENBQUNWLEdBQUwsQ0FBU0MsQ0FBQyxJQUFJO0FBQ25CLFlBQU1ZLEdBQUcsR0FBR0QsQ0FBQyxJQUFJWCxDQUFDLENBQUNJLEdBQUYsR0FBUUosQ0FBQyxDQUFDSyxJQUFkLENBQUQsR0FBdUJMLENBQUMsQ0FBQ0ksR0FBckM7QUFDQUosTUFBQUEsQ0FBQyxDQUFDTSxRQUFGLElBQWNNLEdBQUcsR0FBR1osQ0FBQyxDQUFDRSxLQUFMLEdBQWEsQ0FBOUI7QUFDQSxhQUFPRixDQUFQO0FBQ0QsS0FKTSxDQUFQO0FBTUEsVUFBTWEsSUFBSSxHQUFHSixJQUFJLENBQUNLLE1BQUwsQ0FBWSxDQUFDQyxJQUFELEVBQU9mLENBQVAsS0FBYWdCLElBQUksQ0FBQ0MsR0FBTCxDQUFTRixJQUFULEVBQWVmLENBQUMsQ0FBQ00sUUFBakIsQ0FBekIsRUFBcUQsQ0FBckQsQ0FBYjtBQUNBRyxJQUFBQSxJQUFJLENBQUNTLE1BQUwsQ0FBWWxCLENBQUMsSUFBSUEsQ0FBQyxDQUFDTSxRQUFGLEtBQWVPLElBQWhDLEVBQXNDTSxPQUF0QyxDQUE4Q25CLENBQUMsSUFBSUEsQ0FBQyxDQUFDTyxNQUFGLEVBQW5EO0FBQ0Q7O0FBQ0QsU0FBT0UsSUFBUDtBQUNEOztBQUVNLFNBQVNXLEtBQVQsQ0FBZXZCLEtBQWYsRUFBc0JhLE9BQU8sR0FBRyxJQUFoQyxFQUFzQztBQUMzQyxRQUFNRCxJQUFJLEdBQUdELEdBQUcsQ0FBQ1osS0FBSyxDQUFDQyxLQUFELENBQU4sRUFBZWEsT0FBZixDQUFoQjtBQUNBLFNBQU9ELElBQUksQ0FBQ0ssTUFBTCxDQUFZLENBQUNDLElBQUQsRUFBT2YsQ0FBUCxLQUFhZ0IsSUFBSSxDQUFDQyxHQUFMLENBQVNGLElBQVQsRUFBZWYsQ0FBQyxDQUFDTSxRQUFqQixDQUF6QixFQUFxRCxDQUFyRCxDQUFQO0FBQ0Q7O0FBRU0sU0FBU2UsS0FBVCxDQUFleEIsS0FBZixFQUFzQmEsT0FBTyxHQUFHLElBQWhDLEVBQXNDO0FBQzNDLFFBQU1ELElBQUksR0FBR0QsR0FBRyxDQUFDWixLQUFLLENBQUNDLEtBQUQsQ0FBTixFQUFlYSxPQUFmLENBQWhCO0FBQ0EsU0FBT0QsSUFBSSxDQUFDSyxNQUFMLENBQVksQ0FBQ0MsSUFBRCxFQUFPZixDQUFQLEtBQWFnQixJQUFJLENBQUNDLEdBQUwsQ0FBU0YsSUFBVCxFQUFlZixDQUFDLENBQUNPLE1BQWpCLENBQXpCLEVBQW1ELENBQW5ELENBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHBhcnNlKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dFxuICAgIC5zcGxpdCgnXFxuJylcbiAgICAubWFwKHggPT4geC5tYXRjaCgvZmx5IChcXGQrKSBrbVxcL3MgLiogKFxcZCspIHNlYy4qIHJlc3QgLiogKFxcZCspIHNlYy8pKVxuICAgIC5tYXAoeCA9PiAoe1xuICAgICAgc3BlZWQ6IHBhcnNlSW50KHhbMV0pLFxuICAgICAgZmx5OiBwYXJzZUludCh4WzJdKSxcbiAgICAgIHJlc3Q6IHBhcnNlSW50KHhbM10pLFxuICAgICAgZGlzdGFuY2U6IDAsXG4gICAgICBwb2ludHM6IDAsXG4gICAgfSkpO1xufVxuXG5mdW5jdGlvbiBydW4ocmFjZSwgc2Vjb25kcykge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlY29uZHM7IGkrKykge1xuICAgIHJhY2UgPSByYWNlLm1hcCh4ID0+IHtcbiAgICAgIGNvbnN0IHJhbiA9IGkgJSAoeC5mbHkgKyB4LnJlc3QpIDwgeC5mbHk7XG4gICAgICB4LmRpc3RhbmNlICs9IHJhbiA/IHguc3BlZWQgOiAwO1xuICAgICAgcmV0dXJuIHg7XG4gICAgfSk7XG5cbiAgICBjb25zdCBsZWFkID0gcmFjZS5yZWR1Y2UoKHByZXYsIHgpID0+IE1hdGgubWF4KHByZXYsIHguZGlzdGFuY2UpLCAwKTtcbiAgICByYWNlLmZpbHRlcih4ID0+IHguZGlzdGFuY2UgPT09IGxlYWQpLmZvckVhY2goeCA9PiB4LnBvaW50cysrKTtcbiAgfVxuICByZXR1cm4gcmFjZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnQxKGlucHV0LCBzZWNvbmRzID0gMjUwMykge1xuICBjb25zdCByYWNlID0gcnVuKHBhcnNlKGlucHV0KSwgc2Vjb25kcyk7XG4gIHJldHVybiByYWNlLnJlZHVjZSgocHJldiwgeCkgPT4gTWF0aC5tYXgocHJldiwgeC5kaXN0YW5jZSksIDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDIoaW5wdXQsIHNlY29uZHMgPSAyNTAzKSB7XG4gIGNvbnN0IHJhY2UgPSBydW4ocGFyc2UoaW5wdXQpLCBzZWNvbmRzKTtcbiAgcmV0dXJuIHJhY2UucmVkdWNlKChwcmV2LCB4KSA9PiBNYXRoLm1heChwcmV2LCB4LnBvaW50cyksIDApO1xufVxuIl19