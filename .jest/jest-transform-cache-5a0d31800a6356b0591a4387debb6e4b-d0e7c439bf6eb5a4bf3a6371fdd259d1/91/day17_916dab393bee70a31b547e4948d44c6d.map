{"version":3,"sources":["day17.js"],"names":["add1","steps","current","state","number","splice","part1","input","lookFor","spinner","parseInt","i","indexOf","length","add2","zeroPosition","result","part2","times","undefined"],"mappings":";;;;;;;;AAAA,SAASA,IAAT,CAAc;AAAEC,EAAAA,KAAF;AAASC,EAAAA,OAAT;AAAkBC,EAAAA;AAAlB,CAAd,EAAyCC,MAAzC,EAAiD;AAC/CF,EAAAA,OAAO,GAAI,CAACA,OAAO,GAAGD,KAAX,IAAoBG,MAArB,GAA+B,CAAzC;AACAD,EAAAA,KAAK,CAACE,MAAN,CAAaH,OAAb,EAAsB,CAAtB,EAAyBE,MAAzB;AACA,SAAO;AAAEH,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,GAAP;AACD;;AAEM,SAASG,KAAT,CAAeC,KAAf,EAAsBC,OAAO,GAAG,IAAhC,EAAsC;AAC3C,MAAIC,OAAO,GAAG;AACZR,IAAAA,KAAK,EAAES,QAAQ,CAACH,KAAD,CADH;AAEZL,IAAAA,OAAO,EAAE,CAFG;AAGZC,IAAAA,KAAK,EAAE,CAAC,CAAD;AAHK,GAAd;;AAKA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAI,IAArB,EAA2BA,CAAC,EAA5B,EAAgC;AAC9BF,IAAAA,OAAO,GAAGT,IAAI,CAACS,OAAD,EAAUE,CAAV,CAAd;AACD;;AACD,SAAOF,OAAO,CAACN,KAAR,CACL,CAACM,OAAO,CAACN,KAAR,CAAcS,OAAd,CAAsBJ,OAAtB,IAAiC,CAAlC,IAAuCC,OAAO,CAACN,KAAR,CAAcU,MADhD,CAAP;AAGD;;AAED,SAASC,IAAT,CAAc;AAAEb,EAAAA,KAAF;AAASC,EAAAA,OAAT;AAAkBa,EAAAA,YAAlB;AAAgCC,EAAAA;AAAhC,CAAd,EAAwDZ,MAAxD,EAAgE;AAC9DF,EAAAA,OAAO,GAAI,CAACA,OAAO,GAAGD,KAAX,IAAoBG,MAArB,GAA+B,CAAzC;;AACA,MAAIF,OAAO,KAAKa,YAAY,GAAG,CAA/B,EAAkC;AAChCC,IAAAA,MAAM,GAAGZ,MAAT;AACD,GAFD,MAEO,IAAIF,OAAO,IAAIa,YAAf,EAA6B;AAClCA,IAAAA,YAAY;AACb;;AACD,SAAO;AAAEd,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBa,IAAAA,YAAlB;AAAgCC,IAAAA;AAAhC,GAAP;AACD;;AAEM,SAASC,KAAT,CAAeV,KAAf,EAAsBW,KAAK,GAAG,GAA9B,EAAmC;AACxC,MAAIT,OAAO,GAAG;AACZR,IAAAA,KAAK,EAAES,QAAQ,CAACH,KAAD,CADH;AAEZL,IAAAA,OAAO,EAAE,CAFG;AAGZa,IAAAA,YAAY,EAAE,CAHF;AAIZC,IAAAA,MAAM,EAAEG;AAJI,GAAd;;AAMA,OAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIO,KAArB,EAA4BP,CAAC,EAA7B,EAAiC;AAC/BF,IAAAA,OAAO,GAAGK,IAAI,CAACL,OAAD,EAAUE,CAAV,CAAd;AACD;;AACD,SAAOF,OAAO,CAACO,MAAf;AACD","sourcesContent":["function add1({ steps, current, state }, number) {\n  current = ((current + steps) % number) + 1;\n  state.splice(current, 0, number);\n  return { steps, current, state };\n}\n\nexport function part1(input, lookFor = 2017) {\n  let spinner = {\n    steps: parseInt(input),\n    current: 0,\n    state: [0],\n  };\n  for (let i = 1; i <= 2017; i++) {\n    spinner = add1(spinner, i);\n  }\n  return spinner.state[\n    (spinner.state.indexOf(lookFor) + 1) % spinner.state.length\n  ];\n}\n\nfunction add2({ steps, current, zeroPosition, result }, number) {\n  current = ((current + steps) % number) + 1;\n  if (current === zeroPosition + 1) {\n    result = number;\n  } else if (current <= zeroPosition) {\n    zeroPosition++;\n  }\n  return { steps, current, zeroPosition, result };\n}\n\nexport function part2(input, times = 5e7) {\n  let spinner = {\n    steps: parseInt(input),\n    current: 0,\n    zeroPosition: 0,\n    result: undefined,\n  };\n  for (let i = 1; i <= times; i++) {\n    spinner = add2(spinner, i);\n  }\n  return spinner.result;\n}\n"]}