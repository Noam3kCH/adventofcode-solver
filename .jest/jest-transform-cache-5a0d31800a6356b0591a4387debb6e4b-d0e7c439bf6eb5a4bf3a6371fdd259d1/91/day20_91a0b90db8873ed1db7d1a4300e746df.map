{"version":3,"sources":["day20.js"],"names":["positionAfter","p","v","a","t","particleAfter","particle","i","pAfter","map","x","byPosition","b","findCollisions","particles","collide","every","sort","filter","parse","input","split","line","parser","numbers","match","slice","parseInt","closest","distances","Math","abs","min","indexOf","after","part1","part2","collisions","forEach","length"],"mappings":"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","sourcesContent":["function positionAfter(p, v, a, t) {\n  return p + (t * (2 * (v + a) + (t - 1) * a)) / 2;\n}\n\nexport function particleAfter(particle, t) {\n  const { i, p, v, a } = particle;\n  const pAfter = p.map((x, i) => positionAfter(p[i], v[i], a[i], t));\n  return { i, p: pAfter, v, a };\n}\n\nfunction byPosition(a, b) {\n  if (a.p[0] < b.p[0]) {\n    return -1;\n  } else if (a.p[0] > b.p[0]) {\n    return 1;\n  } else if (a.p[1] < b.p[1]) {\n    return -1;\n  } else if (a.p[1] > b.p[1]) {\n    return 1;\n  } else if (a.p[2] < b.p[2]) {\n    return -1;\n  } else if (a.p[2] > b.p[2]) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nfunction findCollisions(particles) {\n  const collide = (a, b) => b && a.p.every((x, i) => x === b.p[i]);\n  return particles\n    .sort(byPosition)\n    .filter((x, i, a) => collide(x, a[i - 1]) || collide(x, a[i + 1]));\n}\n\nfunction parse(input) {\n  return input.split('\\n').map((line, i) => {\n    const parser = /^p=<(-?\\d+),(-?\\d+),(-?\\d+)>, v=<(-?\\d+),(-?\\d+),(-?\\d+)>, a=<(-?\\d+),(-?\\d+),(-?\\d+)>$/;\n    const numbers = line\n      .match(parser)\n      .slice(1)\n      .map(x => parseInt(x));\n    return {\n      i,\n      p: numbers.slice(0, 3),\n      v: numbers.slice(3, 6),\n      a: numbers.slice(6, 9),\n    };\n  });\n}\n\nfunction closest(particles) {\n  const distances = particles.map(\n    x => Math.abs(x.p[0]) + Math.abs(x.p[1]) + Math.abs(x.p[2]),\n  );\n  const min = Math.min(...distances);\n  return distances.indexOf(min);\n}\n\nfunction after(particles, t) {\n  return particles.map(x => particleAfter(x, t));\n}\n\nexport function part1(input) {\n  const particles = after(parse(input), 1000);\n  return closest(particles);\n}\n\nexport function part2(input) {\n  const particles = parse(input);\n  for (let t = 0; t < 1000; t++) {\n    const collisions = findCollisions(after(particles, t));\n    collisions.forEach(x => delete particles[x.i]);\n  }\n  return particles.filter(x => x).length;\n}\n"]}