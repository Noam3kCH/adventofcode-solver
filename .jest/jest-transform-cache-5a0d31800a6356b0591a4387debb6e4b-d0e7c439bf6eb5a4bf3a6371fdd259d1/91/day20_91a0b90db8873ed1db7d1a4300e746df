b3f495e1e8e5eb906df1dd76ddb434b1
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.particleAfter = particleAfter;
exports.part1 = part1;
exports.part2 = part2;

function positionAfter(p, v, a, t) {
  return p + t * (2 * (v + a) + (t - 1) * a) / 2;
}

function particleAfter(particle, t) {
  const {
    i,
    p,
    v,
    a
  } = particle;
  const pAfter = p.map((x, i) => positionAfter(p[i], v[i], a[i], t));
  return {
    i,
    p: pAfter,
    v,
    a
  };
}

function byPosition(a, b) {
  if (a.p[0] < b.p[0]) {
    return -1;
  } else if (a.p[0] > b.p[0]) {
    return 1;
  } else if (a.p[1] < b.p[1]) {
    return -1;
  } else if (a.p[1] > b.p[1]) {
    return 1;
  } else if (a.p[2] < b.p[2]) {
    return -1;
  } else if (a.p[2] > b.p[2]) {
    return 1;
  } else {
    return 0;
  }
}

function findCollisions(particles) {
  const collide = (a, b) => b && a.p.every((x, i) => x === b.p[i]);

  return particles.sort(byPosition).filter((x, i, a) => collide(x, a[i - 1]) || collide(x, a[i + 1]));
}

function parse(input) {
  return input.split('\n').map((line, i) => {
    const parser = /^p=<(-?\d+),(-?\d+),(-?\d+)>, v=<(-?\d+),(-?\d+),(-?\d+)>, a=<(-?\d+),(-?\d+),(-?\d+)>$/;
    const numbers = line.match(parser).slice(1).map(x => parseInt(x));
    return {
      i,
      p: numbers.slice(0, 3),
      v: numbers.slice(3, 6),
      a: numbers.slice(6, 9)
    };
  });
}

function closest(particles) {
  const distances = particles.map(x => Math.abs(x.p[0]) + Math.abs(x.p[1]) + Math.abs(x.p[2]));
  const min = Math.min(...distances);
  return distances.indexOf(min);
}

function after(particles, t) {
  return particles.map(x => particleAfter(x, t));
}

function part1(input) {
  const particles = after(parse(input), 1000);
  return closest(particles);
}

function part2(input) {
  const particles = parse(input);

  for (let t = 0; t < 1000; t++) {
    const collisions = findCollisions(after(particles, t));
    collisions.forEach(x => delete particles[x.i]);
  }

  return particles.filter(x => x).length;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTIwLmpzIl0sIm5hbWVzIjpbInBvc2l0aW9uQWZ0ZXIiLCJwIiwidiIsImEiLCJ0IiwicGFydGljbGVBZnRlciIsInBhcnRpY2xlIiwiaSIsInBBZnRlciIsIm1hcCIsIngiLCJieVBvc2l0aW9uIiwiYiIsImZpbmRDb2xsaXNpb25zIiwicGFydGljbGVzIiwiY29sbGlkZSIsImV2ZXJ5Iiwic29ydCIsImZpbHRlciIsInBhcnNlIiwiaW5wdXQiLCJzcGxpdCIsImxpbmUiLCJwYXJzZXIiLCJudW1iZXJzIiwibWF0Y2giLCJzbGljZSIsInBhcnNlSW50IiwiY2xvc2VzdCIsImRpc3RhbmNlcyIsIk1hdGgiLCJhYnMiLCJtaW4iLCJpbmRleE9mIiwiYWZ0ZXIiLCJwYXJ0MSIsInBhcnQyIiwiY29sbGlzaW9ucyIsImZvckVhY2giLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLFNBQVNBLGFBQVQsQ0FBdUJDLENBQXZCLEVBQTBCQyxDQUExQixFQUE2QkMsQ0FBN0IsRUFBZ0NDLENBQWhDLEVBQW1DO0FBQ2pDLFNBQU9ILENBQUMsR0FBSUcsQ0FBQyxJQUFJLEtBQUtGLENBQUMsR0FBR0MsQ0FBVCxJQUFjLENBQUNDLENBQUMsR0FBRyxDQUFMLElBQVVELENBQTVCLENBQUYsR0FBb0MsQ0FBL0M7QUFDRDs7QUFFTSxTQUFTRSxhQUFULENBQXVCQyxRQUF2QixFQUFpQ0YsQ0FBakMsRUFBb0M7QUFDekMsUUFBTTtBQUFFRyxJQUFBQSxDQUFGO0FBQUtOLElBQUFBLENBQUw7QUFBUUMsSUFBQUEsQ0FBUjtBQUFXQyxJQUFBQTtBQUFYLE1BQWlCRyxRQUF2QjtBQUNBLFFBQU1FLE1BQU0sR0FBR1AsQ0FBQyxDQUFDUSxHQUFGLENBQU0sQ0FBQ0MsQ0FBRCxFQUFJSCxDQUFKLEtBQVVQLGFBQWEsQ0FBQ0MsQ0FBQyxDQUFDTSxDQUFELENBQUYsRUFBT0wsQ0FBQyxDQUFDSyxDQUFELENBQVIsRUFBYUosQ0FBQyxDQUFDSSxDQUFELENBQWQs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QixLQUFLLENBQUNwQixTQUFELEVBQVlWLENBQVosQ0FBTixDQUFqQztBQUNBaUMsSUFBQUEsVUFBVSxDQUFDQyxPQUFYLENBQW1CNUIsQ0FBQyxJQUFJLE9BQU9JLFNBQVMsQ0FBQ0osQ0FBQyxDQUFDSCxDQUFILENBQXhDO0FBQ0Q7O0FBQ0QsU0FBT08sU0FBUyxDQUFDSSxNQUFWLENBQWlCUixDQUFDLElBQUlBLENBQXRCLEVBQXlCNkIsTUFBaEM7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIHBvc2l0aW9uQWZ0ZXIocCwgdiwgYSwgdCkge1xuICByZXR1cm4gcCArICh0ICogKDIgKiAodiArIGEpICsgKHQgLSAxKSAqIGEpKSAvIDI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0aWNsZUFmdGVyKHBhcnRpY2xlLCB0KSB7XG4gIGNvbnN0IHsgaSwgcCwgdiwgYSB9ID0gcGFydGljbGU7XG4gIGNvbnN0IHBBZnRlciA9IHAubWFwKCh4LCBpKSA9PiBwb3NpdGlvbkFmdGVyKHBbaV0sIHZbaV0sIGFbaV0sIHQpKTtcbiAgcmV0dXJuIHsgaSwgcDogcEFmdGVyLCB2LCBhIH07XG59XG5cbmZ1bmN0aW9uIGJ5UG9zaXRpb24oYSwgYikge1xuICBpZiAoYS5wWzBdIDwgYi5wWzBdKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKGEucFswXSA+IGIucFswXSkge1xuICAgIHJldHVybiAxO1xuICB9IGVsc2UgaWYgKGEucFsxXSA8IGIucFsxXSkge1xuICAgIHJldHVybiAtMTtcbiAgfSBlbHNlIGlmIChhLnBbMV0gPiBiLnBbMV0pIHtcbiAgICByZXR1cm4gMTtcbiAgfSBlbHNlIGlmIChhLnBbMl0gPCBiLnBbMl0pIHtcbiAgICByZXR1cm4gLTE7XG4gIH0gZWxzZSBpZiAoYS5wWzJdID4gYi5wWzJdKSB7XG4gICAgcmV0dXJuIDE7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZENvbGxpc2lvbnMocGFydGljbGVzKSB7XG4gIGNvbnN0IGNvbGxpZGUgPSAoYSwgYikgPT4gYiAmJiBhLnAuZXZlcnkoKHgsIGkpID0+IHggPT09IGIucFtpXSk7XG4gIHJldHVybiBwYXJ0aWNsZXNcbiAgICAuc29ydChieVBvc2l0aW9uKVxuICAgIC5maWx0ZXIoKHgsIGksIGEpID0+IGNvbGxpZGUoeCwgYVtpIC0gMV0pIHx8IGNvbGxpZGUoeCwgYVtpICsgMV0pKTtcbn1cblxuZnVuY3Rpb24gcGFyc2UoaW5wdXQpIHtcbiAgcmV0dXJuIGlucHV0LnNwbGl0KCdcXG4nKS5tYXAoKGxpbmUsIGkpID0+IHtcbiAgICBjb25zdCBwYXJzZXIgPSAvXnA9PCgtP1xcZCspLCgtP1xcZCspLCgtP1xcZCspPiwgdj08KC0/XFxkKyksKC0/XFxkKyksKC0/XFxkKyk+LCBhPTwoLT9cXGQrKSwoLT9cXGQrKSwoLT9cXGQrKT4kLztcbiAgICBjb25zdCBudW1iZXJzID0gbGluZVxuICAgICAgLm1hdGNoKHBhcnNlcilcbiAgICAgIC5zbGljZSgxKVxuICAgICAgLm1hcCh4ID0+IHBhcnNlSW50KHgpKTtcbiAgICByZXR1cm4ge1xuICAgICAgaSxcbiAgICAgIHA6IG51bWJlcnMuc2xpY2UoMCwgMyksXG4gICAgICB2OiBudW1iZXJzLnNsaWNlKDMsIDYpLFxuICAgICAgYTogbnVtYmVycy5zbGljZSg2LCA5KSxcbiAgICB9O1xuICB9KTtcbn1cblxuZnVuY3Rpb24gY2xvc2VzdChwYXJ0aWNsZXMpIHtcbiAgY29uc3QgZGlzdGFuY2VzID0gcGFydGljbGVzLm1hcChcbiAgICB4ID0+IE1hdGguYWJzKHgucFswXSkgKyBNYXRoLmFicyh4LnBbMV0pICsgTWF0aC5hYnMoeC5wWzJdKSxcbiAgKTtcbiAgY29uc3QgbWluID0gTWF0aC5taW4oLi4uZGlzdGFuY2VzKTtcbiAgcmV0dXJuIGRpc3RhbmNlcy5pbmRleE9mKG1pbik7XG59XG5cbmZ1bmN0aW9uIGFmdGVyKHBhcnRpY2xlcywgdCkge1xuICByZXR1cm4gcGFydGljbGVzLm1hcCh4ID0+IHBhcnRpY2xlQWZ0ZXIoeCwgdCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDEoaW5wdXQpIHtcbiAgY29uc3QgcGFydGljbGVzID0gYWZ0ZXIocGFyc2UoaW5wdXQpLCAxMDAwKTtcbiAgcmV0dXJuIGNsb3Nlc3QocGFydGljbGVzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnQyKGlucHV0KSB7XG4gIGNvbnN0IHBhcnRpY2xlcyA9IHBhcnNlKGlucHV0KTtcbiAgZm9yIChsZXQgdCA9IDA7IHQgPCAxMDAwOyB0KyspIHtcbiAgICBjb25zdCBjb2xsaXNpb25zID0gZmluZENvbGxpc2lvbnMoYWZ0ZXIocGFydGljbGVzLCB0KSk7XG4gICAgY29sbGlzaW9ucy5mb3JFYWNoKHggPT4gZGVsZXRlIHBhcnRpY2xlc1t4LmldKTtcbiAgfVxuICByZXR1cm4gcGFydGljbGVzLmZpbHRlcih4ID0+IHgpLmxlbmd0aDtcbn1cbiJdfQ==