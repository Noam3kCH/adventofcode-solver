{"version":3,"sources":["day25.spec.js"],"names":["input","url","describe","it","expect","join","toEqual","undefined"],"mappings":";;AAAA;;AACA;;;;;;;AAEA,MAAMA,KAAK,GAAG,wBAAU,KAAYC,GAAtB,CAAd;AAEAC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BA,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,kCAAD,EAAqC,MAAM;AAC3CC,MAAAA,MAAM,CACJ,gBACE,CACE,SADF,EAEE,SAFF,EAGE,SAHF,EAIE,SAJF,EAKE,SALF,EAME,SANF,EAOE,SAPF,EAQE,UARF,EASEC,IATF,CASO,IATP,CADF,CADI,CAAN,CAaEC,OAbF,CAaU,CAbV;AAcD,KAfC,CAAF;AAiBAH,IAAAA,EAAE,CAAC,kCAAD,EAAqC,MAAM;AAC3CC,MAAAA,MAAM,CACJ,gBACE,CACE,UADF,EAEE,UAFF,EAGE,UAHF,EAIE,UAJF,EAKE,YALF,EAME,UANF,EAOE,UAPF,EAQE,WARF,EASE,UATF,EAUE,SAVF,EAWEC,IAXF,CAWO,IAXP,CADF,CADI,CAAN,CAeEC,OAfF,CAeU,CAfV;AAgBD,KAjBC,CAAF;AAmBAH,IAAAA,EAAE,CAAC,kCAAD,EAAqC,MAAM;AAC3CC,MAAAA,MAAM,CACJ,gBACE,CACE,UADF,EAEE,UAFF,EAGE,UAHF,EAIE,SAJF,EAKE,WALF,EAME,UANF,EAOE,UAPF,EAQE,WARF,EASE,WATF,EAUE,SAVF,EAWEC,IAXF,CAWO,IAXP,CADF,CADI,CAAN,CAeEC,OAfF,CAeU,CAfV;AAgBD,KAjBC,CAAF;AAmBAH,IAAAA,EAAE,CAAC,kCAAD,EAAqC,MAAM;AAC3CC,MAAAA,MAAM,CACJ,gBACE,CACE,YADF,EAEE,WAFF,EAGE,SAHF,EAIE,WAJF,EAKE,UALF,EAME,YANF,EAOE,WAPF,EAQE,WARF,EASE,SATF,EAUE,YAVF,EAWEC,IAXF,CAWO,IAXP,CADF,CADI,CAAN,CAeEC,OAfF,CAeU,CAfV;AAgBD,KAjBC,CAAF;AAmBAH,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBM,OAArB,CAA6B,GAA7B;AACD,KAFC,CAAF;AAGD,GA9EO,CAAR;AAgFAJ,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1CC,MAAAA,MAAM,CAAC,gBAAMJ,KAAN,CAAD,CAAN,CAAqBM,OAArB,CAA6BC,SAA7B;AACD,KAFC,CAAF;AAGD,GAJO,CAAR;AAKD,CAtFO,CAAR","sourcesContent":["import { part1, part2 } from './day25.js';\nimport readInput from '../utils/read-input';\n\nconst input = readInput(import.meta.url);\n\ndescribe('day25 2018', () => {\n  describe('part1', () => {\n    it('should work for part 1 example 1', () => {\n      expect(\n        part1(\n          [\n            '0,0,0,0',\n            '3,0,0,0',\n            '0,3,0,0',\n            '0,0,3,0',\n            '0,0,0,3',\n            '0,0,0,6',\n            '9,0,0,0',\n            '12,0,0,0',\n          ].join('\\n'),\n        ),\n      ).toEqual(2);\n    });\n\n    it('should work for part 1 example 2', () => {\n      expect(\n        part1(\n          [\n            '-1,2,2,0',\n            '0,0,2,-2',\n            '0,0,0,-2',\n            '-1,2,0,0',\n            '-2,-2,-2,2',\n            '3,0,2,-1',\n            '-1,3,2,2',\n            '-1,0,-1,0',\n            '0,2,1,-2',\n            '3,0,0,0',\n          ].join('\\n'),\n        ),\n      ).toEqual(4);\n    });\n\n    it('should work for part 1 example 3', () => {\n      expect(\n        part1(\n          [\n            '1,-1,0,1',\n            '2,0,-1,0',\n            '3,2,-1,0',\n            '0,0,3,1',\n            '0,0,-1,-1',\n            '2,3,-2,0',\n            '-2,2,0,0',\n            '2,-2,0,-1',\n            '1,-1,0,-1',\n            '3,2,0,2',\n          ].join('\\n'),\n        ),\n      ).toEqual(3);\n    });\n\n    it('should work for part 1 example 4', () => {\n      expect(\n        part1(\n          [\n            '1,-1,-1,-2',\n            '-2,-2,0,1',\n            '0,2,1,3',\n            '-2,3,-2,1',\n            '0,2,3,-2',\n            '-1,-1,1,-2',\n            '0,-2,-1,0',\n            '-2,2,3,-1',\n            '1,2,2,0',\n            '-1,-2,0,-2',\n          ].join('\\n'),\n        ),\n      ).toEqual(8);\n    });\n\n    it('should work for part 1 input', () => {\n      expect(part1(input)).toEqual(375);\n    });\n  });\n\n  describe('part2', () => {\n    it('should work for part 2 examples', () => {\n      expect(part2(input)).toEqual(undefined);\n    });\n  });\n});\n"]}