{"version":3,"sources":["day03.js"],"names":["parseClaims","input","split","map","claim","id","x","y","w","h","match","parseInt","resolveClaims","claims","fabric","Map","forEach","i","j","point","set","get","concat","getConflicts","Array","from","values","filter","length","part1","conflicts","part2","ok","Set","delete","shift"],"mappings":";;;;;;;;AAAA,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AAC1B,SAAOA,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkBC,GAAlB,CAAsBC,KAAK,IAAI;AACpC,UAAM,GAAGC,EAAH,EAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb,EAAgBC,CAAhB,IAAqBL,KAAK,CAC7BM,KADwB,CAClB,qCADkB,EAExBP,GAFwB,CAEpBG,CAAC,IAAIK,QAAQ,CAACL,CAAD,CAFO,CAA3B;AAGA,WAAO;AAAED,MAAAA,EAAF;AAAMC,MAAAA,CAAN;AAASC,MAAAA,CAAT;AAAYC,MAAAA,CAAZ;AAAeC,MAAAA;AAAf,KAAP;AACD,GALM,CAAP;AAMD;;AAED,SAASG,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,QAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAeZ,KAAK,IAAI;AACtB,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,KAAK,CAACI,CAA1B,EAA6BS,CAAC,EAA9B,EAAkC;AAChC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,KAAK,CAACK,CAA1B,EAA6BS,CAAC,EAA9B,EAAkC;AAChC,cAAMC,KAAK,GAAI,IAAGf,KAAK,CAACE,CAAN,GAAUW,CAAE,KAAIb,KAAK,CAACG,CAAN,GAAUW,CAAE,GAA9C;AACAJ,QAAAA,MAAM,CAACM,GAAP,CAAWD,KAAX,EAAkB,CAACL,MAAM,CAACO,GAAP,CAAWF,KAAX,KAAqB,EAAtB,EAA0BG,MAA1B,CAAiClB,KAAK,CAACC,EAAvC,CAAlB;AACD;AACF;AACF,GAPD;AAQA,SAAOS,MAAP;AACD;;AAED,SAASS,YAAT,CAAsBT,MAAtB,EAA8B;AAC5B,SAAOU,KAAK,CAACC,IAAN,CAAWX,MAAM,CAACY,MAAP,EAAX,EAA4BC,MAA5B,CAAmCrB,CAAC,IAAIA,CAAC,CAACsB,MAAF,IAAY,CAApD,CAAP;AACD;;AAEM,SAASC,KAAT,CAAe5B,KAAf,EAAsB;AAC3B,QAAMY,MAAM,GAAGb,WAAW,CAACC,KAAD,CAA1B;AACA,QAAMa,MAAM,GAAGF,aAAa,CAACC,MAAD,CAA5B;AACA,QAAMiB,SAAS,GAAGP,YAAY,CAACT,MAAD,CAA9B;AACA,SAAOgB,SAAS,CAACF,MAAjB;AACD;;AAEM,SAASG,KAAT,CAAe9B,KAAf,EAAsB;AAC3B,QAAMY,MAAM,GAAGb,WAAW,CAACC,KAAD,CAA1B;AACA,QAAMa,MAAM,GAAGF,aAAa,CAACC,MAAD,CAA5B;AACA,QAAMiB,SAAS,GAAGP,YAAY,CAACT,MAAD,CAA9B;AACA,QAAMkB,EAAE,GAAG,IAAIC,GAAJ,CAAQpB,MAAM,CAACV,GAAP,CAAWG,CAAC,IAAIA,CAAC,CAACD,EAAlB,CAAR,CAAX;AACAyB,EAAAA,SAAS,CAACd,OAAV,CAAkBV,CAAC,IAAIA,CAAC,CAACU,OAAF,CAAUX,EAAE,IAAI2B,EAAE,CAACE,MAAH,CAAU7B,EAAV,CAAhB,CAAvB;AACA,SAAOmB,KAAK,CAACC,IAAN,CAAWO,EAAX,EAAeG,KAAf,EAAP;AACD","sourcesContent":["function parseClaims(input) {\n  return input.split('\\n').map(claim => {\n    const [, id, x, y, w, h] = claim\n      .match(/^#(\\d+) @ (\\d+),(\\d+): (\\d+)x(\\d+)$/)\n      .map(x => parseInt(x));\n    return { id, x, y, w, h };\n  });\n}\n\nfunction resolveClaims(claims) {\n  const fabric = new Map();\n  claims.forEach(claim => {\n    for (let i = 0; i < claim.w; i++) {\n      for (let j = 0; j < claim.h; j++) {\n        const point = `(${claim.x + i}, ${claim.y + j})`;\n        fabric.set(point, (fabric.get(point) || []).concat(claim.id));\n      }\n    }\n  });\n  return fabric;\n}\n\nfunction getConflicts(fabric) {\n  return Array.from(fabric.values()).filter(x => x.length >= 2);\n}\n\nexport function part1(input) {\n  const claims = parseClaims(input);\n  const fabric = resolveClaims(claims);\n  const conflicts = getConflicts(fabric);\n  return conflicts.length;\n}\n\nexport function part2(input) {\n  const claims = parseClaims(input);\n  const fabric = resolveClaims(claims);\n  const conflicts = getConflicts(fabric);\n  const ok = new Set(claims.map(x => x.id));\n  conflicts.forEach(x => x.forEach(id => ok.delete(id)));\n  return Array.from(ok).shift();\n}\n"]}