{"version":3,"sources":["day11.js"],"names":["parse","input","pieces","state","elevator","floors","split","map","x","generators","match","microchips","concat","select","arr","num","selected","Math","min","length","Combinatorics","combination","toArray","applyMove","diff","move","floor","i","filter","includes","legal","every","m","getMoves","src","pairs","score","distance","reduce","sum","getNeighbors","neighbors","some","done","stringify","JSON","findIndex","f","sort","solve","queue","path","visited","Set","add","shift","has","json","push","a","b","part1","part2"],"mappings":"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","sourcesContent":["import Combinatorics from 'js-combinatorics';\n\nfunction parse(input) {\n  let pieces = [];\n  const state = {\n    elevator: 0,\n    floors: input.split('\\n').map(x => {\n      const generators = x.match(/[^\\s]+(?=\\s*generator)/g) || [];\n      const microchips = x.match(/[^\\s]+(?=-compatible microchip)/g) || [];\n      pieces = pieces.concat(generators).concat(microchips);\n      return { generators, microchips };\n    }),\n  };\n  state.pieces = pieces;\n  return state;\n}\n\nfunction select(arr, num) {\n  let selected = [];\n  for (num = Math.min(num, arr.length); num > 0; num--) {\n    selected = selected.concat(Combinatorics.combination(arr, num).toArray());\n  }\n  return selected;\n}\n\nfunction applyMove({ elevator, floors, pieces }, diff, move) {\n  return {\n    elevator: elevator + diff,\n    pieces,\n    floors: floors.map((floor, i) => {\n      if (i === elevator) {\n        return {\n          generators: floor.generators.filter(\n            x => !move.generators.includes(x),\n          ),\n          microchips: floor.microchips.filter(\n            x => !move.microchips.includes(x),\n          ),\n        };\n      } else if (i === elevator + diff) {\n        return {\n          generators: floor.generators.concat(move.generators),\n          microchips: floor.microchips.concat(move.microchips),\n        };\n      } else {\n        return floor;\n      }\n    }),\n  };\n}\n\nfunction legal(state) {\n  return state.floors.every(floor => {\n    return (\n      floor.generators.length === 0 ||\n      floor.microchips.every(m => floor.generators.includes(m))\n    );\n  });\n}\n\nfunction getMoves(state, diff) {\n  const src = state.floors[state.elevator];\n  const pairs = src.generators.filter(x => src.microchips.includes(x));\n  return pairs\n    .map(x => ({ generators: [x], microchips: [x] }))\n    .concat(\n      select(src.microchips, 2).map(x => ({ microchips: x, generators: [] })),\n    )\n    .concat(\n      select(src.generators, 2).map(x => ({ generators: x, microchips: [] })),\n    )\n    .map(move => applyMove(state, diff, move))\n    .filter(legal);\n}\n\nfunction score({ state, distance }) {\n  return (\n    distance +\n    state.floors.reduce(\n      (sum, x, i) =>\n        sum +\n        2 *\n          (state.floors.length - i - 1) *\n          (x.generators.length + x.microchips.length),\n      0,\n    )\n  );\n}\n\nfunction getNeighbors(state) {\n  let neighbors = [];\n  if (state.elevator < state.floors.length - 1) {\n    neighbors = neighbors.concat(getMoves(state, 1));\n  }\n  if (\n    state.elevator > 0 &&\n    state.floors.some(\n      (x, i) =>\n        i < state.elevator && x.generators.length + x.microchips.length > 0,\n    )\n  ) {\n    neighbors = neighbors.concat(getMoves(state, -1));\n  }\n  return neighbors;\n}\n\nfunction done(state) {\n  const { generators, microchips } = state.floors[state.floors.length - 1];\n  return state.pieces.length === generators.length + microchips.length;\n}\n\n// function print(state) {\n//   const dic = {\n//     promethium: 'P',\n//     cobalt: 'T',\n//     curium: 'C',\n//     ruthenium: 'R',\n//     plutonium: 'L',\n//     elerium: 'E',\n//     dilithium: 'D',\n//     hydrogen: 'H',\n//     lithium: 'M'\n//   };\n//   const str = state.floors.map((floor, i) => {\n//     let str = `${i} `;\n//     str += i === state.elevator ? 'E ' : '  ';\n//     Object.keys(dic).filter(x => state.pieces.includes(x)).forEach(k => {\n//       str += floor.generators.includes(k) ? `${dic[k]}G ` : '   ';\n//       str += floor.microchips.includes(k) ? `${dic[k]}M ` : '   ';\n//     });\n//     return str;\n//   }).reverse().join('\\n');\n//   return str;\n// }\n\nfunction stringify({ elevator, floors }) {\n  return JSON.stringify({\n    elevator,\n    floors: floors.map((floor, i) => {\n      return {\n        generators: floor.generators\n          .map(x => i - floors.findIndex(f => f.microchips.includes(x)))\n          .sort(),\n        microchips: floor.microchips\n          .map(x => i - floors.findIndex(f => f.generators.includes(x)))\n          .sort(),\n      };\n    }),\n  });\n}\n\nfunction solve(state) {\n  const queue = [{ distance: 0, state, path: [state] }];\n  const visited = new Set().add(stringify(state));\n  while (queue.length > 0) {\n    const { state, distance, path } = queue.shift();\n    const neighbors = getNeighbors(state).filter(\n      x => !visited.has(stringify(x)),\n    );\n    for (const x of neighbors) {\n      const json = stringify(x);\n      if (done(x)) {\n        // path.concat(x).forEach(state => console.log(print(state), '\\n----------------------'));\n        return distance + 1;\n      } else if (!visited.has(json)) {\n        visited.add(json);\n        queue.push({ distance: distance + 1, state: x, path: path.concat(x) });\n      }\n    }\n    queue.sort((a, b) => score(a) - score(b));\n  }\n}\n\nexport function part1(input) {\n  return solve(parse(input));\n}\n\nexport function part2(input) {\n  const state = parse(input);\n  state.floors[0].generators.push('elerium', 'dilithium');\n  state.floors[0].microchips.push('elerium', 'dilithium');\n  state.pieces.push('elerium', 'dilithium', 'elerium', 'dilithium');\n  return solve(state);\n}\n"]}