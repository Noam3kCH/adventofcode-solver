18932caf341d652953a4e342e67f5e0d
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part2 = exports.part1 = void 0;

// Naive implementation of part 1
//
// function solve1(count) {
//   let elves = new Array(count).fill().map((x, i) => i + 1);
//   while (elves.length > 1) {
//     const length = elves.length;
//     elves = elves.filter((x, i) => i % 2 === 0);
//     if (length % 2 === 1) {
//       elves.shift();
//     }
//   }
//   return elves.shift();
// }
function solve1(count) {
  // https://www.youtube.com/watch?v=uCsD3ZGzMgE
  const binary = count.toString(2);
  return parseInt(binary.slice(1) + binary.slice(0, 1), 2);
} // Super slow solution which helped in understanding the pattern
//
// function solve2(count) {
//   const elves = new Array(count).fill().map((x, i) => i + 1);
//   const originalLength = elves.length;
//   let next = 0;
//   while (elves.length > 1) {
//     const from = (next + Math.floor(elves.length / 2)) % elves.length;
//     elves.splice(from, 1);
//     if (from < next) {
//       next--;
//     }
//     next = (next + 1) % elves.length;
//   }
//   return elves.shift();
// }


function solve2(count) {
  const pow = 3 ** (count.toString(3).length - 1);

  if (pow === count) {
    return count;
  } else if (count <= pow * 2) {
    return count - pow;
  } else {
    return count - pow + (count - pow * 2);
  }
}

const part1 = input => solve1(parseInt(input));

exports.part1 = part1;

const part2 = input => solve2(parseInt(input));

exports.part2 = part2;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE5LmpzIl0sIm5hbWVzIjpbInNvbHZlMSIsImNvdW50IiwiYmluYXJ5IiwidG9TdHJpbmciLCJwYXJzZUludCIsInNsaWNlIiwic29sdmUyIiwicG93IiwibGVuZ3RoIiwicGFydDEiLCJpbnB1dCIsInBhcnQyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQSxTQUFTQSxNQUFULENBQWdCQyxLQUFoQixFQUF1QjtBQUNyQjtBQUNBLFFBQU1DLE1BQU0sR0FBR0QsS0FBSyxDQUFDRSxRQUFOLENBQWUsQ0FBZixDQUFmO0FBQ0EsU0FBT0MsUUFBUSxDQUFDRixNQUFNLENBQUNHLEtBQVAsQ0FBYSxDQUFiLElBQWtCSCxNQUFNLENBQUNHLEtBQVAsQ0FBYSxDQUFiLEVBQWdCLENBQWhCLENBQW5CLEVBQXVDLENBQXZDLENBQWY7QUFDRCxDLENBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUVBLFNBQVNDLE1BQVQsQ0FBZ0JMLEtBQWhCLEVBQXVCO0FBQ3JCLFFBQU1NLEdBQUcsR0FBRyxNQUFNTixLQUFLLENBQUNFLFFBQU4sQ0FBZSxDQUFmLEVBQWtCSyxNQUFsQixHQUEyQixDQUFqQyxDQUFaOztBQUNBLE1BQUlELEdBQUcsS0FBS04sS0FBWixFQUFtQjtBQUNqQixXQUFPQSxLQUFQO0FBQ0QsR0FGRCxNQUVPLElBQUlBLEtBQUssSUFBSU0sR0FBRyxHQUFHLENBQW5CLEVBQXNCO0FBQzNCLFdBQU9OLEtBQUssR0FBR00sR0FBZjtBQUNELEdBRk0sTUFFQTtBQUNMLFdBQU9OLEtBQUssR0FBR00sR0FBUixJQUFlTixLQUFLLEdBQUdNLEdBQUcsR0FBRyxDQUE3QixDQUFQO0FBQ0Q7QUFDRjs7QUFFTSxNQUFNRSxLQUFLLEdBQUdDLEtBQUssSUFBSVYsTUFBTSxDQUFDSSxRQUFRLENBQUNNLEtBQUQsQ0FBVCxDQUE3Qjs7OztBQUNBLE1BQU1DLEtBQUssR0FBR0QsS0FBSyxJQUFJSixNQUFNLENBQUNGLFFBQVEsQ0FBQ00sS0FBRCxDQUFULENBQTdCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTmFpdmUgaW1wbGVtZW50YXRpb24gb2YgcGFydCAxXG4vL1xuLy8gZnVuY3Rpb24gc29sdmUxKGNvdW50KSB7XG4vLyAgIGxldCBlbHZlcyA9IG5ldyBBcnJheShjb3VudCkuZmlsbCgpLm1hcCgoeCwgaSkgPT4gaSArIDEpO1xuLy8gICB3aGlsZSAoZWx2ZXMubGVuZ3RoID4gMSkge1xuLy8gICAgIGNvbnN0IGxlbmd0aCA9IGVsdmVzLmxlbmd0aDtcbi8vICAgICBlbHZlcyA9IGVsdmVzLmZpbHRlcigoeCwgaSkgPT4gaSAlIDIgPT09IDApO1xuLy8gICAgIGlmIChsZW5ndGggJSAyID09PSAxKSB7XG4vLyAgICAgICBlbHZlcy5zaGlmdCgpO1xuLy8gICAgIH1cbi8vICAgfVxuLy8gICByZXR1cm4gZWx2ZXMuc2hpZnQoKTtcbi8vIH1cblxuZnVuY3Rpb24gc29sdmUxKGNvdW50KSB7XG4gIC8vIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9dUNzRDNaR3pNZ0VcbiAgY29uc3QgYmluYXJ5ID0gY291bnQudG9TdHJpbmcoMik7XG4gIHJldHVybiBwYXJzZUludChiaW5hcnkuc2xpY2UoMSkgKyBiaW5hcnkuc2xpY2UoMCwgMSksIDIpO1xufVxuXG4vLyBTdXBlciBzbG93IHNvbHV0aW9uIHdoaWNoIGhlbHBlZCBpbiB1bmRlcnN0YW5kaW5nIHRoZSBwYXR0ZXJuXG4vL1xuLy8gZnVuY3Rpb24gc29sdmUyKGNvdW50KSB7XG4vLyAgIGNvbnN0IGVsdmVzID0gbmV3IEFycmF5KGNvdW50KS5maWxsKCkubWFwKCh4LCBpKSA9PiBpICsgMSk7XG4vLyAgIGNvbnN0IG9yaWdpbmFsTGVuZ3RoID0gZWx2ZXMubGVuZ3RoO1xuLy8gICBsZXQgbmV4dCA9IDA7XG4vLyAgIHdoaWxlIChlbHZlcy5sZW5ndGggPiAxKSB7XG4vLyAgICAgY29uc3QgZnJvbSA9IChuZXh0ICsgTWF0aC5mbG9vcihlbHZlcy5sZW5ndGggLyAyKSkgJSBlbHZlcy5sZW5ndGg7XG4vLyAgICAgZWx2ZXMuc3BsaWNlKGZyb20sIDEpO1xuLy8gICAgIGlmIChmcm9tIDwgbmV4dCkge1xuLy8gICAgICAgbmV4dC0tO1xuLy8gICAgIH1cbi8vICAgICBuZXh0ID0gKG5leHQgKyAxKSAlIGVsdmVzLmxlbmd0aDtcbi8vICAgfVxuLy8gICByZXR1cm4gZWx2ZXMuc2hpZnQoKTtcbi8vIH1cblxuZnVuY3Rpb24gc29sdmUyKGNvdW50KSB7XG4gIGNvbnN0IHBvdyA9IDMgKiogKGNvdW50LnRvU3RyaW5nKDMpLmxlbmd0aCAtIDEpO1xuICBpZiAocG93ID09PSBjb3VudCkge1xuICAgIHJldHVybiBjb3VudDtcbiAgfSBlbHNlIGlmIChjb3VudCA8PSBwb3cgKiAyKSB7XG4gICAgcmV0dXJuIGNvdW50IC0gcG93O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb3VudCAtIHBvdyArIChjb3VudCAtIHBvdyAqIDIpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBwYXJ0MSA9IGlucHV0ID0+IHNvbHZlMShwYXJzZUludChpbnB1dCkpO1xuZXhwb3J0IGNvbnN0IHBhcnQyID0gaW5wdXQgPT4gc29sdmUyKHBhcnNlSW50KGlucHV0KSk7XG4iXX0=