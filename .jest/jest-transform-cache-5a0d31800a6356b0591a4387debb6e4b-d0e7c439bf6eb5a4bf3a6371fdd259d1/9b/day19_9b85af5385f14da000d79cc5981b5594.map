{"version":3,"sources":["day19.js"],"names":["solve1","count","binary","toString","parseInt","slice","solve2","pow","length","part1","input","part2"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAT,CAAgBC,KAAhB,EAAuB;AACrB;AACA,QAAMC,MAAM,GAAGD,KAAK,CAACE,QAAN,CAAe,CAAf,CAAf;AACA,SAAOC,QAAQ,CAACF,MAAM,CAACG,KAAP,CAAa,CAAb,IAAkBH,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgB,CAAhB,CAAnB,EAAuC,CAAvC,CAAf;AACD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,SAASC,MAAT,CAAgBL,KAAhB,EAAuB;AACrB,QAAMM,GAAG,GAAG,MAAMN,KAAK,CAACE,QAAN,CAAe,CAAf,EAAkBK,MAAlB,GAA2B,CAAjC,CAAZ;;AACA,MAAID,GAAG,KAAKN,KAAZ,EAAmB;AACjB,WAAOA,KAAP;AACD,GAFD,MAEO,IAAIA,KAAK,IAAIM,GAAG,GAAG,CAAnB,EAAsB;AAC3B,WAAON,KAAK,GAAGM,GAAf;AACD,GAFM,MAEA;AACL,WAAON,KAAK,GAAGM,GAAR,IAAeN,KAAK,GAAGM,GAAG,GAAG,CAA7B,CAAP;AACD;AACF;;AAEM,MAAME,KAAK,GAAGC,KAAK,IAAIV,MAAM,CAACI,QAAQ,CAACM,KAAD,CAAT,CAA7B;;;;AACA,MAAMC,KAAK,GAAGD,KAAK,IAAIJ,MAAM,CAACF,QAAQ,CAACM,KAAD,CAAT,CAA7B","sourcesContent":["// Naive implementation of part 1\n//\n// function solve1(count) {\n//   let elves = new Array(count).fill().map((x, i) => i + 1);\n//   while (elves.length > 1) {\n//     const length = elves.length;\n//     elves = elves.filter((x, i) => i % 2 === 0);\n//     if (length % 2 === 1) {\n//       elves.shift();\n//     }\n//   }\n//   return elves.shift();\n// }\n\nfunction solve1(count) {\n  // https://www.youtube.com/watch?v=uCsD3ZGzMgE\n  const binary = count.toString(2);\n  return parseInt(binary.slice(1) + binary.slice(0, 1), 2);\n}\n\n// Super slow solution which helped in understanding the pattern\n//\n// function solve2(count) {\n//   const elves = new Array(count).fill().map((x, i) => i + 1);\n//   const originalLength = elves.length;\n//   let next = 0;\n//   while (elves.length > 1) {\n//     const from = (next + Math.floor(elves.length / 2)) % elves.length;\n//     elves.splice(from, 1);\n//     if (from < next) {\n//       next--;\n//     }\n//     next = (next + 1) % elves.length;\n//   }\n//   return elves.shift();\n// }\n\nfunction solve2(count) {\n  const pow = 3 ** (count.toString(3).length - 1);\n  if (pow === count) {\n    return count;\n  } else if (count <= pow * 2) {\n    return count - pow;\n  } else {\n    return count - pow + (count - pow * 2);\n  }\n}\n\nexport const part1 = input => solve1(parseInt(input));\nexport const part2 = input => solve2(parseInt(input));\n"]}