91049412c46d860b8f91d7781d179cc5
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function parse(input, length) {
  const regexp = /^(s|x|p)([^/]*)\/?([^/]*)$/;

  const rebuild = arr => [arr[0], arr[3], arr[2], arr[1], arr[4]].join('');

  const swap = (a, b) => new RegExp(`^(.{${a}})(.)(.{${b - a - 1}})(.)(.*)$`);

  const ops = {
    x: (str, regexp) => rebuild(str.match(regexp).slice(1)),
    p: (str, [a, b]) => {
      const [i, j] = [str.indexOf(a), str.indexOf(b)].sort((a, b) => a - b);
      return rebuild(str.match(swap(i, j)).slice(1));
    },
    s: (str, regexp) => str.match(regexp).slice(1).reverse().join('')
  };
  const params = {
    x: (a, b) => swap(...[parseInt(a), parseInt(b)].sort((a, b) => a - b)),
    p: (a, b) => [a, b],
    s: a => new RegExp(`^(.*)(.{${parseInt(a) % length}})$`)
  };
  return input.split(',').map(x => x.match(regexp).slice(1)).map(cmd => {
    const op = ops[cmd[0]];
    const args = params[cmd[0]](cmd[1], cmd[2]);
    return {
      op,
      args
    };
  });
}

function dance(order, commands) {
  return commands.reduce((x, {
    op,
    args
  }) => op(x, args), order);
}

function part1(input, order = 'abcdefghijklmnop') {
  return dance(order, parse(input, order.length));
}

function part2(input, order = 'abcdefghijklmnop', times = 1e9) {
  const commands = parse(input, order.length);
  const memory = {};
  let i;

  for (i = 0; i < times; i++) {
    if (memory[order]) {
      const loop = i - memory[order];
      i += times - times % loop;

      while (i > times - 1) {
        i -= loop;
      }
    } else {
      memory[order] = i;
    }

    order = dance(order, commands);
  }

  return order;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE2LmpzIl0sIm5hbWVzIjpbInBhcnNlIiwiaW5wdXQiLCJsZW5ndGgiLCJyZWdleHAiLCJyZWJ1aWxkIiwiYXJyIiwiam9pbiIsInN3YXAiLCJhIiwiYiIsIlJlZ0V4cCIsIm9wcyIsIngiLCJzdHIiLCJtYXRjaCIsInNsaWNlIiwicCIsImkiLCJqIiwiaW5kZXhPZiIsInNvcnQiLCJzIiwicmV2ZXJzZSIsInBhcmFtcyIsInBhcnNlSW50Iiwic3BsaXQiLCJtYXAiLCJjbWQiLCJvcCIsImFyZ3MiLCJkYW5jZSIsIm9yZGVyIiwiY29tbWFuZHMiLCJyZWR1Y2UiLCJwYXJ0MSIsInBhcnQyIiwidGltZXMiLCJtZW1vcnkiLCJsb29wIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLFNBQVNBLEtBQVQsQ0FBZUMsS0FBZixFQUFzQkMsTUFBdEIsRUFBOEI7QUFDNUIsUUFBTUMsTUFBTSxHQUFHLDRCQUFmOztBQUNBLFFBQU1DLE9BQU8sR0FBR0MsR0FBRyxJQUFJLENBQUNBLEdBQUcsQ0FBQyxDQUFELENBQUosRUFBU0EsR0FBRyxDQUFDLENBQUQsQ0FBWixFQUFpQkEsR0FBRyxDQUFDLENBQUQsQ0FBcEIsRUFBeUJBLEdBQUcsQ0FBQyxDQUFELENBQTVCLEVBQWlDQSxHQUFHLENBQUMsQ0FBRCxDQUFwQyxFQUF5Q0MsSUFBekMsQ0FBOEMsRUFBOUMsQ0FBdkI7O0FBQ0EsUUFBTUMsSUFBSSxHQUFHLENBQUNDLENBQUQsRUFBSUMsQ0FBSixLQUFVLElBQUlDLE1BQUosQ0FBWSxPQUFNRixDQUFFLFdBQVVDLENBQUMsR0FBR0QsQ0FBSixHQUFRLENBQUUsWUFBeEMsQ0FBdkI7O0FBQ0EsUUFBTUcsR0FBRyxHQUFHO0FBQ1ZDLElBQUFBLENBQUMsRUFBRSxDQUFDQyxHQUFELEVBQU1WLE1BQU4sS0FBaUJDLE9BQU8sQ0FBQ1MsR0FBRyxDQUFDQyxLQUFKLENBQVVYLE1BQVYsRUFBa0JZLEtBQWxCLENBQXdCLENBQXhCLENBQUQsQ0FEakI7QUFFVkMsSUFB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LE1BQWQsQ0FBdEI7QUFDQSxRQUFNbUMsTUFBTSxHQUFHLEVBQWY7QUFDQSxNQUFJcEIsQ0FBSjs7QUFDQSxPQUFLQSxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdtQixLQUFoQixFQUF1Qm5CLENBQUMsRUFBeEIsRUFBNEI7QUFDMUIsUUFBSW9CLE1BQU0sQ0FBQ04sS0FBRCxDQUFWLEVBQW1CO0FBQ2pCLFlBQU1PLElBQUksR0FBR3JCLENBQUMsR0FBR29CLE1BQU0sQ0FBQ04sS0FBRCxDQUF2QjtBQUNBZCxNQUFBQSxDQUFDLElBQUltQixLQUFLLEdBQUlBLEtBQUssR0FBR0UsSUFBdEI7O0FBQ0EsYUFBT3JCLENBQUMsR0FBR21CLEtBQUssR0FBRyxDQUFuQixFQUFzQjtBQUNwQm5CLFFBQUFBLENBQUMsSUFBSXFCLElBQUw7QUFDRDtBQUNGLEtBTkQsTUFNTztBQUNMRCxNQUFBQSxNQUFNLENBQUNOLEtBQUQsQ0FBTixHQUFnQmQsQ0FBaEI7QUFDRDs7QUFDRGMsSUFBQUEsS0FBSyxHQUFHRCxLQUFLLENBQUNDLEtBQUQsRUFBUUMsUUFBUixDQUFiO0FBQ0Q7O0FBQ0QsU0FBT0QsS0FBUDtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcGFyc2UoaW5wdXQsIGxlbmd0aCkge1xuICBjb25zdCByZWdleHAgPSAvXihzfHh8cCkoW14vXSopXFwvPyhbXi9dKikkLztcbiAgY29uc3QgcmVidWlsZCA9IGFyciA9PiBbYXJyWzBdLCBhcnJbM10sIGFyclsyXSwgYXJyWzFdLCBhcnJbNF1dLmpvaW4oJycpO1xuICBjb25zdCBzd2FwID0gKGEsIGIpID0+IG5ldyBSZWdFeHAoYF4oLnske2F9fSkoLikoLnske2IgLSBhIC0gMX19KSguKSguKikkYCk7XG4gIGNvbnN0IG9wcyA9IHtcbiAgICB4OiAoc3RyLCByZWdleHApID0+IHJlYnVpbGQoc3RyLm1hdGNoKHJlZ2V4cCkuc2xpY2UoMSkpLFxuICAgIHA6IChzdHIsIFthLCBiXSkgPT4ge1xuICAgICAgY29uc3QgW2ksIGpdID0gW3N0ci5pbmRleE9mKGEpLCBzdHIuaW5kZXhPZihiKV0uc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgICAgcmV0dXJuIHJlYnVpbGQoc3RyLm1hdGNoKHN3YXAoaSwgaikpLnNsaWNlKDEpKTtcbiAgICB9LFxuICAgIHM6IChzdHIsIHJlZ2V4cCkgPT5cbiAgICAgIHN0clxuICAgICAgICAubWF0Y2gocmVnZXhwKVxuICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgLnJldmVyc2UoKVxuICAgICAgICAuam9pbignJyksXG4gIH07XG4gIGNvbnN0IHBhcmFtcyA9IHtcbiAgICB4OiAoYSwgYikgPT4gc3dhcCguLi5bcGFyc2VJbnQoYSksIHBhcnNlSW50KGIpXS5zb3J0KChhLCBiKSA9PiBhIC0gYikpLFxuICAgIHA6IChhLCBiKSA9PiBbYSwgYl0sXG4gICAgczogYSA9PiBuZXcgUmVnRXhwKGBeKC4qKSgueyR7cGFyc2VJbnQoYSkgJSBsZW5ndGh9fSkkYCksXG4gIH07XG4gIHJldHVybiBpbnB1dFxuICAgIC5zcGxpdCgnLCcpXG4gICAgLm1hcCh4ID0+IHgubWF0Y2gocmVnZXhwKS5zbGljZSgxKSlcbiAgICAubWFwKGNtZCA9PiB7XG4gICAgICBjb25zdCBvcCA9IG9wc1tjbWRbMF1dO1xuICAgICAgY29uc3QgYXJncyA9IHBhcmFtc1tjbWRbMF1dKGNtZFsxXSwgY21kWzJdKTtcbiAgICAgIHJldHVybiB7IG9wLCBhcmdzIH07XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGRhbmNlKG9yZGVyLCBjb21tYW5kcykge1xuICByZXR1cm4gY29tbWFuZHMucmVkdWNlKCh4LCB7IG9wLCBhcmdzIH0pID0+IG9wKHgsIGFyZ3MpLCBvcmRlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MShpbnB1dCwgb3JkZXIgPSAnYWJjZGVmZ2hpamtsbW5vcCcpIHtcbiAgcmV0dXJuIGRhbmNlKG9yZGVyLCBwYXJzZShpbnB1dCwgb3JkZXIubGVuZ3RoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJ0MihpbnB1dCwgb3JkZXIgPSAnYWJjZGVmZ2hpamtsbW5vcCcsIHRpbWVzID0gMWU5KSB7XG4gIGNvbnN0IGNvbW1hbmRzID0gcGFyc2UoaW5wdXQsIG9yZGVyLmxlbmd0aCk7XG4gIGNvbnN0IG1lbW9yeSA9IHt9O1xuICBsZXQgaTtcbiAgZm9yIChpID0gMDsgaSA8IHRpbWVzOyBpKyspIHtcbiAgICBpZiAobWVtb3J5W29yZGVyXSkge1xuICAgICAgY29uc3QgbG9vcCA9IGkgLSBtZW1vcnlbb3JkZXJdO1xuICAgICAgaSArPSB0aW1lcyAtICh0aW1lcyAlIGxvb3ApO1xuICAgICAgd2hpbGUgKGkgPiB0aW1lcyAtIDEpIHtcbiAgICAgICAgaSAtPSBsb29wO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBtZW1vcnlbb3JkZXJdID0gaTtcbiAgICB9XG4gICAgb3JkZXIgPSBkYW5jZShvcmRlciwgY29tbWFuZHMpO1xuICB9XG4gIHJldHVybiBvcmRlcjtcbn1cbiJdfQ==