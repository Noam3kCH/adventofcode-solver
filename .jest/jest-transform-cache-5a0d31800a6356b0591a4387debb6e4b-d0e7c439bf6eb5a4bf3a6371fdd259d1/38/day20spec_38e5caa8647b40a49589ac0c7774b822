2c677bd5b0a24459cc046ff4fb183233
"use strict";

var _day = require("./day20.js");

var _readInput = _interopRequireDefault(require("../utils/read-input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const meta = Object.freeze({
  url: require('url').pathToFileURL(__filename)
});
const input = (0, _readInput.default)(meta.url);
describe('day20 2017', () => {
  describe('part1', () => {
    it('should work for part 1 examples', () => {
      expect((0, _day.part1)(['p=<3,0,0>, v=<2,0,0>, a=<-1,0,0>', 'p=<4,0,0>, v=<0,0,0>, a=<-2,0,0>'].join('\n'))).toEqual(0);
    });
    it('should work for part 1 input', () => {
      expect((0, _day.part1)(input)).toEqual(376);
    });
  });
  describe('part2', () => {
    it('should work for part 2 examples', () => {
      expect((0, _day.part2)(['p=<-6,0,0>, v=<3,0,0>, a=<0,0,0>', 'p=<-4,0,0>, v=<2,0,0>, a=<0,0,0>', 'p=<-2,0,0>, v=<1,0,0>, a=<0,0,0>', 'p=<3,0,0>, v=<-100,0,0>, a=<0,0,0>'].join('\n'))).toEqual(1);
    });
    it('should work for part 2 input', () => {
      expect((0, _day.part2)(input)).toEqual(574);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTIwLnNwZWMuanMiXSwibmFtZXMiOlsiaW5wdXQiLCJ1cmwiLCJkZXNjcmliZSIsIml0IiwiZXhwZWN0Iiwiam9pbiIsInRvRXF1YWwiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7Ozs7Ozs7QUFFQSxNQUFNQSxLQUFLLEdBQUcsd0JBQVUsS0FBWUMsR0FBdEIsQ0FBZDtBQUVBQyxRQUFRLENBQUMsWUFBRCxFQUFlLE1BQU07QUFDM0JBLEVBQUFBLFFBQVEsQ0FBQyxPQUFELEVBQVUsTUFBTTtBQUN0QkMsSUFBQUEsRUFBRSxDQUFDLGlDQUFELEVBQW9DLE1BQU07QUFDMUNDLE1BQUFBLE1BQU0sQ0FDSixnQkFDRSxDQUNFLGtDQURGLEVBRUUsa0NBRkYsRUFHRUMsSUFIRixDQUdPLElBSFAsQ0FERixDQURJLENBQU4sQ0FPRUMsT0FQRixDQU9VLENBUFY7QUFRRCxLQVRDLENBQUY7QUFXQUgsSUFBQUEsRUFBRSxDQUFDLDhCQUFELEVBQWlDLE1BQU07QUFDdkNDLE1BQUFBLE1BQU0sQ0FBQyxnQkFBTUosS0FBTixDQUFELENBQU4sQ0FBcUJNLE9BQXJCLENBQTZCLEdBQTdCO0FBQ0QsS0FGQyxDQUFGO0FBR0QsR0FmTyxDQUFSO0FBaUJBSixFQUFBQSxRQUFRLENBQUMsT0FBRCxFQUFVLE1BQU07QUFDdEJDLElBQUFBLEVBQUUsQ0FBQyxpQ0FBRCxFQUFvQyxNQUFNO0FBQzFDQyxNQUFBQSxNQUFNLENBQ0osZ0JBQ0UsQ0FDRSxrQ0FERixFQUVFLGtDQUZGLEVBR0Usa0NBSEYsRUFJRSxvQ0FKRixFQUtFQyxJQUxGLENBS08sSUFMUCxDQURGLENBREksQ0FBTixDQVNFQyxPQVRGLENBU1UsQ0FUVjtBQVVELEtBWEMsQ0FBRjtBQWFBSCxJQUFBQSxFQUFFLENBQUMsOEJBQUQsRUFBaUMsTUFBTTtBQUN2Q0MsTUFBQUEsTUFBTSxDQUFDLGdCQUFNSixLQUFOLENBQUQsQ0FBTixDQUFxQk0sT0FBckIsQ0FBNkIsR0FBN0I7QUFDRCxLQUZDLENBQUY7QUFHRCxHQWpCTyxDQUFSO0FBa0JELENBcENPLENBQVIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJ0MSwgcGFydDIgfSBmcm9tICcuL2RheTIwLmpzJztcbmltcG9ydCByZWFkSW5wdXQgZnJvbSAnLi4vdXRpbHMvcmVhZC1pbnB1dCc7XG5cbmNvbnN0IGlucHV0ID0gcmVhZElucHV0KGltcG9ydC5tZXRhLnVybCk7XG5cbmRlc2NyaWJlKCdkYXkyMCAyMDE3JywgKCkgPT4ge1xuICBkZXNjcmliZSgncGFydDEnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCB3b3JrIGZvciBwYXJ0IDEgZXhhbXBsZXMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QoXG4gICAgICAgIHBhcnQxKFxuICAgICAgICAgIFtcbiAgICAgICAgICAgICdwPTwzLDAsMD4sIHY9PDIsMCwwPiwgYT08LTEsMCwwPicsXG4gICAgICAgICAgICAncD08NCwwLDA+LCB2PTwwLDAsMD4sIGE9PC0yLDAsMD4nLFxuICAgICAgICAgIF0uam9pbignXFxuJyksXG4gICAgICAgICksXG4gICAgICApLnRvRXF1YWwoMCk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIHdvcmsgZm9yIHBhcnQgMSBpbnB1dCcsICgpID0+IHtcbiAgICAgIGV4cGVjdChwYXJ0MShpbnB1dCkpLnRvRXF1YWwoMzc2KTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgZGVzY3JpYmUoJ3BhcnQyJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgd29yayBmb3IgcGFydCAyIGV4YW1wbGVzJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KFxuICAgICAgICBwYXJ0MihcbiAgICAgICAgICBbXG4gICAgICAgICAgICAncD08LTYsMCwwPiwgdj08MywwLDA+LCBhPTwwLDAsMD4nLFxuICAgICAgICAgICAgJ3A9PC00LDAsMD4sIHY9PDIsMCwwPiwgYT08MCwwLDA+JyxcbiAgICAgICAgICAgICdwPTwtMiwwLDA+LCB2PTwxLDAsMD4sIGE9PDAsMCwwPicsXG4gICAgICAgICAgICAncD08MywwLDA+LCB2PTwtMTAwLDAsMD4sIGE9PDAsMCwwPicsXG4gICAgICAgICAgXS5qb2luKCdcXG4nKSxcbiAgICAgICAgKSxcbiAgICAgICkudG9FcXVhbCgxKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgd29yayBmb3IgcGFydCAyIGlucHV0JywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHBhcnQyKGlucHV0KSkudG9FcXVhbCg1NzQpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19