{"version":3,"sources":["day18.js"],"names":["transform","yard","x","y","current","neighbors","total","cell","filter","length","memo","next","minute","hash","map","join","result","line","part1","input","minutes","split","i","diff","Math","floor","reduce","sum","trees","lumberyards","part2"],"mappings":"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","sourcesContent":["function transform(yard, x, y) {\n  const current = yard[y][x];\n  const neighbors = [\n    yard[y - 1] && yard[y - 1][x - 1],\n    yard[y - 1] && yard[y - 1][x + 0],\n    yard[y - 1] && yard[y - 1][x + 1],\n    yard[y + 0] && yard[y + 0][x - 1],\n    yard[y + 0] && yard[y + 0][x + 1],\n    yard[y + 1] && yard[y + 1][x - 1],\n    yard[y + 1] && yard[y + 1][x + 0],\n    yard[y + 1] && yard[y + 1][x + 1],\n  ];\n  const total = cell => neighbors.filter(x => x === cell).length;\n  if (current === '.' && total('|') >= 3) {\n    return '|';\n  } else if (current === '|' && total('#') >= 3) {\n    return '#';\n  } else if (current === '#' && (total('#') === 0 || total('|') === 0)) {\n    return '.';\n  } else {\n    return current;\n  }\n}\n\nconst memo = {};\nfunction next(yard, minute) {\n  const hash = yard.map(x => x.join('')).join('\\n');\n  if (!memo[hash]) {\n    const result = yard.map((line, y) =>\n      line.map((cell, x) => transform(yard, x, y)),\n    );\n    memo[hash] = { result, minute };\n  }\n  return memo[hash];\n}\n\nexport function part1(input, minutes = 10) {\n  let yard = input.split('\\n').map(x => x.split(''));\n  for (let i = 0; i < minutes; i++) {\n    const { result, minute } = next(yard, i);\n    const diff = i - minute;\n    yard = result;\n    if (diff > 0) {\n      i += diff * Math.floor((minutes - i - 1) / diff);\n    }\n  }\n  const total = yard.reduce(\n    (sum, line) => ({\n      trees: sum.trees + line.filter(x => x === '|').length,\n      lumberyards: sum.lumberyards + line.filter(x => x === '#').length,\n    }),\n    { trees: 0, lumberyards: 0 },\n  );\n  return total.trees * total.lumberyards;\n}\n\nexport function part2(input) {\n  return part1(input, 1000000000);\n}\n"]}