4d556784f80d8c3fa584af656bbbc74b
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.part1 = part1;
exports.part2 = part2;

function transform(yard, x, y) {
  const current = yard[y][x];
  const neighbors = [yard[y - 1] && yard[y - 1][x - 1], yard[y - 1] && yard[y - 1][x + 0], yard[y - 1] && yard[y - 1][x + 1], yard[y + 0] && yard[y + 0][x - 1], yard[y + 0] && yard[y + 0][x + 1], yard[y + 1] && yard[y + 1][x - 1], yard[y + 1] && yard[y + 1][x + 0], yard[y + 1] && yard[y + 1][x + 1]];

  const total = cell => neighbors.filter(x => x === cell).length;

  if (current === '.' && total('|') >= 3) {
    return '|';
  } else if (current === '|' && total('#') >= 3) {
    return '#';
  } else if (current === '#' && (total('#') === 0 || total('|') === 0)) {
    return '.';
  } else {
    return current;
  }
}

const memo = {};

function next(yard, minute) {
  const hash = yard.map(x => x.join('')).join('\n');

  if (!memo[hash]) {
    const result = yard.map((line, y) => line.map((cell, x) => transform(yard, x, y)));
    memo[hash] = {
      result,
      minute
    };
  }

  return memo[hash];
}

function part1(input, minutes = 10) {
  let yard = input.split('\n').map(x => x.split(''));

  for (let i = 0; i < minutes; i++) {
    const {
      result,
      minute
    } = next(yard, i);
    const diff = i - minute;
    yard = result;

    if (diff > 0) {
      i += diff * Math.floor((minutes - i - 1) / diff);
    }
  }

  const total = yard.reduce((sum, line) => ({
    trees: sum.trees + line.filter(x => x === '|').length,
    lumberyards: sum.lumberyards + line.filter(x => x === '#').length
  }), {
    trees: 0,
    lumberyards: 0
  });
  return total.trees * total.lumberyards;
}

function part2(input) {
  return part1(input, 1000000000);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTE4LmpzIl0sIm5hbWVzIjpbInRyYW5zZm9ybSIsInlhcmQiLCJ4IiwieSIsImN1cnJlbnQiLCJuZWlnaGJvcnMiLCJ0b3RhbCIsImNlbGwiLCJmaWx0ZXIiLCJsZW5ndGgiLCJtZW1vIiwibmV4dCIsIm1pbnV0ZSIsImhhc2giLCJtYXAiLCJqb2luIiwicmVzdWx0IiwibGluZSIsInBhcnQxIiwiaW5wdXQiLCJtaW51dGVzIiwic3BsaXQiLCJpIiwiZGlmZiIsIk1hdGgiLCJmbG9vciIsInJlZHVjZSIsInN1bSIsInRyZWVzIiwibHVtYmVyeWFyZHMiLCJwYXJ0MiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxTQUFTQSxTQUFULENBQW1CQyxJQUFuQixFQUF5QkMsQ0FBekIsRUFBNEJDLENBQTVCLEVBQStCO0FBQzdCLFFBQU1DLE9BQU8sR0FBR0gsSUFBSSxDQUFDRSxDQUFELENBQUosQ0FBUUQsQ0FBUixDQUFoQjtBQUNBLFFBQU1HLFNBQVMsR0FBRyxDQUNoQkosSUFBSSxDQUFDRSxDQUFDLEdBQUcsQ0FBTCxDQUFKLElBQWVGLElBQUksQ0FBQ0UsQ0FBQyxHQUFHLENBQUwsQ0FBSixDQUFZRCxDQUFDLEdBQUcsQ0FBaEIsQ0FEQyxFQUVoQkQsSUFBSSxDQUFDRSxDQUFDLEdBQUcsQ0FBTCxDQUFKLElBQWVGLElBQUksQ0FBQ0UsQ0FBQyxHQUFHLENBQUwsQ0FBSixDQUFZRCxDQUFDLEdBQUcsQ0FBaEIsQ0FGQyxFQUdoQkQsSUFBSSxDQUFDRSxDQUFDLEdBQUcsQ0FBTCxDQUFKLElBQWVGLElBQUksQ0FBQ0UsQ0FBQyxHQUFHLENBQUwsQ0FBSixDQUFZRCxDQUFDLEdBQUcsQ0FBaEIsQ0FIQyxFQUloQkQsSUFBSSxDQUFDRSxDQUFDLEdBQUcsQ0FBTCxDQUFKLElBQWVGLElBQUksQ0FBQ0UsQ0FBQyxHQUFHLENBQUwsQ0FBSixDQUFZRCxDQUFDLEdBQUcsQ0FBaEIsQ0FKQyxFQUtoQkQsSUFBSSxDQUFDRSxDQUFDLEdBQUcsQ0FBTCxDQUFK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QUFYLEVBQWM7QUFDWkQsTUFBQUEsQ0FBQyxJQUFJQyxJQUFJLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXLENBQUNMLE9BQU8sR0FBR0UsQ0FBVixHQUFjLENBQWYsSUFBb0JDLElBQS9CLENBQVo7QUFDRDtBQUNGOztBQUNELFFBQU1qQixLQUFLLEdBQUdMLElBQUksQ0FBQ3lCLE1BQUwsQ0FDWixDQUFDQyxHQUFELEVBQU1WLElBQU4sTUFBZ0I7QUFDZFcsSUFBQUEsS0FBSyxFQUFFRCxHQUFHLENBQUNDLEtBQUosR0FBWVgsSUFBSSxDQUFDVCxNQUFMLENBQVlOLENBQUMsSUFBSUEsQ0FBQyxLQUFLLEdBQXZCLEVBQTRCTyxNQURqQztBQUVkb0IsSUFBQUEsV0FBVyxFQUFFRixHQUFHLENBQUNFLFdBQUosR0FBa0JaLElBQUksQ0FBQ1QsTUFBTCxDQUFZTixDQUFDLElBQUlBLENBQUMsS0FBSyxHQUF2QixFQUE0Qk87QUFGN0MsR0FBaEIsQ0FEWSxFQUtaO0FBQUVtQixJQUFBQSxLQUFLLEVBQUUsQ0FBVDtBQUFZQyxJQUFBQSxXQUFXLEVBQUU7QUFBekIsR0FMWSxDQUFkO0FBT0EsU0FBT3ZCLEtBQUssQ0FBQ3NCLEtBQU4sR0FBY3RCLEtBQUssQ0FBQ3VCLFdBQTNCO0FBQ0Q7O0FBRU0sU0FBU0MsS0FBVCxDQUFlWCxLQUFmLEVBQXNCO0FBQzNCLFNBQU9ELEtBQUssQ0FBQ0MsS0FBRCxFQUFRLFVBQVIsQ0FBWjtBQUNEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gdHJhbnNmb3JtKHlhcmQsIHgsIHkpIHtcbiAgY29uc3QgY3VycmVudCA9IHlhcmRbeV1beF07XG4gIGNvbnN0IG5laWdoYm9ycyA9IFtcbiAgICB5YXJkW3kgLSAxXSAmJiB5YXJkW3kgLSAxXVt4IC0gMV0sXG4gICAgeWFyZFt5IC0gMV0gJiYgeWFyZFt5IC0gMV1beCArIDBdLFxuICAgIHlhcmRbeSAtIDFdICYmIHlhcmRbeSAtIDFdW3ggKyAxXSxcbiAgICB5YXJkW3kgKyAwXSAmJiB5YXJkW3kgKyAwXVt4IC0gMV0sXG4gICAgeWFyZFt5ICsgMF0gJiYgeWFyZFt5ICsgMF1beCArIDFdLFxuICAgIHlhcmRbeSArIDFdICYmIHlhcmRbeSArIDFdW3ggLSAxXSxcbiAgICB5YXJkW3kgKyAxXSAmJiB5YXJkW3kgKyAxXVt4ICsgMF0sXG4gICAgeWFyZFt5ICsgMV0gJiYgeWFyZFt5ICsgMV1beCArIDFdLFxuICBdO1xuICBjb25zdCB0b3RhbCA9IGNlbGwgPT4gbmVpZ2hib3JzLmZpbHRlcih4ID0+IHggPT09IGNlbGwpLmxlbmd0aDtcbiAgaWYgKGN1cnJlbnQgPT09ICcuJyAmJiB0b3RhbCgnfCcpID49IDMpIHtcbiAgICByZXR1cm4gJ3wnO1xuICB9IGVsc2UgaWYgKGN1cnJlbnQgPT09ICd8JyAmJiB0b3RhbCgnIycpID49IDMpIHtcbiAgICByZXR1cm4gJyMnO1xuICB9IGVsc2UgaWYgKGN1cnJlbnQgPT09ICcjJyAmJiAodG90YWwoJyMnKSA9PT0gMCB8fCB0b3RhbCgnfCcpID09PSAwKSkge1xuICAgIHJldHVybiAnLic7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cbn1cblxuY29uc3QgbWVtbyA9IHt9O1xuZnVuY3Rpb24gbmV4dCh5YXJkLCBtaW51dGUpIHtcbiAgY29uc3QgaGFzaCA9IHlhcmQubWFwKHggPT4geC5qb2luKCcnKSkuam9pbignXFxuJyk7XG4gIGlmICghbWVtb1toYXNoXSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHlhcmQubWFwKChsaW5lLCB5KSA9PlxuICAgICAgbGluZS5tYXAoKGNlbGwsIHgpID0+IHRyYW5zZm9ybSh5YXJkLCB4LCB5KSksXG4gICAgKTtcbiAgICBtZW1vW2hhc2hdID0geyByZXN1bHQsIG1pbnV0ZSB9O1xuICB9XG4gIHJldHVybiBtZW1vW2hhc2hdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDEoaW5wdXQsIG1pbnV0ZXMgPSAxMCkge1xuICBsZXQgeWFyZCA9IGlucHV0LnNwbGl0KCdcXG4nKS5tYXAoeCA9PiB4LnNwbGl0KCcnKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWludXRlczsgaSsrKSB7XG4gICAgY29uc3QgeyByZXN1bHQsIG1pbnV0ZSB9ID0gbmV4dCh5YXJkLCBpKTtcbiAgICBjb25zdCBkaWZmID0gaSAtIG1pbnV0ZTtcbiAgICB5YXJkID0gcmVzdWx0O1xuICAgIGlmIChkaWZmID4gMCkge1xuICAgICAgaSArPSBkaWZmICogTWF0aC5mbG9vcigobWludXRlcyAtIGkgLSAxKSAvIGRpZmYpO1xuICAgIH1cbiAgfVxuICBjb25zdCB0b3RhbCA9IHlhcmQucmVkdWNlKFxuICAgIChzdW0sIGxpbmUpID0+ICh7XG4gICAgICB0cmVlczogc3VtLnRyZWVzICsgbGluZS5maWx0ZXIoeCA9PiB4ID09PSAnfCcpLmxlbmd0aCxcbiAgICAgIGx1bWJlcnlhcmRzOiBzdW0ubHVtYmVyeWFyZHMgKyBsaW5lLmZpbHRlcih4ID0+IHggPT09ICcjJykubGVuZ3RoLFxuICAgIH0pLFxuICAgIHsgdHJlZXM6IDAsIGx1bWJlcnlhcmRzOiAwIH0sXG4gICk7XG4gIHJldHVybiB0b3RhbC50cmVlcyAqIHRvdGFsLmx1bWJlcnlhcmRzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFydDIoaW5wdXQpIHtcbiAgcmV0dXJuIHBhcnQxKGlucHV0LCAxMDAwMDAwMDAwKTtcbn1cbiJdfQ==