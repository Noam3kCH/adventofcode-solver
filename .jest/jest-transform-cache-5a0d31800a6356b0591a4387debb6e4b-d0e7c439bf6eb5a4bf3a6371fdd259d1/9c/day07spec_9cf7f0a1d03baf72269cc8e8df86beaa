9bd37fa2619b1ef594764fd0e7371ff0
"use strict";

var _day = require("./day07.js");

var _readInput = _interopRequireDefault(require("../utils/read-input"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const meta = Object.freeze({
  url: require('url').pathToFileURL(__filename)
});
const input = (0, _readInput.default)(meta.url);
describe('day07 2016', () => {
  describe('part1', () => {
    it('should work for part 1 examples', () => {
      let s1, s2, s3, s4;
      expect((0, _day.part1)(s1 = 'abba[mnop]qrst')).toEqual(1);
      expect((0, _day.part1)(s2 = 'abcd[bddb]xyyx')).toEqual(0);
      expect((0, _day.part1)(s3 = 'aaaa[qwer]tyui')).toEqual(0);
      expect((0, _day.part1)(s4 = 'ioxxoj[asdfgh]zxcvbn')).toEqual(1);
      expect((0, _day.part1)([s1, s2, s3, s4].join('\n'))).toEqual(2);
    });
    it('should support multiple hypernets', () => {
      expect((0, _day.part1)('abba[abba]a[xxxx]qrst')).toEqual(0);
    });
    it('should work for part 1 input', () => {
      expect((0, _day.part1)(input)).toEqual(105);
    });
  });
  describe('part2', () => {
    it('should work for part 2 examples', () => {
      let s1, s2, s3, s4;
      expect((0, _day.part2)(s1 = 'aba[bab]xyz')).toEqual(1);
      expect((0, _day.part2)(s2 = 'xyx[xyx]xyx')).toEqual(0);
      expect((0, _day.part2)(s3 = 'aaa[kek]eke')).toEqual(1);
      expect((0, _day.part2)(s4 = 'zazbz[bzb]cdb')).toEqual(1);
      expect((0, _day.part2)([s1, s2, s3, s4].join('\n'))).toEqual(3);
    });
    it('should work for part 2 input', () => {
      expect((0, _day.part2)(input)).toEqual(258);
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImRheTA3LnNwZWMuanMiXSwibmFtZXMiOlsiaW5wdXQiLCJ1cmwiLCJkZXNjcmliZSIsIml0IiwiczEiLCJzMiIsInMzIiwiczQiLCJleHBlY3QiLCJ0b0VxdWFsIiwiam9pbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7Ozs7OztBQUVBLE1BQU1BLEtBQUssR0FBRyx3QkFBVSxLQUFZQyxHQUF0QixDQUFkO0FBRUFDLFFBQVEsQ0FBQyxZQUFELEVBQWUsTUFBTTtBQUMzQkEsRUFBQUEsUUFBUSxDQUFDLE9BQUQsRUFBVSxNQUFNO0FBQ3RCQyxJQUFBQSxFQUFFLENBQUMsaUNBQUQsRUFBb0MsTUFBTTtBQUMxQyxVQUFJQyxFQUFKLEVBQVFDLEVBQVIsRUFBWUMsRUFBWixFQUFnQkMsRUFBaEI7QUFDQUMsTUFBQUEsTUFBTSxDQUFDLGdCQUFPSixFQUFFLEdBQUcsZ0JBQVosQ0FBRCxDQUFOLENBQXVDSyxPQUF2QyxDQUErQyxDQUEvQztBQUNBRCxNQUFBQSxNQUFNLENBQUMsZ0JBQU9ILEVBQUUsR0FBRyxnQkFBWixDQUFELENBQU4sQ0FBdUNJLE9BQXZDLENBQStDLENBQS9DO0FBQ0FELE1BQUFBLE1BQU0sQ0FBQyxnQkFBT0YsRUFBRSxHQUFHLGdCQUFaLENBQUQsQ0FBTixDQUF1Q0csT0FBdkMsQ0FBK0MsQ0FBL0M7QUFDQUQsTUFBQUEsTUFBTSxDQUFDLGdCQUFPRCxFQUFFLEdBQUcsc0JBQVosQ0FBRCxDQUFOLENBQTZDRSxPQUE3QyxDQUFxRCxDQUFyRDtBQUNBRCxNQUFBQSxNQUFNLENBQUMsZ0JBQU0sQ0FBQ0osRUFBRCxFQUFLQyxFQUFMLEVBQVNDLEVBQVQsRUFBYUMsRUFBYixFQUFpQkcsSUFBakIsQ0FBc0IsSUFBdEIsQ0FBTixDQUFELENBQU4sQ0FBMkNELE9BQTNDLENBQW1ELENBQW5EO0FBQ0QsS0FQQyxDQUFGO0FBU0FOLElBQUFBLEVBQUUsQ0FBQyxtQ0FBRCxFQUFzQyxNQUFNO0FBQzVDSyxNQUFBQSxNQUFNLENBQUMsZ0JBQU0sdUJBQU4sQ0FBRCxDQUFOLENBQXVDQyxPQUF2QyxDQUErQyxDQUEvQztBQUNELEtBRkMsQ0FBRjtBQUlBTixJQUFBQSxFQUFFLENBQUMsOEJBQUQsRUFBaUMsTUFBTTtBQUN2Q0ssTUFBQUEsTUFBTSxDQUFDLGdCQUFNUixLQUFOLENBQUQsQ0FBTixDQUFxQlMsT0FBckIsQ0FBNkIsR0FBN0I7QUFDRCxLQUZDLENBQUY7QUFHRCxHQWpCTyxDQUFSO0FBbUJBUCxFQUFBQSxRQUFRLENBQUMsT0FBRCxFQUFVLE1BQU07QUFDdEJDLElBQUFBLEVBQUUsQ0FBQyxpQ0FBRCxFQUFvQyxNQUFNO0FBQzFDLFVBQUlDLEVBQUosRUFBUUMsRUFBUixFQUFZQyxFQUFaLEVBQWdCQyxFQUFoQjtBQUNBQyxNQUFBQSxNQUFNLENBQUMsZ0JBQU9KLEVBQUUsR0FBRyxhQUFaLENBQUQsQ0FBTixDQUFvQ0ssT0FBcEMsQ0FBNEMsQ0FBNUM7QUFDQUQsTUFBQUEsTUFBTSxDQUFDLGdCQUFPSCxFQUFFLEdBQUcsYUFBWixDQUFELENBQU4sQ0FBb0NJLE9BQXBDLENBQTRDLENBQTVDO0FBQ0FELE1BQUFBLE1BQU0sQ0FBQyxnQkFBT0YsRUFBRSxHQUFHLGFBQVosQ0FBRCxDQUFOLENBQW9DRyxPQUFwQyxDQUE0QyxDQUE1QztBQUNBRCxNQUFBQSxNQUFNLENBQUMsZ0JBQU9ELEVBQUUsR0FBRyxlQUFaLENBQUQsQ0FBTixDQUFzQ0UsT0FBdEMsQ0FBOEMsQ0FBOUM7QUFDQUQsTUFBQUEsTUFBTSxDQUFDLGdCQUFNLENBQUNKLEVBQUQsRUFBS0MsRUFBTCxFQUFTQyxFQUFULEVBQWFDLEVBQWIsRUFBaUJHLElBQWpCLENBQXNCLElBQXRCLENBQU4sQ0FBRCxDQUFOLENBQTJDRCxPQUEzQyxDQUFtRCxDQUFuRDtBQUNELEtBUEMsQ0FBRjtBQVNBTixJQUFBQSxFQUFFLENBQUMsOEJBQUQsRUFBaUMsTUFBTTtBQUN2Q0ssTUFBQUEsTUFBTSxDQUFDLGdCQUFNUixLQUFOLENBQUQsQ0FBTixDQUFxQlMsT0FBckIsQ0FBNkIsR0FBN0I7QUFDRCxLQUZDLENBQUY7QUFHRCxHQWJPLENBQVI7QUFjRCxDQWxDTyxDQUFSIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFydDEsIHBhcnQyIH0gZnJvbSAnLi9kYXkwNy5qcyc7XG5pbXBvcnQgcmVhZElucHV0IGZyb20gJy4uL3V0aWxzL3JlYWQtaW5wdXQnO1xuXG5jb25zdCBpbnB1dCA9IHJlYWRJbnB1dChpbXBvcnQubWV0YS51cmwpO1xuXG5kZXNjcmliZSgnZGF5MDcgMjAxNicsICgpID0+IHtcbiAgZGVzY3JpYmUoJ3BhcnQxJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgd29yayBmb3IgcGFydCAxIGV4YW1wbGVzJywgKCkgPT4ge1xuICAgICAgbGV0IHMxLCBzMiwgczMsIHM0O1xuICAgICAgZXhwZWN0KHBhcnQxKChzMSA9ICdhYmJhW21ub3BdcXJzdCcpKSkudG9FcXVhbCgxKTtcbiAgICAgIGV4cGVjdChwYXJ0MSgoczIgPSAnYWJjZFtiZGRiXXh5eXgnKSkpLnRvRXF1YWwoMCk7XG4gICAgICBleHBlY3QocGFydDEoKHMzID0gJ2FhYWFbcXdlcl10eXVpJykpKS50b0VxdWFsKDApO1xuICAgICAgZXhwZWN0KHBhcnQxKChzNCA9ICdpb3h4b2pbYXNkZmdoXXp4Y3ZibicpKSkudG9FcXVhbCgxKTtcbiAgICAgIGV4cGVjdChwYXJ0MShbczEsIHMyLCBzMywgczRdLmpvaW4oJ1xcbicpKSkudG9FcXVhbCgyKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgc3VwcG9ydCBtdWx0aXBsZSBoeXBlcm5ldHMnLCAoKSA9PiB7XG4gICAgICBleHBlY3QocGFydDEoJ2FiYmFbYWJiYV1hW3h4eHhdcXJzdCcpKS50b0VxdWFsKDApO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB3b3JrIGZvciBwYXJ0IDEgaW5wdXQnLCAoKSA9PiB7XG4gICAgICBleHBlY3QocGFydDEoaW5wdXQpKS50b0VxdWFsKDEwNSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdwYXJ0MicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHdvcmsgZm9yIHBhcnQgMiBleGFtcGxlcycsICgpID0+IHtcbiAgICAgIGxldCBzMSwgczIsIHMzLCBzNDtcbiAgICAgIGV4cGVjdChwYXJ0MigoczEgPSAnYWJhW2JhYl14eXonKSkpLnRvRXF1YWwoMSk7XG4gICAgICBleHBlY3QocGFydDIoKHMyID0gJ3h5eFt4eXhdeHl4JykpKS50b0VxdWFsKDApO1xuICAgICAgZXhwZWN0KHBhcnQyKChzMyA9ICdhYWFba2VrXWVrZScpKSkudG9FcXVhbCgxKTtcbiAgICAgIGV4cGVjdChwYXJ0MigoczQgPSAnemF6YnpbYnpiXWNkYicpKSkudG9FcXVhbCgxKTtcbiAgICAgIGV4cGVjdChwYXJ0MihbczEsIHMyLCBzMywgczRdLmpvaW4oJ1xcbicpKSkudG9FcXVhbCgzKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgd29yayBmb3IgcGFydCAyIGlucHV0JywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHBhcnQyKGlucHV0KSkudG9FcXVhbCgyNTgpO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl19