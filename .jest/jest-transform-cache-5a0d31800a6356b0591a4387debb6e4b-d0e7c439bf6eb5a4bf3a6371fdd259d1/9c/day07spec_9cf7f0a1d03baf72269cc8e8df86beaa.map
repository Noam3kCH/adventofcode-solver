{"version":3,"sources":["day07.spec.js"],"names":["input","url","describe","it","s1","s2","s3","s4","expect","toEqual","join"],"mappings":";;AAAA;;AACA;;;;;;;AAEA,MAAMA,KAAK,GAAG,wBAAU,KAAYC,GAAtB,CAAd;AAEAC,QAAQ,CAAC,YAAD,EAAe,MAAM;AAC3BA,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1C,UAAIC,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB;AACAC,MAAAA,MAAM,CAAC,gBAAOJ,EAAE,GAAG,gBAAZ,CAAD,CAAN,CAAuCK,OAAvC,CAA+C,CAA/C;AACAD,MAAAA,MAAM,CAAC,gBAAOH,EAAE,GAAG,gBAAZ,CAAD,CAAN,CAAuCI,OAAvC,CAA+C,CAA/C;AACAD,MAAAA,MAAM,CAAC,gBAAOF,EAAE,GAAG,gBAAZ,CAAD,CAAN,CAAuCG,OAAvC,CAA+C,CAA/C;AACAD,MAAAA,MAAM,CAAC,gBAAOD,EAAE,GAAG,sBAAZ,CAAD,CAAN,CAA6CE,OAA7C,CAAqD,CAArD;AACAD,MAAAA,MAAM,CAAC,gBAAM,CAACJ,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBG,IAAjB,CAAsB,IAAtB,CAAN,CAAD,CAAN,CAA2CD,OAA3C,CAAmD,CAAnD;AACD,KAPC,CAAF;AASAN,IAAAA,EAAE,CAAC,mCAAD,EAAsC,MAAM;AAC5CK,MAAAA,MAAM,CAAC,gBAAM,uBAAN,CAAD,CAAN,CAAuCC,OAAvC,CAA+C,CAA/C;AACD,KAFC,CAAF;AAIAN,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCK,MAAAA,MAAM,CAAC,gBAAMR,KAAN,CAAD,CAAN,CAAqBS,OAArB,CAA6B,GAA7B;AACD,KAFC,CAAF;AAGD,GAjBO,CAAR;AAmBAP,EAAAA,QAAQ,CAAC,OAAD,EAAU,MAAM;AACtBC,IAAAA,EAAE,CAAC,iCAAD,EAAoC,MAAM;AAC1C,UAAIC,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB;AACAC,MAAAA,MAAM,CAAC,gBAAOJ,EAAE,GAAG,aAAZ,CAAD,CAAN,CAAoCK,OAApC,CAA4C,CAA5C;AACAD,MAAAA,MAAM,CAAC,gBAAOH,EAAE,GAAG,aAAZ,CAAD,CAAN,CAAoCI,OAApC,CAA4C,CAA5C;AACAD,MAAAA,MAAM,CAAC,gBAAOF,EAAE,GAAG,aAAZ,CAAD,CAAN,CAAoCG,OAApC,CAA4C,CAA5C;AACAD,MAAAA,MAAM,CAAC,gBAAOD,EAAE,GAAG,eAAZ,CAAD,CAAN,CAAsCE,OAAtC,CAA8C,CAA9C;AACAD,MAAAA,MAAM,CAAC,gBAAM,CAACJ,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,EAAiBG,IAAjB,CAAsB,IAAtB,CAAN,CAAD,CAAN,CAA2CD,OAA3C,CAAmD,CAAnD;AACD,KAPC,CAAF;AASAN,IAAAA,EAAE,CAAC,8BAAD,EAAiC,MAAM;AACvCK,MAAAA,MAAM,CAAC,gBAAMR,KAAN,CAAD,CAAN,CAAqBS,OAArB,CAA6B,GAA7B;AACD,KAFC,CAAF;AAGD,GAbO,CAAR;AAcD,CAlCO,CAAR","sourcesContent":["import { part1, part2 } from './day07.js';\nimport readInput from '../utils/read-input';\n\nconst input = readInput(import.meta.url);\n\ndescribe('day07 2016', () => {\n  describe('part1', () => {\n    it('should work for part 1 examples', () => {\n      let s1, s2, s3, s4;\n      expect(part1((s1 = 'abba[mnop]qrst'))).toEqual(1);\n      expect(part1((s2 = 'abcd[bddb]xyyx'))).toEqual(0);\n      expect(part1((s3 = 'aaaa[qwer]tyui'))).toEqual(0);\n      expect(part1((s4 = 'ioxxoj[asdfgh]zxcvbn'))).toEqual(1);\n      expect(part1([s1, s2, s3, s4].join('\\n'))).toEqual(2);\n    });\n\n    it('should support multiple hypernets', () => {\n      expect(part1('abba[abba]a[xxxx]qrst')).toEqual(0);\n    });\n\n    it('should work for part 1 input', () => {\n      expect(part1(input)).toEqual(105);\n    });\n  });\n\n  describe('part2', () => {\n    it('should work for part 2 examples', () => {\n      let s1, s2, s3, s4;\n      expect(part2((s1 = 'aba[bab]xyz'))).toEqual(1);\n      expect(part2((s2 = 'xyx[xyx]xyx'))).toEqual(0);\n      expect(part2((s3 = 'aaa[kek]eke'))).toEqual(1);\n      expect(part2((s4 = 'zazbz[bzb]cdb'))).toEqual(1);\n      expect(part2([s1, s2, s3, s4].join('\\n'))).toEqual(3);\n    });\n\n    it('should work for part 2 input', () => {\n      expect(part2(input)).toEqual(258);\n    });\n  });\n});\n"]}