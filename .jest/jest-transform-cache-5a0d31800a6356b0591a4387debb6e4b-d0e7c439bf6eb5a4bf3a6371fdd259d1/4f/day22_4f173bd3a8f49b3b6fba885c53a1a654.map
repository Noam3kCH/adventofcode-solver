{"version":3,"sources":["day22.js"],"names":["turnLeft","direction","turnRight","turnBackward","turn","state","node","nodes","toKey","position","next","evolved","move","x","y","burst","infections","parse","input","lines","split","length","forEach","line","part1","bursts","i","part2"],"mappings":"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","sourcesContent":["function turnLeft(direction) {\n  switch (direction) {\n    case 'U':\n      return 'L';\n    case 'D':\n      return 'R';\n    case 'L':\n      return 'D';\n    case 'R':\n      return 'U';\n    default:\n  }\n}\n\nfunction turnRight(direction) {\n  switch (direction) {\n    case 'U':\n      return 'R';\n    case 'D':\n      return 'L';\n    case 'L':\n      return 'U';\n    case 'R':\n      return 'D';\n    default:\n  }\n}\n\nfunction turnBackward(direction) {\n  switch (direction) {\n    case 'U':\n      return 'D';\n    case 'D':\n      return 'U';\n    case 'L':\n      return 'R';\n    case 'R':\n      return 'L';\n    default:\n  }\n}\n\nfunction turn(state) {\n  const node = state.nodes[toKey(state.position)];\n  switch (node) {\n    case '#':\n      return turnRight(state.direction);\n    case 'W':\n      return state.direction;\n    case 'F':\n      return turnBackward(state.direction);\n    default:\n      return turnLeft(state.direction);\n  }\n}\n\nfunction next(node, evolved) {\n  switch (node) {\n    case '#':\n      return evolved ? 'F' : '.';\n    case 'W':\n      return '#';\n    case 'F':\n      return '.';\n    default:\n      return evolved ? 'W' : '#';\n  }\n}\n\nfunction move({ x, y }, direction) {\n  switch (direction) {\n    case 'U':\n      return { x, y: y - 1 };\n    case 'D':\n      return { x, y: y + 1 };\n    case 'L':\n      return { x: x - 1, y };\n    case 'R':\n      return { x: x + 1, y };\n    default:\n  }\n}\n\nfunction toKey({ x, y }) {\n  return `${x}:${y}`;\n}\n\nfunction burst(state, evolved) {\n  state.direction = turn(state);\n  state.nodes[toKey(state.position)] = next(\n    state.nodes[toKey(state.position)],\n    evolved,\n  );\n  state.infections += state.nodes[toKey(state.position)] === '#' ? 1 : 0;\n  state.position = move(state.position, state.direction);\n}\n\nfunction parse(input) {\n  const nodes = {};\n  const lines = input.split('\\n');\n  const position = { x: (lines[0].length - 1) / 2, y: (lines.length - 1) / 2 };\n  lines.forEach((line, y) =>\n    line.split('').forEach((node, x) => (nodes[toKey({ x, y })] = node)),\n  );\n  return { nodes, position };\n}\n\nexport function part1(input, bursts = 1e4, evolved = false) {\n  const { nodes, position } = parse(input);\n  const state = { nodes, position, direction: 'U', infections: 0 };\n  for (let i = 0; i < bursts; i++) {\n    burst(state, evolved);\n  }\n  return state.infections;\n}\n\nexport function part2(input, bursts = 1e7) {\n  return part1(input, bursts, true);\n}\n"]}